{"file_contents":{"README.md":{"content":"# SAT Report Generator - Cully Automation (Phase 1b)\n\nA comprehensive Flask-based web application for generating System Acceptance Testing (SAT) reports with **complete user account system, admin approvals, role-based dashboards, and database persistence**.\n\n## 🚀 New Features (Phase 1b)\n\n### User Account System\n- **User Registration**: New users can register with role requests (Engineer/TM/PM)\n- **Admin Approval Workflow**: Pending users await admin approval before activation\n- **Role-Based Access Control**: Admin, Engineer, Technical Manager, Project Manager roles\n- **Secure Authentication**: Password hashing, session management, CSRF protection\n- **Database Persistence**: User accounts and settings stored in PostgreSQL/SQLite\n\n### Role-Based Dashboards\n- **Admin Dashboard**: User management, system settings, database status monitoring\n- **Engineer Dashboard**: Create reports, view personal reports (placeholder)\n- **Technical Manager Dashboard**: Assigned reviews (placeholder)\n- **Project Manager Dashboard**: Final approvals (placeholder)\n\n### User Management (Admin Only)\n- **User Approval**: Approve pending registrations and assign roles\n- **User Control**: Enable/disable user accounts\n- **Role Assignment**: Change user roles (Admin/Engineer/TM/PM)\n- **User Filtering**: Filter by status (All/Pending/Active/Disabled)\n\n### System Settings (Admin Only)\n- **Company Logo Management**: View current logo (update coming soon)\n- **Storage Configuration**: Set default report storage location\n- **Database Status**: Real-time connection monitoring\n- **Theme Consistency**: Maintains existing visual design\n\n## 📋 Table of Contents\n\n1. [Installation & Setup](#installation--setup)\n2. [Configuration](#configuration)\n3. [User Roles & Permissions](#user-roles--permissions)\n4. [User Journey](#user-journey)\n5. [Database Schema](#database-schema)\n6. [Application Structure](#application-structure)\n7. [Security Features](#security-features)\n8. [API Endpoints](#api-endpoints)\n9. [Deployment](#deployment)\n\n## 🛠 Installation & Setup\n\n### Prerequisites\n- Python 3.7+\n- PostgreSQL (recommended) or SQLite (development)\n- Windows (for PDF export functionality)\n- SMTP email account for notifications\n\n### Quick Start\n```bash\n# Clone the repository\ngit clone <your-repo-url>\ncd sat-report-generator\n\n# Install dependencies\npip install -r requirements.txt\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your configurations\n\n# Run the application\npython app.py\n```\n\n### Dependencies\n```\nFlask==2.3.3\nFlask-WTF==1.1.1\nFlask-SQLAlchemy==3.0.5\nFlask-Login==0.6.2\nWerkzeug==2.3.7\npsycopg2-binary==2.9.7\npython-docx==0.8.11\ndocxtpl==0.16.7\nPillow==10.0.1\npython-dotenv==1.0.0\npywin32==306  # Windows only\n```\n\n## ⚙️ Configuration\n\n### Environment Variables (.env)\n```env\n# Flask Configuration\nSECRET_KEY=your-secret-key-here\nCSRF_SECRET_KEY=your-csrf-secret-key\nFLASK_DEBUG=True\n\n# Database Configuration\nDATABASE_URL=postgresql://postgres:password@host:5432/database\n# For development: DATABASE_URL=sqlite:///sat_reports.db\n\n# Email Configuration\nSMTP_SERVER=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USERNAME=your-email@gmail.com\nSMTP_PASSWORD=your-app-password\nDEFAULT_SENDER=your-email@gmail.com\n\n# Default Approvers\nAPPROVER_1=techlead@company.com\nAPPROVER_2=projectmanager@company.com\n\n# Optional Features\nENABLE_PDF_EXPORT=True\nENABLE_EMAIL_NOTIFICATIONS=True\n```\n\n## 👥 User Roles & Permissions\n\n### Admin\n- **Full Access**: User management, system settings, database monitoring\n- **User Approval**: Approve/disable users, assign roles\n- **System Configuration**: Company logo, storage settings\n- **Database Status**: Monitor connection health\n\n### Engineer\n- **Report Creation**: Access to SAT report generator\n- **Personal Reports**: View own reports (placeholder)\n- **Limited Access**: Cannot access admin or other users' content\n\n### Technical Manager (TM)\n- **Review Access**: Reports assigned for technical review (placeholder)\n- **Limited Scope**: Only assigned items visible\n\n### Project Manager (PM)\n- **Final Approvals**: Reports assigned for final approval (placeholder)\n- **Project Oversight**: Limited to assigned projects\n\n## 🔄 User Journey\n\n### 1. Welcome Page\n- New users see \"Welcome to Cully SAT Report Generator\"\n- Options: Register or Log In\n- Features overview\n\n### 2. Registration Process\n```\nUser fills registration form → \nRequest submitted → \nAdmin receives notification → \nAdmin approves & assigns role → \nUser can log in → \nRedirected to role dashboard\n```\n\n### 3. Login Process\n```\nUser enters credentials → \nStatus check:\n├── Pending → Pending approval page\n├── Disabled → Error message\n└── Active → Role-based dashboard\n```\n\n### 4. Role-Based Experience\n- **Admin**: User management, system configuration\n- **Engineer**: Report creation, personal dashboard\n- **TM**: Review assignments (placeholder)\n- **PM**: Final approvals (placeholder)\n\n## 🗄 Database Schema\n\n### Users Table\n```sql\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY,\n    full_name VARCHAR(100) NOT NULL,\n    email VARCHAR(120) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    role VARCHAR(20),  -- Admin, Engineer, TM, PM\n    status VARCHAR(20) DEFAULT 'Pending',  -- Pending, Active, Disabled\n    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    requested_role VARCHAR(20)\n);\n```\n\n### System Settings Table\n```sql\nCREATE TABLE system_settings (\n    id INTEGER PRIMARY KEY,\n    key VARCHAR(50) UNIQUE NOT NULL,\n    value TEXT,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### Default Data\n- **Admin User**: admin@cully.ie / admin123 (created automatically)\n- **Default Settings**: Company logo, storage location\n\n## 🏗 Application Structure\n\n### Flask Application (app.py)\n- **Database Integration**: SQLAlchemy with PostgreSQL/SQLite\n- **Authentication**: Flask-Login with role-based access\n- **CSRF Protection**: Global CSRF token management\n- **Blueprint Architecture**: Modular route organization\n\n### File Structure\n```\nSAT_Report_App/\n├── app.py                    # Main Flask application with auth\n├── models.py                 # Database models (User, SystemSettings)\n├── auth.py                   # Authentication utilities\n├── config.py                 # Configuration with database settings\n├── routes/                   # Blueprint routes\n│   ├── auth.py              # Authentication routes\n│   ├── dashboard.py         # Role-based dashboards\n│   ├── main.py              # SAT form (protected)\n│   ├── approval.py          # Approval workflow\n│   └── status.py            # Status tracking\n├── templates/               # HTML templates\n│   ├── welcome.html         # Welcome page\n│   ├── register.html        # User registration\n│   ├── login.html           # User login\n│   ├── admin_dashboard.html # Admin dashboard\n│   ├── engineer_dashboard.html # Engineer dashboard\n│   ├── tm_dashboard.html    # TM dashboard\n│   ├── pm_dashboard.html    # PM dashboard\n│   ├── user_management.html # User management\n│   ├── system_settings.html # System settings\n│   └── ... (existing templates)\n└── ... (existing structure)\n```\n\n### Navigation System\n- **Top Bar**: Logo, app title, user info, database status, logout\n- **Role-Aware Sidebar**: \n  - Admin: Home, User Management, System Settings, All Reports\n  - Engineer: Home, My Reports, Create Report\n  - TM: Home, Assigned Reviews\n  - PM: Home, Final Approvals\n\n## 🔒 Security Features\n\n### Authentication & Authorization\n- **Password Hashing**: Werkzeug secure password hashing\n- **Session Management**: Flask-Login user sessions\n- **Role-Based Access**: Decorators for route protection\n- **CSRF Protection**: Comprehensive form protection\n\n### Database Security\n- **Connection Pooling**: SQLAlchemy engine configuration\n- **SQL Injection Protection**: ORM-based queries\n- **Environment Variables**: Sensitive data in .env\n\n### Access Control\n- **Login Required**: Protected routes require authentication\n- **Role Validation**: Role-specific route access\n- **Status Checking**: Active user validation\n- **Admin Protection**: Admin-only functionality secured\n\n## 🌐 API Endpoints\n\n### Authentication Routes\n```\nGET  /auth/welcome           - Welcome page\nGET  /auth/register         - Registration form\nPOST /auth/register         - Process registration\nGET  /auth/login           - Login form\nPOST /auth/login           - Process login\nGET  /auth/logout          - User logout\nGET  /auth/pending         - Pending approval page\n```\n\n### Dashboard Routes\n```\nGET  /dashboard/           - Role-based dashboard redirect\nGET  /dashboard/admin      - Admin dashboard\nGET  /dashboard/engineer   - Engineer dashboard\nGET  /dashboard/technical-manager - TM dashboard\nGET  /dashboard/project-manager   - PM dashboard\n```\n\n### Admin Routes\n```\nGET  /dashboard/user-management   - User management page\nPOST /dashboard/approve-user/<id> - Approve user\nPOST /dashboard/disable-user/<id> - Disable user\nPOST /dashboard/enable-user/<id>  - Enable user\nGET  /dashboard/system-settings   - System settings page\nPOST /dashboard/update-settings   - Update settings\n```\n\n### Protected SAT Routes\n```\nGET  /form                 - SAT form (login required)\nPOST /generate            - Generate report (login required)\n```\n\n## 📊 Database Status Monitoring\n\n### Connection Health\n- **Real-time Status**: Database connectivity check\n- **Admin Dashboard**: Visual status indicator\n- **Error Handling**: Graceful degradation when disconnected\n\n### Status Indicators\n- **Connected** (Green): Database operational\n- **Not Connected** (Amber): Database unavailable\n- **Warning Banner**: Configuration guidance\n\n## 🎨 Visual Design Consistency\n\n### Design Principles\n- **Preserved Styling**: Maintains existing color scheme, fonts, spacing\n- **Component Reuse**: Same buttons, inputs, cards, navigation\n- **Theme Compatibility**: Light/dark mode support maintained\n- **Responsive Design**: Mobile-friendly layouts\n\n### UI Components\n- **Buttons**: Primary, secondary, success, danger variants\n- **Forms**: Consistent input styling and validation\n- **Cards**: Section cards, stat cards, action cards\n- **Navigation**: Top bar, sidebar, breadcrumbs\n- **Status Badges**: Color-coded status indicators\n\n## 🚀 Deployment\n\n### Environment Setup\n1. **Database**: Configure PostgreSQL connection\n2. **Environment Variables**: Set production values\n3. **Static Files**: Ensure proper asset serving\n4. **Security**: Enable HTTPS, secure cookies\n\n### Production Configuration\n```python\n# config.py - ProductionConfig\nDEBUG = False\nSESSION_COOKIE_SECURE = True\nDATABASE_URL = 'postgresql://...'  # Production database\n```\n\n### Health Checks\n- Database connectivity monitoring\n- User authentication validation\n- Role-based access verification\n\n## 🔄 Migration from Phase 1a\n\n### Backward Compatibility\n- **Existing Reports**: All previous SAT reports preserved\n- **Approval Workflow**: Previous approval system intact\n- **File Structure**: No breaking changes to existing files\n\n### New Requirements\n- Users must register and be approved by admin\n- SAT form access requires login\n- Role assignment determines dashboard access\n\n## 🎯 Phase 1b Acceptance Criteria ✅\n\n- ✅ Registration creates Pending user with confirmation page\n- ✅ Admin can approve, assign roles, disable/enable users\n- ✅ Pending users cannot log in; Active users can\n- ✅ Users land on correct role dashboard after login\n- ✅ Navigation is role-aware with access control\n- ✅ System settings store logo and storage location\n- ✅ Database status badge reflects connection state\n- ✅ All pages match existing site colors, fonts, spacing\n\n## 📞 Support & Contact\n\nFor technical support or questions about the SAT Report Generator:\n- **Development Team**: Cully Automation\n- **Documentation**: This README file\n- **Issue Reporting**: Contact your system administrator\n\n---\n\n**Note**: This Phase 1b implementation adds complete user management while preserving all existing SAT report functionality. The visual design remains identical to maintain consistency across the application.","size_bytes":12264},"app.py":{"content":"import os\nimport sys\nimport signal\nimport logging\nimport traceback\nfrom flask import Flask, g, request, render_template, jsonify, make_response, redirect, url_for\nfrom flask_wtf.csrf import CSRFProtect, generate_csrf, CSRFError\nfrom flask_login import current_user, login_required\nfrom config import Config, config\nfrom middleware import init_security_middleware\n\n# Initialize CSRF protection globally\ncsrf = CSRFProtect()\n\n# Import only essential modules - lazy load others\ntry:\n    from models import db, User, init_db\n    from auth import init_auth\n    # Lazy import blueprints to reduce startup time\nexcept ImportError as e:\n    print(f\"❌ Import error: {e}\")\n    sys.exit(1)\n\ndef create_app(config_name='default'):\n    \"\"\"Create and configure Flask application\"\"\"\n    app = Flask(__name__)\n    \n    # Load configuration based on environment\n    config_class = config.get(config_name, config['default'])\n    app.config.from_object(config_class)\n    \n    # Initialize production security middleware\n    # Temporarily disabled for remote access testing\n    # if config_name == 'production':\n    #     init_security_middleware(app)\n    \n    # Initialize extensions\n    csrf.init_app(app)\n\n    # Initialize database and auth\n    try:\n        db_initialized = init_db(app)\n        if not db_initialized:\n            app.logger.warning(\"Database initialization returned False\")\n\n        init_auth(app)\n        app.logger.info(\"Database and auth initialized\")\n    except Exception as e:\n        app.logger.error(f\"Failed to initialize database or auth: {e}\")\n        traceback.print_exc()\n        db_initialized = False\n\n    # Minimal logging for maximum performance\n    logging.basicConfig(level=logging.ERROR)\n\n    # Add CSRF token to g for access in templates\n    @app.before_request\n    def add_csrf_token():\n        token = generate_csrf()\n        g.csrf_token = token\n    \n    # Performance optimization - remove slow session checks\n\n    # Inject CSRF token into all responses\n    @app.after_request\n    def set_csrf_cookie(response):\n        if response.mimetype == 'text/html' and hasattr(g, 'csrf_token'):\n            response.set_cookie(\n                'csrf_token', g.csrf_token,\n                httponly=False, samesite='Lax', secure=app.config.get('USE_HTTPS', False)\n            )\n        # Enforce HTTPS security headers\n        if app.config.get('USE_HTTPS', False):\n            response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n            response.headers['X-Content-Type-Options'] = 'nosniff'\n            response.headers['X-Frame-Options'] = 'DENY'\n        return response\n\n    # Make CSRF token available in all templates\n    @app.context_processor\n    def inject_csrf():\n        return dict(csrf_token=getattr(g, 'csrf_token', generate_csrf()))\n\n    # CSRF token refresh endpoint\n    @app.route('/refresh_csrf')\n    def refresh_csrf():\n        \"\"\"Refresh CSRF token via AJAX\"\"\"\n        return jsonify({'csrf_token': generate_csrf()})\n\n    # API endpoint for getting users by role\n    @app.route('/api/get-users-by-role')\n    @login_required\n    def get_users_by_role():\n        \"\"\"API endpoint to get users by role for dropdowns\"\"\"\n        try:\n            # Only get active users\n            users = User.query.filter_by(status='Active').all()\n            users_by_role = {\n                'Admin': [],\n                'Engineer': [],\n                'Automation Manager': [],\n                'PM': []\n            }\n\n            for user in users:\n                user_data = {\n                    'name': user.full_name,\n                    'email': user.email\n                }\n\n                # Map database roles to frontend role categories\n                if user.role == 'Admin':\n                    users_by_role['Admin'].append(user_data)\n                elif user.role == 'Engineer':\n                    users_by_role['Engineer'].append(user_data)\n                elif user.role in ['Automation Manager']:\n                    users_by_role['Automation Manager'].append(user_data)\n                elif user.role in ['PM', 'Project Manager', 'Project_Manager']:\n                    users_by_role['PM'].append(user_data)\n\n            app.logger.info(f\"Found {len(users)} total users\")\n            app.logger.info(f\"Users by role: Automation Manager={len(users_by_role['Automation Manager'])}, PM={len(users_by_role['PM'])}, Admin={len(users_by_role['Admin'])}, Engineer={len(users_by_role['Engineer'])}\")\n\n            return jsonify({'success': True, 'users': users_by_role})\n        except Exception as e:\n            app.logger.error(f\"Error in get_users_by_role endpoint: {e}\")\n            return jsonify({'success': False, 'error': 'Unable to fetch users at this time'}), 500\n\n    # Custom CSRF error handler\n    @app.errorhandler(CSRFError)\n    def handle_csrf_error(e):\n        app.logger.error(f\"CSRF Error occurred: {str(e)}\")\n        app.logger.error(f\"Request Method: {request.method}\")\n        app.logger.error(f\"Request Form Keys: {list(request.form.keys()) if request.form else []}\")\n        app.logger.error(f\"CSRF Token Submitted: {request.form.get('csrf_token') if request.form else 'No form data'}\")\n\n        # For AJAX requests, return JSON error\n        if request.headers.get('X-Requested-With') == 'XMLHttpRequest':\n            return jsonify({\n                'error': 'CSRF token expired',\n                'message': 'Please refresh the page and try again',\n                'csrf_token': generate_csrf()\n            }), 400\n\n        # Ensure we have a CSRF token for the error page\n        if not hasattr(g, 'csrf_token'):\n            g.csrf_token = generate_csrf()\n\n        return render_template('csrf_error.html', reason=str(e)), 400\n\n    # Root route - redirect to welcome or dashboard\n    @app.route('/')\n    def index():\n        if current_user.is_authenticated:\n            return redirect(url_for('dashboard.home'))\n        return redirect(url_for('auth.welcome'))\n\n    # Legacy redirects\n    @app.route('/sat_form')\n    def legacy_sat_form():\n        return redirect(url_for('reports.new'))\n\n    @app.route('/sat')\n    @app.route('/sat/start')\n    def legacy_sat():\n        return redirect(url_for('reports.new_sat'))\n\n    @app.route('/generate_sat')\n    def legacy_generate_sat():\n        return redirect(url_for('reports.new_sat'))\n\n    # Lazy import and register blueprints for faster startup\n    def register_blueprints():\n        from routes.auth import auth_bp\n        from routes.dashboard import dashboard_bp\n        from routes.reports import reports_bp\n        from routes.notifications import notifications_bp\n        from routes.io_builder import io_builder_bp\n        from routes.main import main_bp\n        from routes.approval import approval_bp\n        from routes.status import status_bp\n\n        app.register_blueprint(auth_bp, url_prefix='/auth')\n        app.register_blueprint(dashboard_bp, url_prefix='/dashboard')\n        app.register_blueprint(reports_bp, url_prefix='/reports')\n        app.register_blueprint(notifications_bp, url_prefix='/notifications')\n        app.register_blueprint(io_builder_bp, url_prefix='/io-builder')\n        app.register_blueprint(main_bp)\n        app.register_blueprint(approval_bp, url_prefix='/approve')\n        app.register_blueprint(status_bp, url_prefix='/status')\n\n    register_blueprints()\n\n    # Error handlers\n    @app.errorhandler(404)\n    def not_found_error(error):\n        return render_template('404.html'), 404\n\n    @app.errorhandler(500)\n    def internal_error(error):\n        db.session.rollback()\n        return render_template('404.html'), 500\n\n    @app.errorhandler(400)\n    def csrf_error(error):\n        \"\"\"Handle CSRF token errors\"\"\"\n        return render_template('csrf_error.html'), 400\n\n    # 404 Error handler\n    @app.errorhandler(404)\n    def page_not_found(e):\n        return render_template('404.html'), 404\n\n    # Minimal response logging for performance\n    @app.after_request\n    def log_response(response):\n        return response\n\n    if not db_initialized:\n        app.logger.warning(\"Database initialization failed - running without database\")\n\n    return app\n\ndef sigint_handler(signum, frame):\n    \"\"\"Handle Ctrl+C gracefully\"\"\"\n    print(\"\\n📡 Shutting down server...\")\n    sys.exit(0)\n\nif __name__ == '__main__':\n    # Set up signal handling\n    signal.signal(signal.SIGINT, sigint_handler)\n    signal.signal(signal.SIGTERM, sigint_handler)\n\n    try:\n        print(\"🔧 Initializing SAT Report Generator...\")\n        \n        # Determine environment\n        flask_env = os.environ.get('FLASK_ENV', 'development')\n        config_name = 'production' if flask_env == 'production' else 'development'\n        \n        # Create the app with appropriate configuration\n        app = create_app(config_name)\n        \n        # Log security status for production\n        if config_name == 'production':\n            print(\"🔒 Production mode: Domain security enabled\")\n            print(f\"🌐 Allowed domain: {app.config.get('ALLOWED_DOMAINS', [])}\")\n            print(f\"🚫 IP access blocking: {app.config.get('BLOCK_IP_ACCESS', False)}\")\n\n        # Print startup information\n        print(f\"🚀 Starting {app.config.get('APP_NAME', 'SAT Report Generator')}...\")\n        print(f\"Debug Mode: {app.config.get('DEBUG', False)}\")\n        protocol = \"http\"  # Temporarily using HTTP for testing\n        print(f\"Running on {protocol}://0.0.0.0:{app.config.get('PORT', 5000)}\")\n        print(\"ℹ️  Testing with HTTP - SSL disabled temporarily\")\n\n        # Create required directories if they don't exist\n        try:\n            upload_root = app.config.get('UPLOAD_ROOT', 'static/uploads')\n            signatures_folder = app.config.get('SIGNATURES_FOLDER', 'static/signatures')\n            submissions_file = app.config.get('SUBMISSIONS_FILE', 'data/submissions.json')\n\n            os.makedirs(upload_root, exist_ok=True)\n            os.makedirs(signatures_folder, exist_ok=True)\n            os.makedirs(os.path.dirname(submissions_file), exist_ok=True)\n            os.makedirs('instance', exist_ok=True)\n            os.makedirs('logs', exist_ok=True)\n            # Ensure upload directory exists\n            upload_dir = app.config.get('UPLOAD_FOLDER')\n            if upload_dir and not os.path.exists(upload_dir):\n                os.makedirs(upload_dir, exist_ok=True)\n\n            # Ensure output directory exists\n            output_dir = app.config.get('OUTPUT_DIR')\n            if output_dir and not os.path.exists(output_dir):\n                os.makedirs(output_dir, exist_ok=True)\n            print(\"✅ Required directories created successfully\")\n        except Exception as dir_error:\n            print(f\"⚠️  Warning: Could not create some directories: {dir_error}\")\n\n        # Test a simple route to ensure app is working\n        @app.route('/health')\n        def health_check():\n            try:\n                # Test database connection\n                from models import db\n                with db.engine.connect() as connection:\n                    connection.execute(db.text('SELECT 1'))\n                db_status = 'connected'\n            except Exception as e:\n                app.logger.error(f\"Database health check failed: {e}\")\n                db_status = 'disconnected'\n            \n            return jsonify({\n                'status': 'healthy', \n                'message': 'SAT Report Generator is running',\n                'database': db_status\n            })\n\n        print(\"🌐 Health check endpoint available at /health\")\n\n        # Run the server\n        try:\n            # Production server configuration\n            host = '0.0.0.0'  # Bind to all interfaces\n            port = app.config['PORT']\n            debug = app.config.get('DEBUG', False)\n            \n            if config_name == 'production':\n                print(f\"🚀 Starting production server on port {port}\")\n                print(\"⚠️  Production mode: Use a WSGI server like Gunicorn for deployment\")\n            \n            # Enable SSL/HTTPS for secure connections\n            if app.config.get('USE_HTTPS', False) and os.path.exists(app.config.get('SSL_CERT_PATH', '')) and os.path.exists(app.config.get('SSL_KEY_PATH', '')):\n                ssl_context = (app.config['SSL_CERT_PATH'], app.config['SSL_KEY_PATH'])\n                print(\"🔒 HTTPS enabled with SSL certificates\")\n            else:\n                ssl_context = None\n                print(\"ℹ️  Running in HTTP mode - SSL certificates not found\")\n\n            app.run(\n                host=host,\n                port=port,\n                debug=debug,\n                threaded=True,\n                ssl_context=ssl_context,\n                use_reloader=False if config_name == 'production' else debug\n            )\n        except OSError as e:\n            if \"Address already in use\" in str(e):\n                print(\"⚠️  Port 5000 is already in use. Trying to kill existing processes...\")\n                import os\n                os.system('pkill -f \"python app.py\"')\n                import time\n                time.sleep(2)\n                print(\"🔄 Retrying on port 5000...\")\n                app.run(\n                    host='0.0.0.0',\n                    port=app.config['PORT'],\n                    debug=app.config['DEBUG']\n                )\n            else:\n                raise\n\n    except Exception as e:\n        print(f\"❌ Server startup failed: {e}\")\n        traceback.print_exc()\n        sys.exit(1)","size_bytes":13497},"auth.py":{"content":"\nfrom functools import wraps\nfrom flask import redirect, url_for, flash, session, request\nfrom flask_login import LoginManager, current_user\nfrom models import User\n\nlogin_manager = LoginManager()\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\ndef init_auth(app):\n    \"\"\"Initialize authentication with app\"\"\"\n    login_manager.init_app(app)\n    login_manager.login_view = 'auth.login'\n    login_manager.login_message = 'Please log in to access this page.'\n    login_manager.login_message_category = 'info'\n\ndef login_required(f):\n    \"\"\"Require login and active status\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            return redirect(url_for('auth.login'))\n        if not current_user.is_active:\n            flash('Your account is not active. Contact your administrator.', 'error')\n            return redirect(url_for('auth.login'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef admin_required(f):\n    \"\"\"Require admin role\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated or current_user.role != 'Admin':\n            flash('Access denied. Admin privileges required.', 'error')\n            return redirect(url_for('dashboard.home'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef role_required(allowed_roles):\n    \"\"\"Require specific roles\"\"\"\n    def decorator(f):\n        @wraps(f)\n        def decorated_function(*args, **kwargs):\n            if not current_user.is_authenticated:\n                return redirect(url_for('auth.login'))\n            if not current_user.is_active:\n                flash('Your account is not active. Contact your administrator.', 'error')\n                return redirect(url_for('auth.login'))\n            if current_user.role not in allowed_roles:\n                flash(f'Access denied. Required roles: {\", \".join(allowed_roles)}', 'error')\n                return redirect(url_for('dashboard.home'))\n            return f(*args, **kwargs)\n        return decorated_function\n    return decorator\n\n# Duplicate role_required function removed\n","size_bytes":2189},"config.py":{"content":"import os\nimport logging\nfrom datetime import timedelta\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\nclass Config:\n    \"\"\"Application configuration class\"\"\"\n\n    # Application settings\n    APP_NAME = 'SAT Report Generator'\n    PORT = int(os.environ.get('PORT', 5000))\n    DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'\n    \n    # Domain security settings\n    ALLOWED_DOMAINS = os.environ.get('ALLOWED_DOMAINS', '').split(',') if os.environ.get('ALLOWED_DOMAINS') else []\n    SERVER_IP = os.environ.get('SERVER_IP', '')\n    BLOCK_IP_ACCESS = os.environ.get('BLOCK_IP_ACCESS', 'False').lower() == 'true'\n\n    # Security - Bulletproof CSRF settings with HTTPS\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your-secret-key-here-change-in-production-sat-2025'\n    WTF_CSRF_ENABLED = True\n    WTF_CSRF_TIME_LIMIT = 86400  # 24 hours - very long timeout\n    WTF_CSRF_SSL_STRICT = False  # Allow HTTP for now\n    WTF_CSRF_CHECK_DEFAULT = False  # More lenient CSRF checking\n    \n    # SSL/HTTPS Configuration\n    SSL_CERT_PATH = os.path.join(os.path.dirname(__file__), 'cert.pem')\n    SSL_KEY_PATH = os.path.join(os.path.dirname(__file__), 'key.pem')\n    USE_HTTPS = False\n\n    # Database - Use absolute path for SQLite\n    BASE_DIR = os.path.abspath(os.path.dirname(__file__))\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or f'sqlite:///{os.path.join(BASE_DIR, \"instance\", \"sat_reports.db\")}'\n\n    # Optimized database settings for performance\n    INSTANCE_DIR = os.path.join(BASE_DIR, \"instance\")\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SQLALCHEMY_ENGINE_OPTIONS = {\n        'pool_pre_ping': False,  # Disable for faster startup  \n        'pool_recycle': 3600,   # Longer pool recycle\n        'pool_size': 10,        # Connection pool size\n        'max_overflow': 20,     # Max overflow connections\n        'pool_timeout': 30,     # Connection timeout\n    }\n\n    # File upload settings\n    UPLOAD_ROOT = os.path.join(BASE_DIR, 'static', 'uploads')\n    SIGNATURES_FOLDER = os.path.join(BASE_DIR, 'static', 'signatures')\n\n    # Output directory for generated reports\n    OUTPUT_DIR = os.path.join(BASE_DIR, 'outputs')\n\n    # Ensure directories exist\n    os.makedirs(UPLOAD_ROOT, exist_ok=True)\n    os.makedirs(SIGNATURES_FOLDER, exist_ok=True)\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n\n    # Email configuration - Dynamic loading (no caching)\n    # Static config for server/port/username (these rarely change)\n    SMTP_SERVER = os.environ.get('SMTP_SERVER') or 'smtp.gmail.com'\n    SMTP_PORT = int(os.environ.get('SMTP_PORT') or 587)\n    SMTP_USERNAME = os.environ.get('SMTP_USERNAME') or ''\n    DEFAULT_SENDER = os.environ.get('DEFAULT_SENDER') or ''\n    \n    # Dynamic password loading - always fresh from environment\n    @staticmethod\n    def get_smtp_credentials():\n        \"\"\"\n        Always fetch fresh SMTP credentials from environment variables.\n        This prevents password caching issues when credentials change.\n        \"\"\"\n        import os\n        from dotenv import load_dotenv\n        \n        # Force refresh environment variables\n        smtp_password = os.environ.get('SMTP_PASSWORD', '')\n        \n        # If not found in environment, try .env file (for local development)\n        if not smtp_password:\n            load_dotenv(override=True)\n            smtp_password = os.environ.get('SMTP_PASSWORD', '')\n        \n        print(f\"🔄 Fresh SMTP credentials loaded - Password length: {len(smtp_password)}\")\n        if smtp_password:\n            print(f\"🔐 Password: {smtp_password[:4]}...{smtp_password[-4:]}\")\n        \n        return {\n            'server': Config.SMTP_SERVER,\n            'port': Config.SMTP_PORT,\n            'username': Config.SMTP_USERNAME,\n            'password': smtp_password,\n            'sender': Config.DEFAULT_SENDER\n        }\n\n    # PDF export\n    ENABLE_PDF_EXPORT = os.environ.get('ENABLE_PDF_EXPORT', 'False').lower() == 'true'\n\n    # Default approvers configuration\n    DEFAULT_APPROVERS = [\n        {\n            \"stage\": 1,\n            \"title\": \"Automation Manager\",\n            \"approver_email\": \"tm@cullyautomation.com\"\n        },\n        {\n            \"stage\": 2,\n            \"title\": \"Project Manager\",\n            \"approver_email\": \"pm@cullyautomation.com\"\n        }\n    ]\n\n    # Max content length (16MB default)\n    MAX_CONTENT_LENGTH = int(os.getenv('MAX_CONTENT_LENGTH', '16777216'))\n\n    # Allowed file extensions\n    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif', 'pdf', 'docx'}\n\n    # Template file for SAT reports\n    TEMPLATE_FILE = os.getenv('TEMPLATE_FILE', 'templates/SAT_Template.docx')\n    OUTPUT_FILE = os.getenv('OUTPUT_FILE', 'outputs/SAT_Report_Final.docx')\n\n    # Feature Flags\n    ENABLE_EMAIL_NOTIFICATIONS = os.getenv('ENABLE_EMAIL_NOTIFICATIONS', 'True').lower() == 'true'\n\n    # Security Settings - Fixed for external domain access\n    SESSION_COOKIE_SECURE = False  # Allow HTTP cookies (external domain uses HTTP)\n    SESSION_COOKIE_HTTPONLY = True  # Standard security\n    SESSION_COOKIE_SAMESITE = 'Lax'  # Allow cross-site cookies for external domain access\n    SESSION_COOKIE_DOMAIN = None  # Let Flask handle domain automatically\n    # Remove filesystem sessions - use standard Flask sessions\n    PERMANENT_SESSION_LIFETIME = int(os.getenv('PERMANENT_SESSION_LIFETIME', '86400'))  # 24 hours to match CSRF\n\n    @staticmethod\n    def init_app(app):\n        \"\"\"Initialize app-specific configuration\"\"\"\n        pass\n\nclass DevelopmentConfig(Config):\n    \"\"\"Development configuration\"\"\"\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL', 'sqlite:///sat_reports_dev.db')\n\nclass ProductionConfig(Config):\n    \"\"\"Production configuration for domain-only access\"\"\"\n    DEBUG = False\n    # PORT is inherited from Config class (uses environment variable)\n    SESSION_COOKIE_SECURE = True\n    \n    # Production domain security\n    ALLOWED_DOMAINS = ['automation-reports.mobilehmi.org']\n    SERVER_IP = '172.16.18.21'\n    BLOCK_IP_ACCESS = True\n    \n    # Enhanced security for production\n    WTF_CSRF_ENABLED = True\n    SESSION_COOKIE_HTTPONLY = True\n    SESSION_COOKIE_SAMESITE = 'Strict'\n    PERMANENT_SESSION_LIFETIME = 7200  # 2 hours\n    \n    # Production database (use PostgreSQL)\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or f'sqlite:///{os.path.join(Config.BASE_DIR, \"instance\", \"sat_reports_prod.db\")}'\n    \n    @staticmethod\n    def init_app(app):\n        Config.init_app(app)\n\n        # Enhanced logging for production\n        import logging\n        from logging.handlers import RotatingFileHandler\n        \n        if not os.path.exists('logs'):\n            os.mkdir('logs')\n        \n        file_handler = RotatingFileHandler('logs/sat_reports.log', maxBytes=10240000, backupCount=10)\n        file_handler.setFormatter(logging.Formatter(\n            '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'))\n        file_handler.setLevel(logging.INFO)\n        app.logger.addHandler(file_handler)\n        \n        app.logger.setLevel(logging.INFO)\n        app.logger.info('SAT Report Generator startup - Production Mode')\n\nclass TestingConfig(Config):\n    \"\"\"Testing configuration\"\"\"\n    TESTING = True\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'\n    WTF_CSRF_ENABLED = False\n\n# Configuration dictionary\nconfig = {\n    'development': DevelopmentConfig,\n    'production': ProductionConfig,\n    'testing': TestingConfig,\n    'default': DevelopmentConfig\n}","size_bytes":7496},"init_new_db.py":{"content":"\n#!/usr/bin/env python3\n\"\"\"\nScript to initialize a new database with admin user\nRun this after updating your DATABASE_URL in .env\n\"\"\"\n\nimport os\nimport sys\nfrom dotenv import load_dotenv\n\n# Load environment variables\nload_dotenv()\n\n# Add current directory to Python path\nsys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))\n\nfrom app import create_app\nfrom models import db, init_db, create_admin_user, User\n\ndef initialize_new_database():\n    \"\"\"Initialize new database with tables and admin user\"\"\"\n    print(\"🔧 Initializing new database...\")\n    \n    # Create Flask app\n    app = create_app()\n    \n    with app.app_context():\n        try:\n            # Test database connection\n            print(\"📡 Testing database connection...\")\n            db.engine.connect().close()\n            print(\"✅ Database connection successful\")\n            \n            # Create all tables\n            print(\"📋 Creating database tables...\")\n            db.create_all()\n            print(\"✅ Database tables created\")\n            \n            # Create admin user\n            print(\"👤 Creating admin user...\")\n            admin_user = create_admin_user(\n                email='admin@cullyautomation.com',\n                password='admin123',\n                full_name='System Administrator'\n            )\n            \n            if admin_user:\n                print(\"\\n🎉 Database initialization completed successfully!\")\n                print(\"\\n📝 Admin Login Details:\")\n                print(\"   Email: admin@cullyautomation.com\")\n                print(\"   Password: admin123\")\n                print(\"\\n⚠️  IMPORTANT: Change the admin password after first login!\")\n                print(\"\\n🚀 You can now start the application with: python app.py\")\n            else:\n                print(\"❌ Failed to create admin user\")\n                return False\n                \n        except Exception as e:\n            print(f\"❌ Database initialization failed: {e}\")\n            import traceback\n            traceback.print_exc()\n            return False\n    \n    return True\n\nif __name__ == '__main__':\n    print(\"🔄 New Database Initialization Script\")\n    print(\"=====================================\")\n    \n    # Check if .env file exists\n    if not os.path.exists('.env'):\n        print(\"❌ .env file not found!\")\n        print(\"Please create a .env file with your DATABASE_URL\")\n        sys.exit(1)\n    \n    # Check if DATABASE_URL is set\n    database_url = os.getenv('DATABASE_URL')\n    if not database_url:\n        print(\"❌ DATABASE_URL not found in .env file!\")\n        print(\"Please add DATABASE_URL to your .env file\")\n        sys.exit(1)\n    \n    print(f\"🗄️  Using database: {database_url[:50]}...\")\n    \n    # Confirm before proceeding\n    confirm = input(\"\\n⚠️  This will create tables and admin user in the database. Continue? (y/N): \")\n    if confirm.lower() != 'y':\n        print(\"❌ Operation cancelled\")\n        sys.exit(0)\n    \n    # Initialize database\n    success = initialize_new_database()\n    \n    if success:\n        print(\"\\n✅ Setup complete! Your application is ready to use.\")\n        sys.exit(0)\n    else:\n        print(\"\\n❌ Setup failed. Please check the errors above.\")\n        sys.exit(1)\n","size_bytes":3258},"models.py":{"content":"import os\nimport json\nfrom datetime import datetime, timedelta\nfrom flask import current_app\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom itsdangerous import URLSafeTimedSerializer\nimport secrets\n\ndb = SQLAlchemy()\n\n# Lazy loading flag to prevent heavy operations on import\n_db_initialized = False\n\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    full_name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(255), nullable=False)\n    role = db.Column(db.String(30), nullable=True)  # Admin, Engineer, Automation Manager, PM\n    status = db.Column(db.String(20), default='Pending')  # Pending, Active, Disabled\n    created_date = db.Column(db.DateTime, default=datetime.utcnow)\n    requested_role = db.Column(db.String(20), nullable=True)\n    # username = db.Column(db.String(50), unique=True, nullable=True) # Removed username field\n\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\n    @property\n    def is_active(self):\n        return self.status == 'Active'\n\n    def __repr__(self):\n        return f'<User {self.email}>'\n\nclass SystemSettings(db.Model):\n    __tablename__ = 'system_settings'\n\n    id = db.Column(db.Integer, primary_key=True)\n    key = db.Column(db.String(50), unique=True, nullable=False)\n    value = db.Column(db.Text, nullable=True)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n\n    @staticmethod\n    def get_setting(key, default=None):\n        setting = SystemSettings.query.filter_by(key=key).first()\n        return setting.value if setting else default\n\n    @staticmethod\n    def set_setting(key, value):\n        setting = SystemSettings.query.filter_by(key=key).first()\n        if setting:\n            setting.value = value\n            setting.updated_at = datetime.utcnow()\n        else:\n            setting = SystemSettings(key=key, value=value)\n            db.session.add(setting)\n        db.session.commit()\n        return setting\n\nclass Report(db.Model):\n    __tablename__ = 'reports'\n\n    id = db.Column(db.String(36), primary_key=True)  # UUID\n    type = db.Column(db.String(20), nullable=False)  # 'SAT', 'FDS', 'HDS', etc.\n    status = db.Column(db.String(20), default='DRAFT')  # 'DRAFT', 'PENDING', 'APPROVED', etc.\n    document_title = db.Column(db.String(200), nullable=True)\n    document_reference = db.Column(db.String(100), nullable=True)\n    project_reference = db.Column(db.String(100), nullable=True)\n    client_name = db.Column(db.String(100), nullable=True)\n    revision = db.Column(db.String(20), nullable=True)\n    prepared_by = db.Column(db.String(100), nullable=True)\n    user_email = db.Column(db.String(120), nullable=False)  # Creator\n    version = db.Column(db.String(10), default='R0')  # Version tracking (R0, R1, R2, etc.)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)\n    locked = db.Column(db.Boolean, default=False)\n    approvals_json = db.Column(db.Text, nullable=True)  # JSON string for approval workflow\n    approval_notification_sent = db.Column(db.Boolean, default=False)\n\n    # Relationships\n    sat_report = db.relationship('SATReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    fds_report = db.relationship('FDSReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    hds_report = db.relationship('HDSReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    site_survey_report = db.relationship('SiteSurveyReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    sds_report = db.relationship('SDSReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n    fat_report = db.relationship('FATReport', backref='parent_report', uselist=False, cascade='all, delete-orphan')\n\n    def __repr__(self):\n        return f'<Report {self.id}: {self.type} - {self.document_title}>'\n\nclass SATReport(db.Model):\n    __tablename__ = 'sat_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)  # Full SAT form payload as JSON\n\n    # Summary fields for quick access\n    date = db.Column(db.String(20), nullable=True)\n    purpose = db.Column(db.Text, nullable=True)\n    scope = db.Column(db.Text, nullable=True)\n\n    # Image URL storage\n    scada_image_urls = db.Column(db.Text, nullable=True)  # JSON array\n    trends_image_urls = db.Column(db.Text, nullable=True)  # JSON array\n    alarm_image_urls = db.Column(db.Text, nullable=True)  # JSON array\n\n    def __repr__(self):\n        return f'<SATReport {self.report_id}>'\n\n# Future report type tables (empty for now)\nclass FDSReport(db.Model):\n    __tablename__ = 'fds_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\nclass HDSReport(db.Model):\n    __tablename__ = 'hds_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\nclass SiteSurveyReport(db.Model):\n    __tablename__ = 'site_survey_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\nclass SDSReport(db.Model):\n    __tablename__ = 'sds_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\nclass FATReport(db.Model):\n    __tablename__ = 'fat_reports'\n\n    id = db.Column(db.Integer, primary_key=True)\n    report_id = db.Column(db.String(36), db.ForeignKey('reports.id'), nullable=False, unique=True)\n    data_json = db.Column(db.Text, nullable=False)\n\ndef init_db(app):\n    \"\"\"Initialize database with proper error handling\"\"\"\n    try:\n        # Ensure instance directory exists\n        instance_dir = os.path.join(app.config.get('BASE_DIR', os.getcwd()), 'instance')\n        os.makedirs(instance_dir, exist_ok=True)\n\n        db.init_app(app)\n\n        with app.app_context():\n            # Test database connection\n            try:\n                db.engine.connect().close()\n                app.logger.info(\"Database connection successful\")\n            except Exception as conn_error:\n                app.logger.error(f\"Database connection failed: {conn_error}\")\n                # Try to create the database file and directories\n                try:\n                    db.create_all()\n                    app.logger.info(\"Database file created successfully\")\n                except Exception as create_error:\n                    app.logger.error(f\"Could not create database: {create_error}\")\n                    return False\n\n            # Create all tables\n            try:\n                db.create_all()\n                app.logger.info(\"Database tables created successfully\")\n            except Exception as table_error:\n                app.logger.error(f\"Error creating tables: {table_error}\")\n                return False\n\n            # Create default admin user if it doesn't exist\n            try:\n                admin_user = User.query.filter_by(email='admin@cullyautomation.com').first()\n                if not admin_user:\n                    admin_user = User(\n                        email='admin@cullyautomation.com',\n                        full_name='System Administrator',\n                        role='Admin',\n                        status='Active'\n                    )\n                    admin_user.set_password('admin123')  # Change this in production\n                    db.session.add(admin_user)\n                    db.session.commit()\n                    app.logger.info(\"Default admin user created\")\n            except Exception as user_error:\n                app.logger.warning(f\"Could not create admin user: {user_error}\")\n                try:\n                    db.session.rollback()\n                except:\n                    pass\n\n            # Initialize system settings\n            try:\n                default_settings = [\n                    ('company_name', 'Cully Automation'),\n                    ('company_logo', 'static/img/cully.png'),\n                    ('default_storage_location', 'static/uploads')\n                ]\n\n                for key, value in default_settings:\n                    existing = SystemSettings.query.filter_by(key=key).first()\n                    if not existing:\n                        setting = SystemSettings(key=key, value=value)\n                        db.session.add(setting)\n\n                db.session.commit()\n                app.logger.info(\"Default system settings initialized\")\n            except Exception as settings_error:\n                app.logger.warning(f\"Could not create system settings: {settings_error}\")\n                try:\n                    db.session.rollback()\n                except:\n                    pass\n\n        app.logger.info(\"Database initialized successfully\")\n        return True\n\n    except Exception as e:\n        app.logger.error(f\"Database initialization failed: {e}\")\n        return False\n\n\ndef import_json_to_db():\n    \"\"\"One-time import of existing JSON submissions to database\"\"\"\n    import json\n    import uuid\n\n    submissions_file = 'data/submissions.json'\n    archived_file = 'data/submissions.archived.json'\n\n    # Check if JSON file exists and hasn't been archived yet\n    if not os.path.exists(submissions_file) or os.path.exists(archived_file):\n        return\n\n    try:\n        with open(submissions_file, 'r') as f:\n            submissions = json.load(f)\n\n        print(f\"📂 Importing {len(submissions)} submissions from JSON to database...\")\n\n        for submission_id, data in submissions.items():\n            # Skip if already exists in database\n            if Report.query.get(submission_id):\n                continue\n\n            context = data.get('context', {})\n\n\n            # Create parent report record\n            report = Report(\n                id=submission_id,\n                type='SAT',\n                status='APPROVED' if data.get('locked', False) else 'DRAFT',\n                document_title=context.get('DOCUMENT_TITLE', ''),\n                document_reference=context.get('DOCUMENT_REFERENCE', ''),\n                project_reference=context.get('PROJECT_REFERENCE', ''),\n                client_name=context.get('CLIENT_NAME', ''),\n                revision=context.get('REVISION', ''),\n                prepared_by=context.get('PREPARED_BY', ''),\n                user_email=data.get('user_email', ''),\n                created_at=datetime.fromisoformat(data.get('created_at', datetime.utcnow().isoformat())),\n                updated_at=datetime.fromisoformat(data.get('updated_at', datetime.utcnow().isoformat())),\n                locked=data.get('locked', False),\n                approvals_json=json.dumps(data.get('approvals', [])),\n                approval_notification_sent=data.get('approval_notification_sent', False)\n            )\n\n            # Create SAT-specific record\n            sat_report = SATReport(\n                report_id=submission_id,\n                data_json=json.dumps(data),  # Store entire submission as JSON\n                date=context.get('DATE', ''),\n                purpose=context.get('PURPOSE', ''),\n                scope=context.get('SCOPE', ''),\n                scada_image_urls=json.dumps(data.get('scada_image_urls', [])),\n                trends_image_urls=json.dumps(data.get('trends_image_urls', [])),\n                alarm_image_urls=json.dumps(data.get('alarm_image_urls', []))\n            )\n\n            db.session.add(report)\n            db.session.add(sat_report)\n\n        db.session.commit()\n\n        # Archive the JSON file\n        os.rename(submissions_file, archived_file)\n        print(f\"✅ Successfully imported {len(submissions)} submissions and archived JSON file\")\n\n    except Exception as e:\n        print(f\"❌ Error importing JSON submissions: {e}\")\n        db.session.rollback()\n\ndef test_db_connection():\n    \"\"\"Test database connectivity\"\"\"\n    try:\n        # Try a simple query\n        User.query.limit(1).all()\n        return True\n    except Exception as e:\n        print(f\"Database connection failed: {e}\")\n        return False\n\ndef create_admin_user(email='admin@cullyautomation.com', password='admin123', full_name='System Administrator'):\n    \"\"\"Create admin user manually - useful for new database setup\"\"\"\n    try:\n        # Check if admin already exists\n        existing_admin = User.query.filter_by(email=email).first()\n        if existing_admin:\n            print(f\"Admin user {email} already exists\")\n            return existing_admin\n        \n        # Create new admin user\n        admin_user = User(\n            email=email,\n            full_name=full_name,\n            role='Admin',\n            status='Active'\n        )\n        admin_user.set_password(password)\n        db.session.add(admin_user)\n        db.session.commit()\n        \n        print(f\"✅ Admin user created successfully: {email}\")\n        print(f\"   Password: {password}\")\n        print(\"   ⚠️  Please change the password after first login!\")\n        return admin_user\n        \n    except Exception as e:\n        print(f\"❌ Error creating admin user: {e}\")\n        db.session.rollback()\n        return None\n\nclass ModuleSpec(db.Model):\n    __tablename__ = 'module_specs'\n\n    id = db.Column(db.Integer, primary_key=True)\n    company = db.Column(db.String(100), nullable=False)  # ABB, Siemens, etc.\n    model = db.Column(db.String(100), nullable=False)    # DI810, SM1231, etc.\n    description = db.Column(db.String(500), nullable=True)\n    digital_inputs = db.Column(db.Integer, default=0)\n    digital_outputs = db.Column(db.Integer, default=0)\n    analog_inputs = db.Column(db.Integer, default=0)\n    analog_outputs = db.Column(db.Integer, default=0)\n    voltage_range = db.Column(db.String(100), nullable=True)  # \"24 VDC\", \"0-10V\", etc.\n    current_range = db.Column(db.String(100), nullable=True)  # \"4-20mA\", etc.\n    resolution = db.Column(db.String(50), nullable=True)      # \"12-bit\", \"16-bit\", etc.\n    signal_type = db.Column(db.String(50), nullable=True)     # \"Digital\", \"Analog\", \"Mixed\"\n    rack_slot_convention = db.Column(db.String(100), nullable=True)  # Vendor-specific naming\n    datasheet_url = db.Column(db.String(500), nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    verified = db.Column(db.Boolean, default=False)  # Whether spec has been verified\n\n    # Unique constraint on company + model\n    __table_args__ = (db.UniqueConstraint('company', 'model', name='unique_company_model'),)\n\n    @classmethod\n    def find_or_create(cls, company, model):\n        \"\"\"Find existing module spec or create placeholder for web lookup\"\"\"\n        spec = cls.query.filter_by(company=company.upper(), model=model.upper()).first()\n        if not spec:\n            spec = cls(\n                company=company.upper(),\n                model=model.upper(),\n                verified=False\n            )\n            db.session.add(spec)\n            db.session.commit()\n        return spec\n\n    def get_total_channels(self):\n        \"\"\"Get total number of I/O channels\"\"\"\n        return (self.digital_inputs or 0) + (self.digital_outputs or 0) + \\\n               (self.analog_inputs or 0) + (self.analog_outputs or 0)\n\n    def to_dict(self):\n        return {\n            'company': self.company,\n            'model': self.model,\n            'description': self.description,\n            'digital_inputs': self.digital_inputs,\n            'digital_outputs': self.digital_outputs,\n            'analog_inputs': self.analog_inputs,\n            'analog_outputs': self.analog_outputs,\n            'voltage_range': self.voltage_range,\n            'current_range': self.current_range,\n            'resolution': self.resolution,\n            'signal_type': self.signal_type,\n            'total_channels': self.get_total_channels(),\n            'verified': self.verified\n        }\n\nclass Notification(db.Model):\n    __tablename__ = 'notifications'\n\n    id = db.Column(db.Integer, primary_key=True)\n    user_email = db.Column(db.String(120), nullable=False)  # Recipient\n    title = db.Column(db.String(200), nullable=False)\n    message = db.Column(db.Text, nullable=False)\n    type = db.Column(db.String(50), nullable=False)  # 'approval_request', 'status_update', 'completion', etc.\n    related_submission_id = db.Column(db.String(36), nullable=True)  # Link to report\n    read = db.Column(db.Boolean, default=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    action_url = db.Column(db.String(500), nullable=True)  # Optional action link\n\n    # Changed 'type' to 'notification_type' and 'related_submission_id' to 'submission_id' in to_dict for clarity\n    def to_dict(self):\n        \"\"\"Convert notification to dictionary\"\"\"\n        return {\n            'id': self.id,\n            'title': self.title,\n            'message': self.message,\n            'notification_type': self.type,\n            'read': self.read,\n            'created_at': self.created_at.isoformat() if self.created_at else None,\n            'action_url': self.action_url,\n            'submission_id': self.related_submission_id\n        }\n\n    @staticmethod\n    def create_notification(user_email, title, message, notification_type, submission_id=None, action_url=None):\n        \"\"\"Create a new notification for a user\"\"\"\n        notification = Notification(\n            user_email=user_email,\n            title=title,\n            message=message,\n            type=notification_type,\n            related_submission_id=submission_id,\n            action_url=action_url\n        )\n        db.session.add(notification)\n        db.session.commit()\n        return notification\n\n    @staticmethod\n    def get_recent_notifications(user_email, limit=10):\n        \"\"\"Get recent notifications for a user\"\"\"\n        return Notification.query.filter_by(user_email=user_email)\\\n                                .order_by(Notification.created_at.desc())\\\n                                .limit(limit).all()\n\n    @staticmethod\n    def get_unread_count(user_email):\n        \"\"\"Get count of unread notifications for a user\"\"\"\n        return Notification.query.filter_by(user_email=user_email, read=False).count()\n\n    def __repr__(self):\n        return f'<Notification {self.id}: {self.title}>'","size_bytes":19163},"test_imports.py":{"content":"\n#!/usr/bin/env python3\n\"\"\"\nTest script to check if all imports are working correctly\n\"\"\"\n\ndef test_imports():\n    print(\"🔍 Testing imports...\")\n    \n    try:\n        print(\"  ✓ Flask imports...\")\n        from flask import Flask, request, render_template, jsonify, redirect, url_for\n        from flask_wtf.csrf import CSRFProtect, generate_csrf\n        from flask_login import current_user\n        \n        print(\"  ✓ Config imports...\")\n        from config import Config\n        \n        print(\"  ✓ Models imports...\")\n        from models import db, init_db\n        \n        print(\"  ✓ Auth imports...\")\n        from auth import init_auth\n        \n        print(\"  ✓ Route imports...\")\n        from routes.main import main_bp\n        from routes.approval import approval_bp\n        from routes.status import status_bp\n        from routes.auth import auth_bp\n        from routes.dashboard import dashboard_bp\n        from routes.reports import reports_bp\n        from routes.notifications import notifications_bp\n        from routes.io_builder import io_builder_bp\n        \n        print(\"✅ All imports successful!\")\n        return True\n        \n    except ImportError as e:\n        print(f\"❌ Import failed: {e}\")\n        return False\n    except Exception as e:\n        print(f\"❌ Unexpected error: {e}\")\n        return False\n\nif __name__ == '__main__':\n    success = test_imports()\n    if not success:\n        print(\"\\n🔧 Please check your dependencies and file structure.\")\n        exit(1)\n    else:\n        print(\"\\n🚀 Ready to start the server!\")\n","size_bytes":1573},"test_smtp.py":{"content":"\n#!/usr/bin/env python3\nimport os\nimport smtplib\nimport base64\nfrom email.mime.text import MIMEText\nfrom dotenv import load_dotenv\n\n# Force reload environment variables\nload_dotenv(override=True)\n\ndef test_smtp_connection():\n    \"\"\"Test SMTP connection with current credentials\"\"\"\n    \n    smtp_server = os.environ.get('SMTP_SERVER', 'smtp.gmail.com')\n    smtp_port = int(os.environ.get('SMTP_PORT', '587'))\n    smtp_username = os.environ.get('SMTP_USERNAME', '')\n    smtp_password = os.environ.get('SMTP_PASSWORD', '')\n    \n    print(f\"📧 Testing SMTP connection...\")\n    print(f\"Server: {smtp_server}:{smtp_port}\")\n    print(f\"Username: {smtp_username}\")\n    print(f\"Password: {'*' * len(smtp_password) if smtp_password else 'NOT_SET'}\")\n    print(f\"Password length: {len(smtp_password)}\")\n    \n    if not smtp_password or smtp_password == 'PUT_YOUR_ACTUAL_16_CHAR_GMAIL_APP_PASSWORD_HERE':\n        print(\"❌ SMTP_PASSWORD not properly set in .env file\")\n        return False\n    \n    try:\n        print(\"\\n🔗 Attempting connection...\")\n        server = smtplib.SMTP(smtp_server, smtp_port)\n        server.starttls()\n        \n        print(\"🔐 Attempting login...\")\n        server.login(smtp_username, smtp_password)\n        \n        print(\"✅ SMTP connection successful!\")\n        server.quit()\n        return True\n        \n    except Exception as e:\n        print(f\"❌ SMTP connection failed: {e}\")\n        return False\n\nif __name__ == '__main__':\n    print(\"🧪 SMTP Connection Test\")\n    print(\"=\" * 30)\n    success = test_smtp_connection()\n    print(\"\\n\" + \"=\" * 30)\n    print(\"✅ Test completed successfully!\" if success else \"❌ Test failed!\")\n","size_bytes":1665},"utils.py":{"content":"import os\nimport json\nimport logging\nimport smtplib\nfrom email.message import EmailMessage\nfrom PIL import Image\nfrom docx import Document\nfrom docx.oxml import parse_xml\nfrom flask import current_app, url_for\nimport time\nimport re\nfrom werkzeug.utils import secure_filename\nimport uuid\nimport platform\nimport tempfile\nimport shutil\nfrom contextlib import contextmanager\nfrom datetime import datetime\n\n# Added get_unread_count from app.py to resolve circular import\ndef get_unread_count(user_email=None):\n    \"\"\"Get unread notifications count for a user\"\"\"\n    try:\n        from models import Notification\n        from flask_login import current_user\n\n        if not user_email and current_user.is_authenticated:\n            user_email = current_user.email\n\n        if not user_email:\n            return 0\n\n        return Notification.query.filter_by(\n            user_email=user_email,\n            read=False\n        ).count()\n    except Exception as e:\n        if current_app:\n            current_app.logger.warning(f\"Could not get unread count: {e}\")\n        return 0\n\n# Windows-specific imports (only available on Windows)\ntry:\n    import pythoncom\n    import win32com.client\n    WINDOWS_COM_AVAILABLE = True\nexcept ImportError:\n    WINDOWS_COM_AVAILABLE = False\n\nlogger = logging.getLogger(__name__)\n\n# Cross-platform file locking\n@contextmanager\ndef file_lock(filename, mode='r', timeout=30, delay=0.05):\n    \"\"\"\n    A cross-platform file locking context manager that works on both Windows and Unix\n\n    Args:\n        filename: The file to lock\n        mode: File open mode ('r' for read, 'w' for write)\n        timeout: Maximum time to wait for lock (seconds)\n        delay: Time between retry attempts (seconds)\n\n    Yields:\n        The opened file object\n    \"\"\"\n    if platform.system() == 'Windows':\n        import msvcrt\n\n        is_exclusive = 'w' in mode\n        file_mode = 'r+' if is_exclusive else 'r'\n\n        # Make sure the file exists\n        if not os.path.exists(filename) and is_exclusive:\n            with open(filename, 'w') as f:\n                f.write('{}')\n\n        # Open and try to lock the file\n        f = open(filename, file_mode)\n\n\n        start_time = time.time()\n\n        while True:\n            try:\n                # Lock from current position to end of file\n                lock_mode = msvcrt.LK_NBLCK\n                if is_exclusive:\n                    lock_mode |= msvcrt.LK_LOCK\n                else:\n                    lock_mode |= msvcrt.LK_RLCK\n\n                msvcrt.locking(f.fileno(), lock_mode, 0x7fffffff)\n                break  # Lock acquired\n            except IOError:\n                # Could not acquire lock, wait and retry\n                if time.time() - start_time > timeout:\n                    f.close()\n                    raise TimeoutError(f\"Could not acquire lock on {filename} within {timeout} seconds\")\n\n                time.sleep(delay)\n\n        try:\n            yield f\n        finally:\n            # Unlock and close the file\n            try:\n                f.seek(0)\n                msvcrt.locking(f.fileno(), msvcrt.LK_UNLCK, 0x7fffffff)\n            except IOError:\n                # Not locked\n                pass\n            f.close()\n\n    else:\n        # Unix-like systems\n        import fcntl\n\n        is_exclusive = 'w' in mode\n        file_mode = 'r+' if is_exclusive else 'r'\n\n        # Make sure the file exists\n        if not os.path.exists(filename) and is_exclusive:\n            with open(filename, 'w') as f:\n                f.write('{}')\n\n        # Open and try to lock the file\n        f = open(filename, file_mode)\n\n\n        start_time = time.time()\n\n        while True:\n            try:\n                if is_exclusive:\n                    fcntl.flock(f, fcntl.LOCK_EX | fcntl.LOCK_NB)\n                else:\n                    fcntl.flock(f, fcntl.LOCK_SH | fcntl.LOCK_NB)\n                break  # Lock acquired\n            except IOError:\n                # Could not acquire lock, wait and retry\n                if time.time() - start_time > timeout:\n                    f.close()\n                    raise TimeoutError(f\"Could not acquire lock on {filename} within {timeout} seconds\")\n\n                time.sleep(delay)\n\n        try:\n            yield f\n        finally:\n            # Unlock and close the file\n            fcntl.flock(f, fcntl.LOCK_UN)\n            f.close()\n\n\ndef create_approval_notification(approver_email, submission_id, stage, document_title):\n    \"\"\"Create notification for approval request\"\"\"\n    from models import Notification\n    from flask import url_for\n\n    title = f\"Approval Required - Stage {stage}\"\n    message = f\"SAT Report '{document_title}' requires your approval.\"\n    action_url = url_for('approval.approve_submission', submission_id=submission_id, stage=stage, _external=True)\n\n    return Notification.create_notification(\n        user_email=approver_email,\n        title=title,\n        message=message,\n        notification_type='approval_request',\n        submission_id=submission_id,\n        action_url=action_url\n    )\n\ndef create_status_update_notification(user_email, submission_id, status, document_title, approver_name=\"\"):\n    \"\"\"Create notification for status update\"\"\"\n    from models import Notification\n    from flask import url_for\n\n    if status == \"approved\":\n        title = \"Report Approved\"\n        message = f\"Your SAT Report '{document_title}' has been approved\"\n        if approver_name:\n            message += f\" by {approver_name}\"\n    elif status == \"rejected\":\n        title = \"Report Rejected\"\n        message = f\"Your SAT Report '{document_title}' has been rejected\"\n        if approver_name:\n            message += f\" by {approver_name}\"\n    else:\n        title = \"Status Update\"\n        message = f\"Your SAT Report '{document_title}' status has been updated to {status}\"\n\n    action_url = url_for('status.view_status', submission_id=submission_id, _external=True)\n\n    return Notification.create_notification(\n        user_email=user_email,\n        title=title,\n        message=message,\n        notification_type='status_update',\n        submission_id=submission_id,\n        action_url=action_url\n    )\n\ndef create_completion_notification(user_email, submission_id, document_title):\n    \"\"\"Create notification for report completion\"\"\"\n    from models import Notification\n    from flask import url_for\n\n    title = \"Report Completed\"\n    message = f\"Your SAT Report '{document_title}' has been fully approved and is ready for download.\"\n    action_url = url_for('status.download_report', submission_id=submission_id, _external=True)\n\n    return Notification.create_notification(\n        user_email=user_email,\n        title=title,\n        message=message,\n        notification_type='completion',\n        submission_id=submission_id,\n        action_url=action_url\n    )\n\ndef create_new_submission_notification(admin_emails, submission_id, document_title, submitter_email):\n    \"\"\"Create notification for new submission (for admins)\"\"\"\n    from models import Notification\n    from flask import url_for\n\n    title = \"New Report Submitted\"\n    message = f\"New SAT Report '{document_title}' submitted by {submitter_email}\"\n    action_url = url_for('status.view_status', submission_id=submission_id, _external=True)\n\n    notifications = []\n    for admin_email in admin_emails:\n        notification = Notification.create_notification(\n            user_email=admin_email,\n            title=title,\n            message=message,\n            notification_type='new_submission',\n            submission_id=submission_id,\n            action_url=action_url\n        )\n        notifications.append(notification)\n\n    return notifications\n\n# Updated function to use the new file lock\ndef load_submissions():\n    \"\"\"Load submissions data with improved file locking to prevent race conditions\"\"\"\n    from flask import current_app\n\n    submissions_file = current_app.config['SUBMISSIONS_FILE']\n\n    # If file doesn't exist, return empty dict\n    if not os.path.exists(submissions_file):\n        return {}\n\n    try:\n        with file_lock(submissions_file, mode='r') as f:\n            try:\n                data = json.load(f)\n                return data\n            except json.JSONDecodeError as e:\n                logger.error(f\"Error decoding JSON in {submissions_file}: {e}\")\n                # Return empty dict on decode error rather than potentially corrupting data\n                return {}\n    except TimeoutError as e:\n        logger.error(f\"Timeout acquiring read lock on submissions file: {e}\")\n        return {}\n    except Exception as e:\n        logger.error(f\"Unexpected error loading submissions: {e}\", exc_info=True)\n        return {}\ndef save_submissions(submissions):\n    \"\"\"Save submissions data with improved file locking\"\"\"\n    from flask import current_app\n\n    submissions_file = current_app.config['SUBMISSIONS_FILE']\n\n    try:\n        # Create parent directory if needed\n        os.makedirs(os.path.dirname(submissions_file), exist_ok=True)\n\n        # Use a temporary file for atomic write\n        temp_dir = os.path.dirname(submissions_file)\n        fd, temp_path = tempfile.mkstemp(dir=temp_dir, prefix=os.path.basename(submissions_file) + '.')\n\n        # Write to temp file first\n        with os.fdopen(fd, 'w') as f:\n            json.dump(submissions, f, indent=2)\n\n        # Now use file lock to replace the original file atomically\n        with file_lock(submissions_file, mode='w') as f:\n            # Read the existing content to back up if needed\n            try:\n                f.seek(0)\n                old_data = f.read()\n            except:\n                old_data = \"{}\"\n\n            try:\n                # Replace file content with our temp file content\n                with open(temp_path, 'r') as temp_f:\n                    new_data = temp_f.read()\n\n                # Truncate and write\n                f.seek(0)\n                f.truncate()\n                f.write(new_data)\n                f.flush()\n                os.fsync(f.fileno())\n\n            except Exception as e:\n                # On error, try to restore old content\n                logger.error(f\"Error during file write, attempting to restore: {e}\")\n                f.seek(0)\n                f.truncate()\n                f.write(old_data)\n                f.flush()\n                raise\n\n        # Remove the temp file\n        try:\n            os.unlink(temp_path)\n        except:\n            pass\n\n        return True\n\n    except TimeoutError as e:\n        logger.error(f\"Timeout acquiring write lock on submissions file: {e}\")\n        return False\n    except Exception as e:\n        logger.error(f\"Error saving submissions: {e}\", exc_info=True)\n        return False\n\n# --------------------\n# Email functions\ndef send_email(to_email, subject, html_content, text_content=None):\n    \"\"\"Send an HTML email with plain text fallback\"\"\"\n    if not to_email:\n        logger.warning(\"No recipient email provided\")\n        return False\n\n    # Log attempt\n    logger.info(f\"Attempting to send email to {to_email}\")\n\n    # Get fresh email configuration (prevents password caching)\n    from config import Config\n    credentials = Config.get_smtp_credentials()\n    \n    smtp_server = credentials['server']\n    smtp_port = credentials['port'] \n    smtp_username = credentials['username']\n    smtp_password = credentials['password']\n\n    if not smtp_username or not smtp_password:\n        logger.error(\"SMTP credentials are not configured\")\n        return False\n    \n    # Enhanced Gmail debugging\n    if 'gmail.com' in smtp_server.lower():\n        logger.info(f\"Gmail detected. Username: {smtp_username}\")\n        logger.info(f\"Password length: {len(smtp_password)} characters\")\n        logger.info(f\"Password starts with: {smtp_password[:4]}... (masked)\")\n        logger.info(f\"Password format check: {'✓' if len(smtp_password) == 16 else '✗'}\")\n        if len(smtp_password) != 16:\n            logger.warning(\"Gmail App Password should be exactly 16 characters\")\n            logger.warning(\"Visit https://support.google.com/accounts/answer/185833 to generate an App Password\")\n\n    # Create message\n    msg = EmailMessage()\n    msg[\"Subject\"] = subject\n    msg[\"From\"] = credentials['sender'] or smtp_username\n    msg[\"To\"] = to_email\n    msg.set_content(text_content or html_content.replace(\"<br>\", \"\\n\").replace(\"<p>\", \"\").replace(\"</p>\", \"\\n\\n\"))\n    msg.add_alternative(html_content, subtype=\"html\")\n\n    retries = 3\n    for i in range(retries):\n        try:\n            logger.info(f\"Email send attempt {i+1}/{retries}\")\n            with smtplib.SMTP(smtp_server, smtp_port, timeout=30) as server:\n                server.set_debuglevel(1)  # Enable detailed debugging\n                server.ehlo()\n                server.starttls()\n                server.ehlo()\n                server.login(smtp_username, smtp_password)\n                server.send_message(msg)\n            logger.info(f\"Email sent successfully to {to_email}\")\n            return True\n        except Exception as e:\n            logger.error(f\"Email attempt {i+1}/{retries} failed: {str(e)}\", exc_info=True)\n            if i == retries - 1:\n                return False\n            time.sleep(2)\n    return False\n\n\n\ndef create_completion_notification(user_email, submission_id, document_title):\n    \"\"\"Create notification for completion\"\"\"\n    try:\n        from models import Notification\n\n        title = \"Report Completed\"\n        message = f\"Your SAT Report '{document_title}' has been fully approved and completed.\"\n\n        return Notification.create_notification(\n            user_email=user_email,\n            title=title,\n            message=message,\n            notification_type='completion',\n            submission_id=submission_id\n        )\n    except Exception as e:\n        current_app.logger.error(f\"Failed to create completion notification: {e}\")\n        return False\n\ndef create_new_submission_notification(admin_emails, submission_id, document_title, submitter_email):\n    \"\"\"Create new submission notification for admins\"\"\"\n    try:\n        from models import Notification\n\n        for admin_email in admin_emails:\n            title = \"New Report Submitted\"\n            message = f\"New SAT Report '{document_title}' submitted by {submitter_email}.\"\n\n            Notification.create_notification(\n                user_email=admin_email,\n                title=title,\n                message=message,\n                notification_type='new_submission',\n                submission_id=submission_id\n            )\n        return True\n    except Exception as e:\n        current_app.logger.error(f\"Failed to create submission notification: {e}\")\n        return False\n\ndef send_edit_link(user_email, submission_id):\n    \"\"\"Send an email with the edit link for a submission\"\"\"\n    if not user_email:\n        return False\n\n    edit_url = url_for(\"main.edit_submission\", submission_id=submission_id, _external=True)\n    status_url = url_for(\"status.view_status\", submission_id=submission_id, _external=True)\n\n    subject = \"Your SAT Report Edit Link\"\n    html_content = f\"\"\"\n    <html>\n    <body>\n        <h1>SAT Report System</h1>\n        <p>Thank you for submitting your SAT report. You can edit your submission by clicking the link below:</p>\n        <p><a href=\"{edit_url}\">{edit_url}</a></p>\n        <p>You can also check the status of your submission at any time:</p>\n        <p><a href=\"{status_url}\">{status_url}</a></p>\n        <p>This edit link will remain active until the first approval stage is complete.</p>\n    </body>\n    </html>\n    \"\"\"\n\n    return send_email(user_email, subject, html_content)\n\ndef send_approval_link(approver_email, submission_id, stage):\n    \"\"\"Send an email with the approval link for a submission\"\"\"\n    if not approver_email:\n        logger.warning(\"No approver email provided\")\n        return False\n\n    approval_url = url_for(\"approval.approve_submission\", submission_id=submission_id, stage=stage, _external=True)\n    status_url = url_for(\"status.view_status\", submission_id=submission_id, _external=True)\n\n    # Find the approver title\n    approver_title = \"Approver\"\n    for approver in current_app.config['DEFAULT_APPROVERS']:\n        if approver['stage'] == stage:\n            approver_title = approver.get('title', 'Approver')\n            break\n\n    subject = f\"Approval required for SAT Report (Stage {stage} - {approver_title})\"\n    html_content = f\"\"\"\n    <html>\n    <body>\n        <h1>SAT Report Approval Request</h1>\n        <p>A SAT report requires your approval as the {approver_title}.</p>\n        <p>Please review and approve the report by clicking the link below:</p>\n        <p><a href=\"{approval_url}\">{approval_url}</a></p>\n        <p>This is approval stage {stage} of the workflow.</p>\n        <p>You can also view the current status of this submission:</p>\n        <p><a href=\"{status_url}\">{status_url}</a></p>\n    </body>\n    </html>\n    \"\"\"\n\n    return send_email(approver_email, subject, html_content)\n\ndef notify_completion(user_email, submission_id):\n    \"\"\"Notify the submitter that all approvals are complete\"\"\"\n    if not user_email:\n        return False\n\n    download_url = url_for(\"status.download_report\", submission_id=submission_id, _external=True)\n    status_url = url_for(\"status.view_status\", submission_id=submission_id, _external=True)\n\n    subject = \"Your SAT Report has been fully approved\"\n    html_content = f\"\"\"\n    <html>\n    <body>\n        <h1>SAT Report Fully Approved</h1>\n        <p>Great news! Your SAT report has been fully approved by all required parties.</p>\n        <p>You can download the final approved report here:</p>\n        <p><a href=\"{download_url}\">{download_url}</a></p>\n        <p>View the approval details:</p>\n        <p><a href=\"{status_url}\">{status_url}</a></p>\n        <p>Thank you for using the SAT Report System.</p>\n    </body>\n    </html>\n    \"\"\"\n\n    return send_email(user_email, subject, html_content)\n\n# --------------------\n# DOCX processing functions\ndef enable_autofit_tables(docx_path, target_keywords):\n    \"\"\"Make tables auto-fit their content based on keyword matching in the first row\"\"\"\n    try:\n        doc = Document(docx_path)\n        modified = False\n\n        for table in doc.tables:\n            if not table.rows:\n                continue\n\n            first_row_text = \" \".join(cell.text.lower() for cell in table.rows[0].cells)\n            if any(keyword in first_row_text for keyword in target_keywords):\n                for row in table.rows:\n                    for cell in row.cells:\n                        tc = cell._tc\n                        tcPr = tc.get_or_add_tcPr()\n                        auto_width = parse_xml(\n                            r'<w:tcW w:w=\"0\" w:w=\"0\" w:type=\"auto\" xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"/>'\n                        )\n                        tcPr.append(auto_width)\n                        tr = row._tr\n                        trPr = tr.get_or_add_trPr()\n                        trHeight = parse_xml(\n                            r'<w:trHeight w:val=\"0\" w:hRule=\"auto\" xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"/>'\n                        )\n                        trPr.append(trHeight)\n                modified = True\n\n        if modified:\n            doc.save(docx_path)\n            logger.info(f\"Table auto-fit applied to {docx_path}\")\n\n    except Exception as e:\n        logger.error(f\"Error applying table auto-fit: {e}\", exc_info=True)\n        raise\n\ndef update_toc(doc_path):\n    \"\"\"Update the table of contents in a Word document using COM automation\"\"\"\n    if not WINDOWS_COM_AVAILABLE:\n        logger.warning(\"Windows COM automation not available - skipping TOC update\")\n        return\n\n    pythoncom.CoInitialize()  # Initialize COM for the thread\n    try:\n        word = win32com.client.Dispatch(\"Word.Application\")\n        word.Visible = False\n        abs_doc_path = os.path.abspath(doc_path)\n        doc_word = word.Documents.Open(abs_doc_path)\n        doc_word.Fields.Update()\n        doc_word.Save()\n        doc_word.Close()\n        word.Quit()\n        logger.info(f\"TOC updated in {doc_path}\")\n    except Exception as e:\n        logger.error(f\"Error updating TOC: {e}\", exc_info=True)\n        raise\n    finally:\n        pythoncom.CoUninitialize()\n\ndef convert_to_pdf(docx_path):\n    \"\"\"Convert a DOCX file to PDF using Word automation\"\"\"\n    if not current_app.config.get('ENABLE_PDF_EXPORT', False):\n        logger.warning(\"PDF export is disabled in configuration\")\n        return None\n\n    if not WINDOWS_COM_AVAILABLE:\n        logger.warning(\"Windows COM automation not available - PDF conversion not supported on this platform\")\n        return None\n\n    pythoncom.CoInitialize()  # Initialize COM for the thread\n    try:\n        word = win32com.client.Dispatch(\"Word.Application\")\n        word.Visible = False\n        abs_doc_path = os.path.abspath(docx_path)\n        pdf_path = abs_doc_path.replace('.docx', '.pdf')\n\n        doc = word.Documents.Open(abs_doc_path)\n        doc.SaveAs(pdf_path, FileFormat=17)  # 17 = PDF format\n        doc.Close()\n        word.Quit()\n\n        logger.info(f\"PDF created: {pdf_path}\")\n        return pdf_path\n    except Exception as e:\n        logger.error(f\"Error converting to PDF: {e}\", exc_info=True)\n        return None\n    finally:\n        pythoncom.CoUninitialize()\n\n# --------------------\n# Form processing helpers\ndef process_table_rows(form_data, field_mappings):\n    \"\"\"Process multiple rows of table data from form fields.\n\n    Args:\n        form_data: The form data from request.form\n        field_mappings: A dictionary mapping form field names to output field names\n\n    Returns:\n        A list of dictionaries, each representing a row of data\n    \"\"\"\n    # Get the first field name to determine number of rows\n    first_field = list(field_mappings.keys())[0]\n    values = form_data.getlist(first_field)\n    num_rows = len(values)\n\n    rows = []\n    for i in range(num_rows):\n        row = {}\n        for form_field, output_field in field_mappings.items():\n            values = form_data.getlist(form_field)\n            row[output_field] = values[i].strip() if i < len(values) else \"\"\n\n        # Only include rows where at least one field has a value\n        if any(value for value in row.values()):\n            rows.append(row)\n\n    # If no rows, add a blank row as placeholder\n    if not rows:\n        row = {output_field: \"\" for output_field in field_mappings.values()}\n        rows.append(row)\n\n    return rows\n\ndef handle_image_removals(form_data, removal_field_name, url_list):\n    \"\"\"Handle removal of images marked for deletion\"\"\"\n    try:\n        # Get list of images to remove from form data\n        removed_images = form_data.getlist(removal_field_name)\n\n        for image_url in removed_images:\n            if image_url and image_url in url_list:\n                # Remove from URL list\n                url_list.remove(image_url)\n\n                # Extract filename from URL and remove physical file\n                try:\n                    # Parse URL to get relative path\n                    if '/static/' in image_url:\n                        relative_path = image_url.split('/static/')[-1]\n                        file_path = os.path.join(current_app.static_folder, relative_path)\n                        if os.path.exists(file_path):\n                            os.remove(file_path)\n                            current_app.logger.info(f\"Removed image file: {file_path}\")\n                except Exception as file_error:\n                    current_app.logger.warning(f\"Could not remove physical file for {image_url}: {file_error}\")\n\n    except Exception as e:\n        current_app.logger.error(f\"Error handling image removals: {e}\")\n\ndef setup_approval_workflow(submission_id, submissions, approver_emails=None):\n    \"\"\"Setup or retrieve the approval workflow for a submission\"\"\"\n    sub = submissions.get(submission_id, {})\n\n    # If this is a new submission or missing approval stages\n    if \"approvals\" not in sub:\n        # Initialize with provided approver emails or default ones\n        approvals = []\n        default_approvers = current_app.config['DEFAULT_APPROVERS']\n\n        for i, approver in enumerate(default_approvers):\n            email = approver_emails[i] if approver_emails and i < len(approver_emails) and approver_emails[i] else approver[\"approver_email\"]\n            approvals.append({\n                \"stage\": approver[\"stage\"],\n                \"approver_email\": email,\n                \"title\": approver.get(\"title\", \"Approver\"),\n                \"status\": \"pending\",\n                \"timestamp\": None,\n                \"signature\": None,\n                \"comment\": \"\"\n            })\n\n        # New submissions are editable until an approval occurs\n        locked = False\n    else:\n        # Get existing approvals\n        approvals = sub.get(\"approvals\", [])\n\n        # If approver emails are provided, update the existing approvals\n        if approver_emails:\n            for i, approval in enumerate(approvals):\n                if i < len(approver_emails) and approver_emails[i]:\n                    # Only update if not already approved\n                    if approval[\"status\"] == \"pending\":\n                        approval[\"approver_email\"] = approver_emails[i]\n\n        # If for some reason approvals is still empty, initialize it\n        if not approvals:\n            # Use first approver email if provided, otherwise default\n            email = approver_emails[0] if approver_emails and len(approver_emails) > 0 and approver_emails[0] else current_app.config['DEFAULT_APPROVERS'][0][\"approver_email\"]\n            approvals = [{\n                \"stage\": 1,\n                \"approver_email\": email,\n                \"title\": current_app.config['DEFAULT_APPROVERS'][0].get(\"title\", \"Approver\"),\n                \"status\": \"pending\",\n                \"timestamp\": None,\n                \"signature\": None,\n                \"comment\": \"\"\n            }]\n\n        # If any approval stage has been approved beyond stage 1, lock editing\n        locked = any(a.get(\"status\") == \"approved\" and a.get(\"stage\") > 1 for a in approvals)\n\n    return approvals, locked\n\ndef setup_approval_workflow_db(report, approver_emails=None):\n    \"\"\"Setup or retrieve the approval workflow for a database report\"\"\"\n    import json\n\n    # Get existing approvals from database\n    existing_approvals = json.loads(report.approvals_json) if report.approvals_json else []\n\n    # If this is a new submission or missing approval stages\n    if not existing_approvals:\n        # Initialize with provided approver emails or default ones\n        approvals = []\n        default_approvers = current_app.config['DEFAULT_APPROVERS']\n\n        for i, approver in enumerate(default_approvers):\n            email = approver_emails[i] if approver_emails and i < len(approver_emails) and approver_emails[i] else approver[\"approver_email\"]\n            approvals.append({\n                \"stage\": approver[\"stage\"],\n                \"approver_email\": email,\n                \"title\": approver.get(\"title\", \"Approver\"),\n                \"status\": \"pending\",\n                \"timestamp\": None,\n                \"signature\": None,\n                \"comment\": \"\"\n            })\n\n        # New submissions are editable until an approval occurs\n        locked = False\n    else:\n        # Get existing approvals\n        approvals = existing_approvals.copy()\n\n        # If this is a resubmission (version increment), reset approval status\n        version_changed = report.version and report.version != 'R0'\n        if version_changed:\n            for approval in approvals:\n                if approval.get(\"status\") != \"approved\":\n                    approval[\"status\"] = \"pending\"\n                    approval[\"timestamp\"] = None\n                    approval[\"signature\"] = None\n                    approval[\"comment\"] = \"\"\n\n        # If approver emails are provided, update the existing approvals\n        if approver_emails:\n            for i, approval in enumerate(approvals):\n                if i < len(approver_emails) and approver_emails[i]:\n                    # Only update if not already approved\n                    if approval[\"status\"] == \"pending\":\n                        approval[\"approver_email\"] = approver_emails[i]\n\n        # If for some reason approvals is still empty, initialize it\n        if not approvals:\n            # Use first approver email if provided, otherwise default\n            email = approver_emails[0] if approver_emails and len(approver_emails) > 0 and approver_emails[0] else current_app.config['DEFAULT_APPROVERS'][0][\"approver_email\"]\n            approvals = [{\n                \"stage\": 1,\n                \"approver_email\": email,\n                \"title\": current_app.config['DEFAULT_APPROVERS'][0].get(\"title\", \"Approver\"),\n                \"status\": \"pending\",\n                \"timestamp\": None,\n                \"signature\": None,\n                \"comment\": \"\"\n            }]\n\n        # If any approval stage has been approved beyond stage 1, lock editing\n        locked = any(a.get(\"status\") == \"approved\" and a.get(\"stage\") > 1 for a in approvals)\n\n    return approvals, locked\n\n\n# Removed duplicate allowed_file and replaced with the one from the edited snippet.\n# Removed duplicate secure_filename usage as it's now part of the edited snippet.\n\ndef save_uploaded_file(file, directory, filename=None):\n    \"\"\"Save an uploaded file with a unique name\"\"\"\n    if not file or not file.filename:\n        return None\n\n    # Use the provided allowed_file function\n    if not allowed_file(file.filename):\n        logger.warning(f\"File type not allowed: {file.filename}\")\n        return None\n\n    if filename is None:\n        # Generate a unique filename\n        original_filename = secure_filename(file.filename)\n        filename = f\"{uuid.uuid4().hex}_{original_filename}\"\n\n    filepath = os.path.join(directory, filename)\n    file.save(filepath)\n    return filepath, filename\n\n# Add this function to your utils.py file\n\ndef send_client_final_document(client_email, submission_id, document_title):\n    \"\"\"Send an email to the client with the final approved document\"\"\"\n    if not client_email:\n        logger.warning(\"No client email provided\")\n        return False\n\n    download_url = url_for(\"status.download_report\", submission_id=submission_id, _external=True)\n    pdf_url = url_for(\"status.download_pdf\", submission_id=submission_id, _external=True)\n    status_url = url_for(\"status.view_status\", submission_id=submission_id, _external=True)\n\n    subject = f\"SAT Report Approved: {document_title}\"\n    html_content = f\"\"\"\n    <html>\n    <body>\n        <h1>SAT Report Approval Complete</h1>\n        <p>The SAT report \"{document_title}\" has been fully approved and is now ready for your review.</p>\n        <p>You can download the approved report using the links below:</p>\n        <ul>\n            <li><a href=\"{download_url}\">Download DOCX Version</a></li>\n            <li><a href=\"{pdf_url}\">Download PDF Version</a></li>\n        </ul>\n        <p>You can also view the full approval details here:</p>\n        <p><a href=\"{status_url}\">View Approval Status</a></p>\n        <p>Thank you for using the SAT Report System.</p>\n    </body>\n    </html>\n    \"\"\"\n\n    return send_email(client_email, subject, html_content)\n\ndef format_timestamp(timestamp, format_str=\"%d-%m-%Y %H:%M\"):\n    \"\"\"\n    Consistently format timestamps throughout the application\n\n    Args:\n        timestamp: ISO format timestamp string\n        format_str: Format string for output (default: DD-MM-YYYY HH:MM)\n\n    Returns:\n        Formatted date string or empty string if invalid\n    \"\"\"\n    if not timestamp:\n        return \"\"\n\n    try:\n        # Try ISO format first\n        try:\n\n            date_obj = datetime.fromisoformat(timestamp)\n            return date_obj.strftime(format_str)\n        except ValueError:\n            pass\n\n        # Try parsing as string with various formats\n        formats_to_try = [\n            \"%Y-%m-%dT%H:%M:%S.%f\",  # ISO format with microseconds\n            \"%Y-%m-%dT%H:%M:%S\",     # ISO format without microseconds\n            \"%Y-%m-%d %H:%M:%S\",     # Standard datetime format\n            \"%Y-%m-%d\",              # Just date\n        ]\n\n\n        for fmt in formats_to_try:\n            try:\n                date_obj = datetime.strptime(timestamp, fmt)\n                return date_obj.strftime(format_str)\n            except ValueError:\n                continue\n\n        # If we get here, no format worked\n        return timestamp  # Return original as fallback\n\n    except Exception as e:\n        logger.error(f\"Error formatting timestamp {timestamp}: {e}\")\n        return timestamp  # Return original as fallback\n\n\ndef get_current_timestamp():\n    \"\"\"\n    Get current time as ISO format timestamp string\n\n    Returns:\n        Current timestamp in ISO format\n    \"\"\"\n\n    return datetime.now().isoformat()\n\n\ndef date_diff_days(timestamp1, timestamp2=None):\n    \"\"\"\n    Calculate difference in days between two timestamps\n\n    Args:\n        timestamp1: First timestamp (ISO format)\n        timestamp2: Second timestamp (ISO format, defaults to now if None)\n\n    Returns:\n        Number of days between timestamps, or None if invalid\n    \"\"\"\n    if not timestamp1:\n        return None\n\n    try:\n\n        # Parse first timestamp\n        date1 = datetime.fromisoformat(timestamp1)\n\n        # Parse second timestamp or use now\n        if timestamp2:\n            date2 = datetime.fromisoformat(timestamp2)\n        else:\n            date2 = datetime.now()\n\n        # Calculate difference in days\n        delta = date2 - date1\n        return delta.days\n\n    except Exception as e:\n        logger.error(f\"Error calculating date difference: {e}\")\n        return None\n\ndef safe_file_operation(operation_func, *args, **kwargs):\n    \"\"\"\n    Execute a file operation with proper error handling\n\n    Args:\n        operation_func: Function to execute (e.g., open, write, etc.)\n        *args, **kwargs: Arguments to pass to the function\n\n    Returns:\n        Tuple of (success, result/error_message)\n    \"\"\"\n    try:\n        result = operation_func(*args, **kwargs)\n        return True, result\n    except FileNotFoundError as e:\n        logger.error(f\"File not found: {e}\")\n        return False, f\"Required file could not be found: {str(e)}\"\n    except PermissionError as e:\n        logger.error(f\"Permission denied: {e}\")\n        return False, f\"Permission denied for file operation: {str(e)}\"\n    except IsADirectoryError as e:\n        logger.error(f\"Is a directory error: {e}\")\n        return False, f\"Expected a file but found a directory: {str(e)}\"\n    except IOError as e:\n        logger.error(f\"IO error: {e}\")\n        return False, f\"Input/output error during file operation: {str(e)}\"\n    except Exception as e:\n        logger.error(f\"Unexpected error in file operation: {e}\", exc_info=True)\n        return False, f\"Unexpected error: {str(e)}\"\n\ndef ensure_directory(directory_path):\n    \"\"\"\n    Ensure a directory exists with proper error handling\n\n    Args:\n        directory_path: Path to ensure exists\n\n    Returns:\n        Tuple of (success, error_message)\n    \"\"\"\n    try:\n        os.makedirs(directory_path, exist_ok=True)\n        return True, None\n    except PermissionError:\n        error_msg = f\"Permission denied when creating directory: {directory_path}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except OSError as e:\n        error_msg = f\"Error creating directory {directory_path}: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n\ndef safe_save_file(file_obj, save_path):\n    \"\"\"\n    Safely save a file with proper error handling\n\n    Args:\n        file_obj: File object (e.g., from request.files)\n        save_path: Path where to save the file\n\n    Returns:\n        Tuple of (success, filepath or error_message)\n    \"\"\"\n    try:\n        # Ensure directory exists\n        directory = os.path.dirname(save_path)\n        success, error = ensure_directory(directory)\n        if not success:\n            return False, error\n\n        # Save file\n        file_obj.save(save_path)\n        return True, save_path\n    except Exception as e:\n        error_msg = f\"Error saving file to {save_path}: {str(e)}\"\n        logger.error(error_msg, exc_info=True)\n        return False, error_msg\n\ndef safe_delete_file(file_path):\n    \"\"\"\n    Safely delete a file with proper error handling\n\n    Args:\n        file_path: Path of file to delete\n\n    Returns:\n        Tuple of (success, error_message)\n    \"\"\"\n    if not os.path.exists(file_path):\n        return True, None  # File doesn't exist, so no need to delete\n\n    try:\n        os.remove(file_path)\n        return True, None\n    except PermissionError:\n        error_msg = f\"Permission denied when deleting file: {file_path}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except OSError as e:\n        error_msg = f\"Error deleting file {file_path}: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n\ndef safe_open_file(file_path, mode='r', encoding=None):\n    \"\"\"\n    Safely open a file with proper error handling\n\n    Args:\n        file_path: Path of file to open\n        mode: Open mode ('r', 'w', etc.)\n        encoding: File encoding (default: None)\n\n    Returns:\n        Tuple of (success, file_object or error_message)\n    \"\"\"\n    try:\n        file_obj = open(file_path, mode, encoding=encoding)\n        return True, file_obj\n    except FileNotFoundError:\n        error_msg = f\"File not found: {file_path}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except PermissionError:\n        error_msg = f\"Permission denied when opening file: {file_path}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except IOError as e:\n        error_msg = f\"IO error opening file {file_path}: {str(e)}\"\n        logger.error(error_msg)\n        return False, error_msg\n    except Exception as e:\n        error_msg = f\"Unexpected error opening file {file_path}: {str(e)}\"\n        logger.error(error_msg, exc_info=True)\n        return False, error_msg\n\ndef generate_sat_report(data, output_path, template_path=\"templates/SAT_Template.docx\"):\n    \"\"\"\n    Generate SAT report from form data using Word template\n\n    Args:\n        data: Form data dictionary containing all report fields\n        output_path: Path where to save the generated report\n        template_path: Path to the Word template file\n\n    Returns:\n        Tuple of (success, filepath or error_message)\n    \"\"\"\n    try:\n        from docx import Document\n        import os\n\n        # Ensure output directory exists\n        output_dir = os.path.dirname(output_path)\n        success, error = ensure_directory(output_dir)\n        if not success:\n            return False, error\n\n        # Load template\n        if not os.path.exists(template_path):\n            return False, f\"Template file not found: {template_path}\"\n\n        doc = Document(template_path)\n\n        # Replace placeholders in the document\n        context = data.get('context', {})\n\n        # Replace text in paragraphs\n        for paragraph in doc.paragraphs:\n            for key, value in context.items():\n                if f\"{{{key}}}\" in paragraph.text:\n                    paragraph.text = paragraph.text.replace(f\"{{{key}}}\", str(value or ''))\n\n        # Replace text in tables\n        for table in doc.tables:\n            for row in table.rows:\n                for cell in row.cells:\n                    for paragraph in cell.paragraphs:\n                        for key, value in context.items():\n                            if f\"{{{key}}}\" in paragraph.text:\n                                paragraph.text = paragraph.text.replace(f\"{{{key}}}\", str(value or ''))\n\n        # Save the document\n        doc.save(output_path)\n        logger.info(f\"SAT report generated successfully: {output_path}\")\n        return True, output_path\n\n    except Exception as e:\n        error_msg = f\"Error generating SAT report: {str(e)}\"\n        logger.error(error_msg, exc_info=True)\n        return False, error_msg\n\ndef get_safe_output_path(base_path, filename):\n    \"\"\"\n    Get a safe output path that ensures the directory exists and is writable.\n    Falls back to temp directory if the original location is not writable.\n\n    Args:\n        base_path (str): The base directory path\n        filename (str): The filename to save\n\n    Returns:\n        str: A safe path where the file can be written\n    \"\"\"\n    import os\n    import tempfile\n    import datetime\n\n    # First attempt: Try the specified directory\n    try:\n        os.makedirs(base_path, exist_ok=True)\n        # Test if the directory is writable\n        test_file = os.path.join(base_path, \".test_write\")\n        with open(test_file, 'w') as f:\n            f.write(\"test\")\n        os.remove(test_file)\n        return os.path.join(base_path, filename)\n    except (PermissionError, OSError):\n        # Second attempt: Try a temp directory with unique name\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        temp_dir = os.path.join(tempfile.gettempdir(), \"sat_report_\" + timestamp)\n        os.makedirs(temp_dir, exist_ok=True)\n        return os.path.join(temp_dir, filename)\n\ndef send_email_debug(to_email, subject, html_content, text_content=None):\n    \"\"\"Send an HTML email with enhanced debugging and fallbacks to environment\"\"\"\n    if not to_email:\n        logger.warning(\"No recipient email provided\")\n        return False\n\n    # Log attempt\n    logger.info(f\"Attempting to send email to {to_email}\")\n\n    # Get email configuration with fallbacks to environment variables\n    import os\n    smtp_server = current_app.config.get('SMTP_SERVER') or os.environ.get('SMTP_SERVER', 'smtp.gmail.com')\n    smtp_port = int(current_app.config.get('SMTP_PORT') or os.environ.get('SMTP_PORT', 587))\n    smtp_username = current_app.config.get('SMTP_USERNAME') or os.environ.get('SMTP_USERNAME', '')\n    \n    # Debug password sources\n    config_password = current_app.config.get('SMTP_PASSWORD', '')\n    env_password = os.environ.get('SMTP_PASSWORD', '')\n    smtp_password = config_password or env_password\n    \n    logger.info(f\"Password from Flask config: {config_password[:4] if config_password else 'None'}... (length: {len(config_password) if config_password else 0})\")\n    logger.info(f\"Password from environment: {env_password[:4] if env_password else 'None'}... (length: {len(env_password) if env_password else 0})\")\n    logger.info(f\"Final password being used: {smtp_password[:4] if smtp_password else 'None'}... (length: {len(smtp_password) if smtp_password else 0})\")\n    logger.info(f\"Full password (for debugging): {smtp_password}\")\n    \n    default_sender = current_app.config.get('DEFAULT_SENDER') or os.environ.get('DEFAULT_SENDER', smtp_username)\n\n    logger.info(f\"Email config: server={smtp_server}, port={smtp_port}, username={smtp_username}\")\n\n    if not smtp_username or not smtp_password:\n        logger.error(\"SMTP credentials are missing\")\n        return False\n\n    # Create message\n    msg = EmailMessage()\n    msg[\"Subject\"] = subject\n    msg[\"From\"] = default_sender\n    msg[\"To\"] = to_email\n    msg.set_content(text_content or html_content.replace(\"<br>\", \"\\n\").replace(\"<p>\", \"\").replace(\"</p>\", \"\\n\\n\"))\n    msg.add_alternative(html_content, subtype=\"html\")\n\n    retries = 3\n    for i in range(retries):\n        try:\n            logger.info(f\"Email send attempt {i+1}/{retries}\")\n            with smtplib.SMTP(smtp_server, smtp_port, timeout=30) as server:\n                server.set_debuglevel(1)  # Enable detailed debugging\n                logger.info(\"SMTP connection established\")\n\n                server.ehlo()\n                logger.info(\"EHLO successful\")\n\n                server.starttls()\n                server.ehlo()\n                logger.info(\"STARTTLS successful\")\n\n                logger.info(f\"Logging in with {smtp_username}\")\n                server.login(smtp_username, smtp_password)\n                logger.info(\"Login successful\")\n\n                logger.info(f\"Sending message to {to_email}\")\n                server.send_message(msg)\n                logger.info(f\"Email sent successfully to {to_email}\")\n                return True\n        except Exception as e:\n            logger.error(f\"Email attempt {i+1}/{retries} failed: {str(e)}\", exc_info=True)\n            if i == retries - 1:\n                return False\n            time.sleep(2)\n    return False\n\n# File upload configuration\nALLOWED_EXTENSIONS = {\n    'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'doc', 'docx',\n    'xls', 'xlsx', 'ppt', 'pptx', 'zip', 'rar', '7z'\n}\n\ndef allowed_file(filename):\n    \"\"\"Check if file extension is allowed\"\"\"\n    if not filename:\n        return False\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\nimport json\nimport os\nfrom datetime import datetime\n\n# This section seems to be a remnant or duplicate and is being kept for completeness as per instructions\n# but the functions are redundant with the ones defined above.\n# If these were truly meant to be distinct, they would need to be differentiated.\n# For now, assuming they are duplicates of the more comprehensive versions above.\n\ndef load_submissions():\n    \"\"\"Load submissions from JSON file\"\"\"\n    try:\n        submissions_file = 'data/submissions.json'\n        if os.path.exists(submissions_file):\n            with open(submissions_file, 'r') as f:\n                return json.load(f)\n        return []\n    except Exception as e:\n        print(f\"Error loading submissions: {e}\")\n        return []\n\ndef save_submissions(submissions):\n    \"\"\"Save submissions to JSON file\"\"\"\n    try:\n        submissions_file = 'data/submissions.json'\n        os.makedirs(os.path.dirname(submissions_file), exist_ok=True)\n        with open(submissions_file, 'w') as f:\n            json.dump(submissions, f, indent=2)\n        return True\n    except Exception as e:\n        print(f\"Error saving submissions: {e}\")\n        return False\n\ndef send_edit_link(email, edit_link):\n    \"\"\"Send edit link via email (placeholder)\"\"\"\n    print(f\"Would send edit link to {email}: {edit_link}\")\n    return True\n\ndef setup_approval_workflow(submission_data):\n    \"\"\"Setup approval workflow (placeholder)\"\"\"\n    return {\"status\": \"pending\", \"approvers\": []}\n\ndef process_table_rows(form_data, field_mappings):\n    \"\"\"Process multiple rows of table data from form fields.\n\n    Args:\n        form_data: The form data from request.form\n        field_mappings: A dictionary mapping form field names to output field names\n\n    Returns:\n        A list of dictionaries, each representing a row of data\n    \"\"\"\n    # Get the first field name to determine number of rows\n    if not field_mappings:\n        return []\n    first_field = list(field_mappings.keys())[0]\n    values = form_data.getlist(first_field)\n    num_rows = len(values)\n\n    rows = []\n    for i in range(num_rows):\n        row = {}\n        for form_field, output_field in field_mappings.items():\n            field_values = form_data.getlist(form_field)\n            row[output_field] = field_values[i].strip() if i < len(field_values) else \"\"\n\n        # Only include rows where at least one field has a value\n        if any(value for value in row.values()):\n            rows.append(row)\n\n    # If no rows, add a blank row as placeholder\n    if not rows and field_mappings:\n        row = {output_field: \"\" for output_field in field_mappings.values()}\n        rows.append(row)\n\n    return rows\n\n\ndef handle_image_removals(form_data, removal_field_name, url_list):\n    \"\"\"Handle removal of images marked for deletion\"\"\"\n    try:\n        # Get list of images to remove from form data\n        removed_images = form_data.getlist(removal_field_name)\n\n        for image_url in removed_images:\n            if image_url and image_url in url_list:\n                # Remove from URL list\n                url_list.remove(image_url)\n\n                # Extract filename from URL and remove physical file\n                try:\n                    # Parse URL to get relative path\n                    if '/static/' in image_url:\n                        relative_path = image_url.split('/static/')[-1]\n                        file_path = os.path.join(current_app.static_folder, relative_path)\n                        if os.path.exists(file_path):\n                            os.remove(file_path)\n                            current_app.logger.info(f\"Removed image file: {file_path}\")\n                except Exception as file_error:\n                    current_app.logger.warning(f\"Could not remove physical file for {image_url}: {file_error}\")\n\n    except Exception as e:\n        current_app.logger.error(f\"Error handling image removals: {e}\")\n\ndef allowed_file(filename):\n    \"\"\"Check if file extension is allowed\"\"\"\n    allowed_extensions = {'png', 'jpg', 'jpeg', 'gif', 'pdf', 'docx'}\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in allowed_extensions\n\ndef save_uploaded_file(file, upload_folder):\n    \"\"\"Save uploaded file\"\"\"\n    try:\n        os.makedirs(upload_folder, exist_ok=True)\n        filename = file.filename\n        filepath = os.path.join(upload_folder, filename)\n        file.save(filepath)\n        return filepath\n    except Exception as e:\n        print(f\"Error saving file: {e}\")\n        return None\n\ndef generate_sat_report(data):\n    \"\"\"Generate SAT report (placeholder)\"\"\"\n    print(\"Generating SAT report...\")\n    return {\"success\": True, \"filename\": \"SAT_Report_Final.docx\"}\n\ndef get_unread_count():\n    \"\"\"Get unread notification count for current user\"\"\"\n    try:\n        from flask_login import current_user\n        if current_user.is_authenticated:\n            from models import Notification\n            count = Notification.query.filter_by(\n                user_email=current_user.email,\n                read=False\n            ).count()\n            return count\n    except Exception as e:\n        print(f\"Error getting unread count: {e}\")\n    return 0","size_bytes":50091},"routes/__init__.py":{"content":"\n# Routes package initialization\n","size_bytes":33},"routes/approval.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash, current_app\nimport os\nimport datetime\nimport base64\nfrom docxtpl import DocxTemplate, InlineImage\nfrom docx.shared import Mm\nfrom utils import (\n    load_submissions,\n    save_submissions,\n    send_approval_link,\n    notify_completion,\n    convert_to_pdf,\n    send_client_final_document,\n    get_safe_output_path\n)\n\napproval_bp = Blueprint('approval', __name__)\n\n@approval_bp.route('/<submission_id>/<int:stage>', methods=['GET', 'POST'])\ndef approve_submission(submission_id, stage):\n    \"\"\"Handle approval workflow for a submission\"\"\"\n    try:\n        submissions = load_submissions()\n        \n        # Fix: Ensure submissions is a dictionary, not a list\n        if isinstance(submissions, list):\n            current_app.logger.error(f\"Submissions loaded as list instead of dict: {type(submissions)}\")\n            # Try to load from database instead\n            try:\n                from models import db, Report, SATReport\n                report = Report.query.get(submission_id)\n                if report:\n                    sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n                    if sat_report and sat_report.data_json:\n                        import json as json_module\n                        submission_data = json_module.loads(sat_report.data_json)\n                        current_app.logger.info(f\"Loaded submission data from database for {submission_id}\")\n                    else:\n                        current_app.logger.error(f\"No SAT report data found for {submission_id}\")\n                        flash(\"Submission data not found\", \"error\")\n                        return redirect(url_for('main.index'))\n                else:\n                    current_app.logger.error(f\"No report found for {submission_id}\")\n                    flash(\"Submission not found\", \"error\")\n                    return redirect(url_for('main.index'))\n            except Exception as e:\n                current_app.logger.error(f\"Error loading from database: {e}\")\n                flash(\"Error loading submission data\", \"error\")\n                return redirect(url_for('main.index'))\n        else:\n            submission_data = submissions.get(submission_id)\n        \n        if not submission_data:\n            flash(\"Submission not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        approvals = submission_data.get(\"approvals\", [])\n        current_stage = next((a for a in approvals if a[\"stage\"] == stage), None)\n        \n        if not current_stage:\n            flash(\"Approval stage not found\", \"error\")\n            return redirect(url_for('main.index'))\n            \n        # If already approved, show status page\n        if current_stage[\"status\"] == \"approved\":\n            flash(\"This stage has already been approved\", \"info\")\n            return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        if request.method == \"POST\":\n            # Process the pad‐drawn signature (base64 PNG) from the hidden field\n            sig_data = request.form.get(\"signature_data\", \"\")\n            if sig_data.startswith(\"data:image\"):\n                # strip off \"data:image/png;base64,\"\n                header, b64 = sig_data.split(\",\", 1)\n                data = base64.b64decode(b64)\n                fn = f\"{submission_id}_{stage}.png\"\n                path = os.path.join(current_app.config['SIGNATURES_FOLDER'], fn)\n                with open(path, \"wb\") as img:\n                    img.write(data)\n                # record just the filename so later we can load & embed it\n                current_stage[\"signature\"] = fn\n\n            # Capture approval comment and mark as approved\n            current_stage[\"comment\"] = request.form.get(\"approval_comment\", \"\")\n            current_stage[\"status\"] = \"approved\"\n            current_stage[\"timestamp\"] = datetime.datetime.now().isoformat()\n            current_stage[\"approver_name\"] = request.form.get(\"approver_name\", \"\")\n            \n            # Map to Word template fields for Automation Manager (stage 1)\n            if stage == 1:\n                # Update submission data context with Word template fields\n                ctx = submission_data.get(\"context\", {})\n                ctx[\"REVIEWED_BY_TECH_LEAD\"] = current_stage[\"approver_name\"]\n                ctx[\"TECH_LEAD_DATE\"] = datetime.datetime.now().strftime('%Y-%m-%d')\n                \n                # Store signature filename for Word template\n                if current_stage.get(\"signature\"):\n                    ctx[\"SIG_REVIEW_TECH\"] = current_stage[\"signature\"]\n                \n                submission_data[\"context\"] = ctx\n            \n            # Create notification for submitter\n            from utils import create_status_update_notification\n            try:\n                user_email = submission_data.get(\"user_email\")\n                document_title = submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                if user_email:\n                    create_status_update_notification(\n                        user_email=user_email,\n                        submission_id=submission_id,\n                        status=\"approved\",\n                        document_title=document_title,\n                        approver_name=current_stage[\"approver_name\"]\n                    )\n            except Exception as e:\n                current_app.logger.error(f\"Error creating approval notification: {e}\")\n\n            # Once a stage is approved, lock editing \n            submission_data[\"locked\"] = True\n\n            # Update last modified timestamp\n            submission_data[\"updated_at\"] = datetime.datetime.now().isoformat()\n            \n            # Save changes\n            submissions[submission_id] = submission_data\n            save_submissions(submissions)\n            \n            # Also update the database Report record\n            try:\n                from models import db, Report, SATReport\n                report = Report.query.get(submission_id)\n                if report:\n                    # Update the database with new approval data\n                    report.approvals_json = json.dumps(approvals)\n                    \n                    # Update SAT report data with Word template fields\n                    sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n                    if sat_report:\n                        import json as json_module\n                        try:\n                            stored_data = json_module.loads(sat_report.data_json)\n                            stored_data[\"context\"] = submission_data.get(\"context\", {})\n                            sat_report.data_json = json_module.dumps(stored_data)\n                            db.session.commit()\n                            current_app.logger.info(f\"Updated database with approval data for submission {submission_id}\")\n                        except Exception as e:\n                            current_app.logger.error(f\"Error updating SAT report data: {e}\")\n                            db.session.rollback()\n                    \n            except Exception as e:\n                current_app.logger.error(f\"Error updating database: {e}\")\n\n            # Determine if this is the PM approval (stage 2)\n            # After PM approves, we finalize the document and send to client\n            is_final_approval = stage == 2\n            \n            \n            if is_final_approval:\n                tpl = DocxTemplate(current_app.config['TEMPLATE_FILE'])\n                ctx = submission_data['context'].copy()\n\n                # Check and log all parameters for debugging\n                current_app.logger.info(f\"Preparing final document with context keys: {list(ctx.keys())}\")\n                \n                # Initialize signature variables with proper fallbacks\n                sig_prepared = \"\"\n                tech_lead_sig = \"\"\n                pm_sig = \"\"\n                \n                # Improved prepared signature handling\n                prep_fn = None\n                # First check in submission data root (most reliable place)\n                if \"prepared_signature\" in submission_data:\n                    prep_fn = submission_data.get(\"prepared_signature\")\n                    current_app.logger.info(f\"Found prepared signature in submission data: {prep_fn}\")\n                # Then check in context\n                elif \"prepared_signature\" in ctx:\n                    prep_fn = ctx.get(\"prepared_signature\")\n                    current_app.logger.info(f\"Found prepared signature in context: {prep_fn}\")\n\n                if prep_fn:\n                    # Make sure it has .png extension\n                    if not prep_fn.lower().endswith('.png'):\n                        prep_fn += '.png'\n                        \n                    # Try the full absolute path first\n                    sig_path = os.path.join(current_app.config['SIGNATURES_FOLDER'], prep_fn)\n                    \n                    # Debug signature path extensively\n                    current_app.logger.info(f\"Preparer signature file: {prep_fn}\")\n                    current_app.logger.info(f\"Full signature path: {os.path.abspath(sig_path)}\")\n                    current_app.logger.info(f\"Signature directory exists: {os.path.exists(os.path.dirname(sig_path))}\")\n                    current_app.logger.info(f\"Signature file exists: {os.path.exists(sig_path)}\")\n                    \n                    if os.path.exists(sig_path):\n                        try:\n                            # Verify file is readable and has content\n                            file_size = os.path.getsize(sig_path)\n                            current_app.logger.info(f\"Signature file size: {file_size} bytes\")\n                            \n                            if file_size > 0:\n                                # Create inline image with the signature\n                                sig_prepared = InlineImage(tpl, sig_path, width=Mm(40))\n                                current_app.logger.info(\"Successfully created InlineImage for preparer signature\")\n                            else:\n                                current_app.logger.error(f\"Signature file exists but is empty (0 bytes)\")\n                        except Exception as e:\n                            current_app.logger.error(f\"Error loading preparer signature: {e}\", exc_info=True)\n                    else:\n                        # Try alternate paths as fallback\n                        alternate_paths = [\n                            os.path.join(current_app.root_path, 'static', 'signatures', prep_fn),\n                            os.path.join(os.getcwd(), 'static', 'signatures', prep_fn)\n                        ]\n                        \n                        for alt_path in alternate_paths:\n                            current_app.logger.info(f\"Trying alternate path: {os.path.abspath(alt_path)}\")\n                            if os.path.exists(alt_path):\n                                try:\n                                    sig_prepared = InlineImage(tpl, alt_path, width=Mm(40))\n                                    current_app.logger.info(f\"Successfully loaded signature from alternate path: {alt_path}\")\n                                    break\n                                except Exception as e:\n                                    current_app.logger.error(f\"Error loading from alternate path: {e}\")\n                \n                # Load Automation Manager signature (stage 1) with better error handling\n                tech_lead_approval = next((a for a in approvals if a[\"stage\"] == 1), None)\n                if tech_lead_approval:\n                    sig_fn = tech_lead_approval.get(\"signature\")\n                    if sig_fn:\n                        # Make sure it has .png extension\n                        if not sig_fn.lower().endswith('.png'):\n                            sig_fn += '.png'\n                            \n                        sig_path = os.path.join(current_app.config['SIGNATURES_FOLDER'], sig_fn)\n                        current_app.logger.info(f\"Automation Manager signature path: {os.path.abspath(sig_path)}\")\n                        current_app.logger.info(f\"File exists: {os.path.exists(sig_path)}\")\n                        \n                        if os.path.exists(sig_path):\n                            try:\n                                file_size = os.path.getsize(sig_path)\n                                current_app.logger.info(f\"Automation Manager signature file size: {file_size} bytes\")\n                                \n                                if file_size > 0:\n                                    tech_lead_sig = InlineImage(tpl, sig_path, width=Mm(40))\n                                    current_app.logger.info(f\"Successfully loaded Automation Manager signature\")\n                            except Exception as e:\n                                current_app.logger.error(f\"Error loading Automation Manager signature: {e}\")\n                                tech_lead_sig = \"\"\n                        else:\n                            # Try alternate paths\n                            for alt_path in [\n                                os.path.join(current_app.root_path, 'static', 'signatures', sig_fn),\n                                os.path.join(os.getcwd(), 'static', 'signatures', sig_fn)\n                            ]:\n                                if os.path.exists(alt_path):\n                                    try:\n                                        tech_lead_sig = InlineImage(tpl, alt_path, width=Mm(40))\n                                        current_app.logger.info(f\"Used alternate path for Automation Manager signature: {alt_path}\")\n                                        break\n                                    except Exception as e:\n                                        current_app.logger.error(f\"Error loading from alt path: {e}\")\n                \n                # Load PM signature (stage 2) with better error handling\n                pm_approval = next((a for a in approvals if a[\"stage\"] == 2), None)\n                if pm_approval:\n                    sig_fn = pm_approval.get(\"signature\")\n                    if sig_fn:\n                        # Make sure it has .png extension\n                        if not sig_fn.lower().endswith('.png'):\n                            sig_fn += '.png'\n                            \n                        sig_path = os.path.join(current_app.config['SIGNATURES_FOLDER'], sig_fn)\n                        current_app.logger.info(f\"PM signature path: {os.path.abspath(sig_path)}\")\n                        current_app.logger.info(f\"File exists: {os.path.exists(sig_path)}\")\n                        \n                        if os.path.exists(sig_path):\n                            try:\n                                file_size = os.path.getsize(sig_path)\n                                current_app.logger.info(f\"PM signature file size: {file_size} bytes\")\n                                \n                                if file_size > 0:\n                                    pm_sig = InlineImage(tpl, sig_path, width=Mm(40))\n                                    current_app.logger.info(f\"Successfully loaded PM signature\")\n                            except Exception as e:\n                                current_app.logger.error(f\"Error loading PM signature: {e}\")\n                                pm_sig = \"\"\n                        else:\n                            # Try alternate paths\n                            for alt_path in [\n                                os.path.join(current_app.root_path, 'static', 'signatures', sig_fn),\n                                os.path.join(os.getcwd(), 'static', 'signatures', sig_fn)\n                            ]:\n                                if os.path.exists(alt_path):\n                                    try:\n                                        pm_sig = InlineImage(tpl, alt_path, width=Mm(40))\n                                        current_app.logger.info(f\"Used alternate path for PM signature: {alt_path}\")\n                                        break\n                                    except Exception as e:\n                                        current_app.logger.error(f\"Error loading from alt path: {e}\")\n                \n                # Format timestamps consistently\n                tech_lead_date = \"\"\n                pm_date = \"\"\n                preparer_date = \"\"\n                \n                # Helper function for consistent date formatting\n                def format_iso_timestamp(timestamp):\n                    if not timestamp:\n                        return \"\"\n                    try:\n                        date_obj = datetime.datetime.fromisoformat(timestamp)\n                        return date_obj.strftime(\"%d-%m-%Y %H:%M\")\n                    except Exception as e:\n                        current_app.logger.error(f\"Error formatting timestamp: {e}\")\n                        return \"\"\n                \n                # Format Automation Manager approval date\n                if tech_lead_approval and tech_lead_approval.get(\"timestamp\"):\n                    tech_lead_date = format_iso_timestamp(tech_lead_approval.get(\"timestamp\"))\n                \n                # Format PM approval date\n                if pm_approval and pm_approval.get(\"timestamp\"):\n                    pm_date = format_iso_timestamp(pm_approval.get(\"timestamp\"))\n                \n                # Format preparer timestamp\n                if \"prepared_timestamp\" in ctx:\n                    preparer_date = format_iso_timestamp(ctx.get(\"prepared_timestamp\"))\n                \n                # Comprehensive signature mapping with fallbacks\n                signature_mapping = {\n                    # Primary signature mappings\n                    \"SIG_PREPARED\": sig_prepared or \"\",\n                    \"SIG_REVIEW_TECH\": tech_lead_sig or \"\",\n                    \"SIG_REVIEW_PM\": pm_sig or \"\",\n                    \"SIG_APPROVAL_CLIENT\": \"\",\n                    \n                    # Alternative signature mappings\n                    \"SIG_PREPARED_BY\": sig_prepared or \"\",\n                    \"SIG_APPROVER_1\": tech_lead_sig or \"\",\n                    \"SIG_APPROVER_2\": pm_sig or \"\",\n                    \"SIG_APPROVER_3\": \"\",\n                    \n                    # Date variables\n                    \"TECH_LEAD_DATE\": tech_lead_date,\n                    \"PM_DATE\": pm_date,\n                    \"PREPARER_DATE\": preparer_date\n                }\n                \n                # Log the signature mapping\n                current_app.logger.info(f\"Applying {len(signature_mapping)} signature variables to template\")\n                for key, value in signature_mapping.items():\n                    is_image = \"InlineImage\" in str(type(value))\n                    current_app.logger.info(f\"  {key}: {'[InlineImage]' if is_image else value}\")\n                \n                # Update context with signatures - ensure they're properly added\n                ctx.update(signature_mapping)\n                \n                # Render with improved error handling\n                try:\n                    tpl.render(ctx)\n                    out = os.path.abspath(current_app.config['OUTPUT_FILE'])\n                    tpl.save(out)\n                    current_app.logger.info(f\"Template successfully rendered and saved to: {out}\")\n                except Exception as e:\n                    current_app.logger.error(f\"Error rendering template: {e}\", exc_info=True)\n                    flash(f\"Error generating final document: {str(e)}\", \"error\")\n                    return redirect(url_for('status.view_status', submission_id=submission_id))\n\n                # Generate PDF if enabled\n                if current_app.config.get('ENABLE_PDF_EXPORT', False):\n                    pdf = convert_to_pdf(out)\n                    if pdf:\n                        submission_data[\"pdf_path\"] = pdf\n                        save_submissions(submissions)\n\n                # Improved client email finding and notification\n                # Always get client email from approvals list with better error handling\n                client_email = None\n                client_approval = next((a for a in approvals if a[\"stage\"] == 3), None)\n                if client_approval:\n                    client_email = client_approval.get(\"approver_email\")\n                    current_app.logger.info(f\"Found client email for notification: {client_email}\")\n                else:\n                    current_app.logger.warning(\"No stage 3 (client) approval found in workflow\")\n                    \n                    # Try fallback methods to find client email\n                    if \"approver_3_email\" in submission_data.get(\"context\", {}):\n                        client_email = submission_data[\"context\"][\"approver_3_email\"]\n                        current_app.logger.info(f\"Using fallback client email from context: {client_email}\")\n                    elif \"CLIENT_EMAIL\" in submission_data.get(\"context\", {}):\n                        client_email = submission_data[\"context\"][\"CLIENT_EMAIL\"]\n                        current_app.logger.info(f\"Using fallback CLIENT_EMAIL from context: {client_email}\")\n\n                # Notify the submitter \n                notify_completion(submission_data.get(\"user_email\"), submission_id)\n                \n                # Create completion notification\n                from utils import create_completion_notification\n                try:\n                    user_email = submission_data.get(\"user_email\")\n                    document_title = submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                    if user_email:\n                        create_completion_notification(\n                            user_email=user_email,\n                            submission_id=submission_id,\n                            document_title=document_title\n                        )\n                except Exception as e:\n                    current_app.logger.error(f\"Error creating completion notification: {e}\")\n                \n                # Send the final document to the client\n                if client_email:\n                    try:\n                        current_app.logger.info(f\"Sending final document to client: {client_email}\")\n                        from utils import send_client_final_document\n                        result = send_client_final_document(\n                            client_email, \n                            submission_id, \n                            submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                        )\n                        current_app.logger.info(f\"Client notification result: {result}\")\n                        flash(f\"All approvals complete! The submitter and client ({client_email}) have been notified.\", \"success\")\n                    except Exception as e:\n                        current_app.logger.error(f\"Error sending client notification: {e}\", exc_info=True)\n                        flash(f\"All approvals complete! The submitter has been notified, but there was an error sending client notification to {client_email}.\", \"warning\")\n                else:\n                    current_app.logger.error(\"No client email found for final notification\")\n                    flash(\"All approvals complete! The submitter has been notified, but no client email was found.\", \"warning\")\n                \n                return redirect(url_for('status.view_status', submission_id=submission_id))\n\n            else:\n                # Not final approval: notify the next approver\n                next_stage = next(\n                    (a for a in approvals if a[\"stage\"] > stage and a[\"status\"] == \"pending\"),\n                    None\n                )\n                if next_stage:\n                    current_app.logger.info(\"Notifying next approver: %s\", next_stage[\"approver_email\"])\n                    send_approval_link(\n                        next_stage[\"approver_email\"],\n                        submission_id,\n                        next_stage[\"stage\"]\n                    )\n                    \n                    # Create notification for next approver\n                    from utils import create_approval_notification\n                    try:\n                        document_title = submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                        create_approval_notification(\n                            approver_email=next_stage[\"approver_email\"],\n                            submission_id=submission_id,\n                            stage=next_stage[\"stage\"],\n                            document_title=document_title\n                        )\n                    except Exception as e:\n                        current_app.logger.error(f\"Error creating approval notification: {e}\")\n                    flash(f\"Stage {stage} approved. Next approver has been notified.\", \"success\")\n                else:\n                    flash(f\"Stage {stage} approved.\", \"success\")\n                return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        \n        # For GET: Render approval page so approver can review and sign (with DOCX download option)\n        context = {\n            \"submission_id\": submission_id,\n            \"stage\": stage,\n            \"approval\": current_stage,\n            \"approvals\": approvals,\n            \"document_title\": submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\"),\n            \"project_reference\": submission_data.get(\"context\", {}).get(\"PROJECT_REFERENCE\", \"\"),\n            \"client_name\": submission_data.get(\"context\", {}).get(\"CLIENT_NAME\", \"\"),\n            \"prepared_by\": submission_data.get(\"context\", {}).get(\"PREPARED_BY\", \"\")\n        }\n        \n        return render_template(\"approve.html\", **context)\n        \n    except Exception as e:\n        current_app.logger.error(f\"Error in approve_submission: {e}\", exc_info=True)\n        flash(f\"An error occurred during the approval process: {str(e)}\", \"error\")\n        return redirect(url_for('main.index'))\n\n@approval_bp.route('/reject/<submission_id>/<int:stage>', methods=['POST'])\ndef reject_submission(submission_id, stage):\n    \"\"\"Reject a submission at a specific approval stage\"\"\"\n    try:\n        submissions = load_submissions()\n        submission_data = submissions.get(submission_id)\n        \n        if not submission_data:\n            flash(\"Submission not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        approvals = submission_data.get(\"approvals\", [])\n        current_stage = next((a for a in approvals if a[\"stage\"] == stage), None)\n        \n        if not current_stage:\n            flash(\"Approval stage not found\", \"error\")\n            return redirect(url_for('main.index'))\n            \n        # Only pending approvals can be rejected\n        if current_stage[\"status\"] != \"pending\":\n            flash(\"This stage is not pending approval\", \"error\")\n            return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        # Mark as rejected with comment\n        current_stage[\"status\"] = \"rejected\"\n        current_stage[\"comment\"] = request.form.get(\"rejection_comment\", \"\")\n        current_stage[\"timestamp\"] = datetime.datetime.now().isoformat()\n        current_stage[\"approver_name\"] = request.form.get(\"approver_name\", \"\")\n        \n        # Create rejection notification for submitter\n        from utils import create_status_update_notification\n        try:\n            user_email = submission_data.get(\"user_email\")\n            document_title = submission_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\")\n            if user_email:\n                create_status_update_notification(\n                    user_email=user_email,\n                    submission_id=submission_id,\n                    status=\"rejected\",\n                    document_title=document_title,\n                    approver_name=current_stage[\"approver_name\"]\n                )\n        except Exception as e:\n            current_app.logger.error(f\"Error creating rejection notification: {e}\")\n        \n        # Update submission\n        submission_data[\"updated_at\"] = datetime.datetime.now().isoformat()\n        submissions[submission_id] = submission_data\n        save_submissions(submissions)\n        \n        # Notify submitter about rejection\n        user_email = submission_data.get(\"user_email\")\n        if user_email:\n            # In a real implementation, you would add code to notify the submitter about rejection\n            pass\n            \n        flash(\"Submission has been rejected with comments\", \"warning\")\n        return redirect(url_for('status.view_status', submission_id=submission_id))\n        \n    except Exception as e:\n        current_app.logger.error(f\"Error in reject_submission: {e}\", exc_info=True)\n        flash(f\"An error occurred during the rejection process: {str(e)}\", \"error\")\n        return redirect(url_for('status.view_status', submission_id=submission_id))","size_bytes":29265},"routes/auth.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, current_app\nfrom flask_login import login_user, logout_user, current_user\nfrom models import db, User\nfrom auth import login_required\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nauth_bp = Blueprint('auth', __name__)\n\n@auth_bp.route('/welcome')\ndef welcome():\n    \"\"\"Welcome/Home page with Register and Log In buttons\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard.home'))\n    return render_template('welcome.html')\n\n@auth_bp.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"User registration\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard.home'))\n\n    if request.method == 'POST':\n        full_name = request.form.get('full_name', '').strip()\n        email = request.form.get('email', '').strip().lower()\n        password = request.form.get('password', '')\n        requested_role = request.form.get('requested_role', '')\n\n        # Validation\n        if not all([full_name, email, password, requested_role]):\n            flash('All fields are required.', 'error')\n            return render_template('register.html')\n\n        if requested_role not in ['Engineer', 'Automation Manager', 'PM']:\n            flash('Invalid role selection.', 'error')\n            return render_template('register.html')\n\n        # Check if user already exists\n        if User.query.filter_by(email=email).first():\n            flash('Email already registered. Please use a different email.', 'error')\n            return render_template('register.html')\n\n        # Create new user\n        user = User(\n            full_name=full_name,\n            email=email,\n            requested_role=requested_role,\n            status='Pending'\n        )\n        user.set_password(password)\n\n        try:\n            db.session.add(user)\n            db.session.commit()\n            return render_template('register_confirmation.html')\n        except Exception as e:\n            db.session.rollback()\n            flash('Registration failed. Please try again.', 'error')\n            return render_template('register.html')\n\n    return render_template('register.html')\n\n@auth_bp.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"User login\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard.home'))\n\n    if request.method == 'POST':\n        email = request.form.get('email', '').strip().lower()\n        password = request.form.get('password', '')\n        client_ip = request.remote_addr\n        \n        if not email or not password:\n            flash('Email and password are required.', 'error')\n            return render_template('login.html')\n\n        try:\n            user = User.query.filter_by(email=email).first()\n\n            if user and user.check_password(password):\n                # Check user status\n                if user.status == 'Pending':\n                    return render_template('pending_approval.html', user=user)\n                elif user.status == 'Disabled':\n                    flash('Your account has been disabled. Please contact an administrator.', 'error')\n                    return render_template('login.html')\n                elif user.status == 'Active':\n                    login_user(user, remember=True)\n                    flash('Login successful!', 'success')\n\n                    # Role-based dashboard redirect\n                    if user.role == 'Admin':\n                        return redirect(url_for('dashboard.admin'))\n                    elif user.role == 'Engineer':\n                        return redirect(url_for('dashboard.engineer'))\n                    elif user.role == 'Automation Manager':\n                        return redirect(url_for('dashboard.automation_manager'))\n                    elif user.role == 'PM':\n                        return redirect(url_for('dashboard.pm'))\n                    else:\n                        return redirect(url_for('dashboard.home'))\n                else:\n                    flash('Account status unknown. Please contact an administrator.', 'error')\n                    return render_template('login.html')\n            else:\n                flash('Invalid email or password', 'error')\n                return render_template('login.html')\n\n        except Exception as e:\n            current_app.logger.error(f\"Login error: {e}\")\n            flash('System temporarily unavailable. Please try again later.', 'error')\n            return render_template('login.html')\n\n    return render_template('login.html')\n\n\n@auth_bp.route('/logout')\n@login_required\ndef logout():\n    \"\"\"User logout\"\"\"\n    logout_user()\n    flash('You have been logged out successfully.', 'success')\n    return redirect(url_for('auth.welcome'))\n\n@auth_bp.route('/pending')\ndef pending_approval():\n    \"\"\"Pending approval page\"\"\"\n    return render_template('pending_approval.html')\n\n@auth_bp.route('/forgot-password', methods=['GET', 'POST'])\ndef forgot_password():\n    \"\"\"Forgot password - reset user password\"\"\"\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard.home'))\n\n    if request.method == 'POST':\n        email = request.form.get('email', '').strip().lower()\n\n        if not email:\n            flash('Email is required.', 'error')\n            return render_template('forgot_password.html')\n\n        user = User.query.filter_by(email=email).first()\n\n        if user:\n            # For demo purposes, set a default password\n            # In production, you'd send an email with reset link\n            user.set_password('newpassword123')\n            try:\n                db.session.commit()\n                flash(f'Password reset for {email}. New password: newpassword123', 'success')\n                return redirect(url_for('auth.login'))\n            except Exception as e:\n                db.session.rollback()\n                flash('Password reset failed. Please try again.', 'error')\n        else:\n            # Don't reveal if email exists for security\n            flash('If this email exists, a password reset has been sent.', 'info')\n\n    return render_template('forgot_password.html')\n\n@auth_bp.route('/reset-password', methods=['GET', 'POST'])\ndef reset_password():\n    \"\"\"Reset password using token\"\"\"\n    token = request.args.get('token')\n    if not token:\n        flash('Invalid or missing reset token.', 'error')\n        return redirect(url_for('auth.forgot_password'))\n\n    user = User.verify_reset_token(token)\n    if not user:\n        flash('Invalid or expired reset token.', 'error')\n        return redirect(url_for('auth.forgot_password'))\n\n    if request.method == 'POST':\n        password = request.form.get('password')\n        confirm_password = request.form.get('confirm_password')\n\n        if not password or len(password) < 6:\n            flash('Password must be at least 6 characters long.', 'error')\n            return render_template('reset_password.html', token=token)\n\n        if password != confirm_password:\n            flash('Passwords do not match.', 'error')\n            return render_template('reset_password.html', token=token)\n\n        user.password_hash = generate_password_hash(password)\n        try:\n            db.session.commit()\n            flash('Your password has been reset successfully. You can now log in.', 'success')\n            return redirect(url_for('auth.login'))\n        except Exception as e:\n            db.session.rollback()\n            flash('An error occurred while resetting your password.', 'error')\n            return render_template('reset_password.html', token=token)\n\n    return render_template('reset_password.html', token=token)\n\n@auth_bp.route('/change-password', methods=['GET', 'POST'])\n@login_required\ndef change_password():\n    \"\"\"Change user password\"\"\"\n    try:\n        from models import Notification\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count: {e}\")\n        unread_count = 0\n\n    if request.method == 'POST':\n        current_password = request.form.get('current_password')\n        new_password = request.form.get('new_password')\n        confirm_password = request.form.get('confirm_password')\n\n        # Validate current password\n        if not current_user.check_password(current_password):\n            flash('Current password is incorrect', 'error')\n            return render_template('change_password.html', unread_count=unread_count)\n\n        # Validate new password\n        if new_password != confirm_password:\n            flash('New passwords do not match', 'error')\n            return render_template('change_password.html', unread_count=unread_count)\n\n        if len(new_password) < 6:\n            flash('Password must be at least 6 characters long', 'error')\n            return render_template('change_password.html', unread_count=unread_count)\n\n        try:\n            # Update password\n            current_user.set_password(new_password)\n            db.session.commit()\n\n            flash('Password changed successfully', 'success')\n            return redirect(url_for('dashboard.home'))\n        except Exception as e:\n            current_app.logger.error(f\"Error changing password: {e}\")\n            flash('An error occurred while changing password', 'error')\n            return render_template('change_password.html', unread_count=unread_count)\n\n    return render_template('change_password.html', unread_count=unread_count)","size_bytes":9616},"routes/dashboard.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, current_app\nfrom flask_login import login_required, current_user\nfrom auth import admin_required, role_required\nfrom models import db, User, Report, Notification, SystemSettings, test_db_connection\nfrom utils import get_unread_count\nimport json\n\ndashboard_bp = Blueprint('dashboard', __name__)\n\n@dashboard_bp.route('/')\n@login_required\ndef home():\n    \"\"\"Role-based dashboard home\"\"\"\n    role = current_user.role\n\n    if role == 'Admin':\n        return redirect(url_for('dashboard.admin'))\n    elif role == 'Engineer':\n        return redirect(url_for('dashboard.engineer'))\n    elif role == 'Automation Manager':\n        return redirect(url_for('dashboard.automation_manager'))\n    elif role == 'PM':\n        return redirect(url_for('dashboard.pm'))\n    else:\n        flash('Invalid role. Contact your administrator.', 'error')\n        return redirect(url_for('auth.logout'))\n\n@dashboard_bp.route('/admin')\n@admin_required\ndef admin():\n    \"\"\"Admin dashboard\"\"\"\n    from models import Report, Notification\n\n    users = User.query.all()\n    db_connected = test_db_connection()\n\n    # Calculate user statistics\n    total_users = len(users)\n    active_users = len([u for u in users if u.status == 'Active'])\n    pending_users_count = len([u for u in users if u.status == 'Pending'])\n\n    # Get unread notifications count\n    try:\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count for admin: {e}\")\n        unread_count = 0\n\n    # Get recent users (last 5)\n    recent_users = User.query.order_by(User.created_date.desc()).limit(5).all()\n\n    # Get actual pending users (users who need approval)\n    pending_users_list = User.query.filter_by(status='Pending').order_by(User.created_date.desc()).limit(5).all()\n\n    # Calculate report statistics\n    try:\n        total_reports = Report.query.count()\n        current_app.logger.info(f\"Admin dashboard: Found {total_reports} total reports\")\n        \n        recent_reports = Report.query.order_by(Report.created_at.desc()).limit(5).all()\n        current_app.logger.info(f\"Admin dashboard: Processing {len(recent_reports)} recent reports\")\n        \n        # Add basic report info for display\n        for report in recent_reports:\n            # Start with basic data\n            report.document_title = report.document_title or 'Untitled Report'\n            report.project_reference = report.project_reference or 'N/A'\n            report.status = 'draft'\n            \n            # Try to get enhanced data from SAT report\n            try:\n                sat_report = SATReport.query.filter_by(report_id=report.id).first()\n                if sat_report and sat_report.data_json:\n                    data = json.loads(sat_report.data_json)\n                    context_data = data.get('context', {})\n                    if context_data.get('DOCUMENT_TITLE'):\n                        report.document_title = context_data['DOCUMENT_TITLE']\n                    if context_data.get('PROJECT_REFERENCE'):\n                        report.project_reference = context_data['PROJECT_REFERENCE']\n            except Exception as sat_error:\n                current_app.logger.debug(f\"Could not get SAT data for report {report.id}: {sat_error}\")\n\n            # Determine status from approvals\n            if report.approvals_json:\n                try:\n                    approvals = json.loads(report.approvals_json)\n                    if approvals:\n                        statuses = [a.get(\"status\", \"pending\") for a in approvals]\n                        if \"rejected\" in statuses:\n                            report.status = \"rejected\"\n                        elif all(status == \"approved\" for status in statuses):\n                            report.status = \"approved\"\n                        elif any(status == \"approved\" for status in statuses):\n                            report.status = \"partially_approved\"\n                        else:\n                            report.status = \"pending\"\n                except Exception as approval_error:\n                    current_app.logger.debug(f\"Could not parse approvals for report {report.id}: {approval_error}\")\n                    report.status = \"pending\"\n                    \n    except Exception as e:\n        current_app.logger.error(f\"Could not retrieve report statistics for admin: {e}\", exc_info=True)\n        total_reports = 0\n        recent_reports = []\n\n    # System status\n    system_status = \"Online\" if db_connected else \"Offline\"\n\n    # Get settings\n    company_logo = SystemSettings.get_setting('company_logo', 'static/cully.png')\n    storage_location = SystemSettings.get_setting('default_storage_location', '/outputs/')\n\n    return render_template('admin_dashboard.html',\n                         users=users,\n                         total_users=total_users,\n                         pending_users=pending_users_count,\n                         total_reports=total_reports,\n                         db_status=db_connected,\n                         recent_activity=[],  # Placeholder for recent activity\n                         pending_users_list=pending_users_list,\n                         storage_location=storage_location,\n                         company_logo=company_logo)\n\n@dashboard_bp.route('/engineer')\n@role_required(['Engineer'])\ndef engineer():\n    \"\"\"Engineer dashboard\"\"\"\n    from models import Report, Notification\n    import json\n\n    # Get unread notifications count\n    try:\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count for engineer: {e}\")\n        unread_count = 0\n\n    # Get report statistics for current user\n    user_reports = Report.query.filter_by(user_email=current_user.email).all()\n\n    # Calculate statistics\n    total_reports = len(user_reports)\n    pending_reports = 0\n    approved_reports = 0\n\n    for report in user_reports:\n        if report.approvals_json:\n            try:\n                approvals = json.loads(report.approvals_json)\n                statuses = [a.get(\"status\", \"pending\") for a in approvals]\n\n                if all(status == \"approved\" for status in statuses):\n                    approved_reports += 1\n                elif any(status == \"pending\" for status in statuses):\n                    pending_reports += 1\n            except json.JSONDecodeError:\n                current_app.logger.warning(f\"Could not decode approvals_json for report ID: {report.id}\")\n                pending_reports += 1 # Consider it pending if decoding fails\n        else:\n            pending_reports += 1\n\n    stats = {\n        'total_reports': total_reports,\n        'pending_reports': pending_reports,\n        'approved_reports': approved_reports\n    }\n\n    return render_template('engineer_dashboard.html', stats=stats, unread_count=unread_count)\n\n@dashboard_bp.route('/automation_manager')\n@role_required(['Automation Manager'])\ndef automation_manager():\n    \"\"\"Automation Manager dashboard\"\"\"\n    from models import Report, Notification\n    import json\n\n    # Get unread notifications count\n    try:\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count for Automation Manager: {e}\")\n        unread_count = 0\n\n    # Get reports count for Automation Manager\n    reports_count = Report.query.filter_by(status='pending_review').count()\n\n    # Get pending approvals assigned to current Automation Manager\n    # Since approvals are stored as JSON in Report.approvals_json, we need to check those\n    pending_approvals = 0\n    try:\n        all_reports = Report.query.all()\n        for report in all_reports:\n            if report.approvals_json:\n                try:\n                    approvals = json.loads(report.approvals_json)\n                    for approval in approvals:\n                        if (approval.get('approver_email') == current_user.email and \n                            approval.get('status') == 'pending'):\n                            pending_approvals += 1\n                except json.JSONDecodeError:\n                    continue\n    except Exception as e:\n        current_app.logger.warning(f\"Could not count pending approvals for Automation Manager: {e}\")\n        pending_approvals = 0\n\n    # Get approved reports count\n    approved_reports_count = Report.query.filter_by(status='approved').count()\n\n    # Test database connection\n    try:\n        db_status = test_db_connection()\n    except Exception as e:\n        current_app.logger.warning(f\"Database connection test failed: {e}\")\n        db_status = False\n\n    return render_template('automation_manager_dashboard.html',\n                         unread_count=unread_count,\n                         reports_count=reports_count,\n                         pending_approvals=pending_approvals,\n                         approved_reports_count=approved_reports_count,\n                         db_status=db_status)\n\n    # Get team reports count (reports under Automation Manager's review)\n    team_reports_count = Report.query.filter_by(status='pending_review').count()\n\n    # Get recent pending reports for display\n    pending_reports = Report.query.filter_by(status='pending_review').limit(5).all()\n\n    # Enrich pending_reports with SATReport data if available\n    for report in pending_reports:\n        if hasattr(report, 'sat_report') and report.sat_report:\n            try:\n                data = json.loads(report.sat_report.data_json)\n                report.document_title = data.get('context', {}).get('DOCUMENT_TITLE', 'Untitled Report')\n                report.project_reference = data.get('context', {}).get('PROJECT_REFERENCE', 'N/A')\n            except Exception as e:\n                current_app.logger.warning(f\"Could not parse SATReport data for report {report.id}: {e}\")\n                report.document_title = 'Untitled Report'\n                report.project_reference = 'N/A'\n        else:\n            report.document_title = 'Untitled Report'\n            report.project_reference = 'N/A'\n\n    return render_template('automation_manager_dashboard.html',\n                         reports_count=reports_count,\n                         pending_approvals=pending_approvals,\n                         approved_reports=approved_reports_count,\n                         team_reports=team_reports_count,\n                         recent_reports=pending_reports,\n                         unread_count=unread_count)\n\n\n@dashboard_bp.route('/pm')\n@role_required(['PM'])\ndef pm():\n    \"\"\"Project Manager dashboard\"\"\"\n    from models import Report, Notification\n    import json\n\n    # Get unread notifications count\n    try:\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count for PM: {e}\")\n        unread_count = 0\n\n    # Get basic statistics for PM dashboard\n    try:\n        # For now, show placeholder data - in future this would be filtered by projects the PM manages\n        project_count = 5  # Placeholder\n        pending_deliverables = 3  # Placeholder\n        completed_reports = 12  # Placeholder\n        on_time_percentage = 85  # Placeholder\n\n        # Get recent reports (placeholder - would be project-specific in real implementation)\n        recent_reports = []\n\n        return render_template('pm_dashboard.html',\n                             project_count=project_count,\n                             pending_deliverables=pending_deliverables,\n                             completed_reports=completed_reports,\n                             on_time_percentage=on_time_percentage,\n                             recent_reports=recent_reports,\n                             unread_count=unread_count)\n    except Exception as e:\n        # If there's any error, provide default values\n        current_app.logger.error(f\"Error in PM dashboard: {e}\")\n        return render_template('pm_dashboard.html',\n                             project_count=0,\n                             pending_deliverables=0,\n                             completed_reports=0,\n                             on_time_percentage=0,\n                             recent_reports=[],\n                             unread_count=0)\n\n# Legacy redirects for dashboard routes\n@dashboard_bp.route('/technical-manager')\n@role_required(['Automation Manager'])\ndef technical_manager():\n    \"\"\"Legacy redirect for TM dashboard\"\"\"\n    return redirect(url_for('dashboard.automation_manager'))\n\n@dashboard_bp.route('/project-manager')\n@role_required(['PM'])\ndef project_manager():\n    \"\"\"Legacy redirect for PM dashboard\"\"\"\n    return redirect(url_for('dashboard.pm'))\n\n@dashboard_bp.route('/user-management')\n@admin_required\ndef user_management():\n    \"\"\"User management page\"\"\"\n    status_filter = request.args.get('status', 'All')\n\n    if status_filter == 'All':\n        users = User.query.all()\n    else:\n        users = User.query.filter_by(status=status_filter).all()\n\n    return render_template('user_management.html', users=users, current_filter=status_filter)\n\n@dashboard_bp.route('/approve-user/<int:user_id>', methods=['POST'])\n@admin_required\ndef approve_user(user_id):\n    \"\"\"Approve a user and assign role\"\"\"\n    user = User.query.get_or_404(user_id)\n    role = request.form.get('role')\n\n    if role not in ['Admin', 'Engineer', 'Automation Manager', 'PM']:\n        flash('Invalid role selection.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    user.role = role\n    user.status = 'Active'\n\n    try:\n        db.session.commit()\n        flash(f'User {user.full_name} approved as {role}.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to approve user {user.full_name} ({user_id}): {e}\")\n        flash('Failed to approve user.', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/disable-user/<int:user_id>', methods=['POST'])\n@admin_required\ndef disable_user(user_id):\n    \"\"\"Disable a user\"\"\"\n    user = User.query.get_or_404(user_id)\n\n    if user.email == current_user.email:\n        flash('You cannot disable your own account.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    user.status = 'Disabled'\n\n    try:\n        db.session.commit()\n        flash(f'User {user.full_name} disabled.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to disable user {user.full_name} ({user_id}): {e}\")\n        flash('Failed to disable user.', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/enable-user/<int:user_id>', methods=['POST'])\n@admin_required\ndef enable_user(user_id):\n    \"\"\"Enable a user\"\"\"\n    user = User.query.get_or_404(user_id)\n    user.status = 'Active'\n\n    try:\n        db.session.commit()\n        flash(f'User {user.full_name} enabled.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to enable user {user.full_name} ({user_id}): {e}\")\n        flash('Failed to enable user.', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/change-user-role/<int:user_id>', methods=['POST'])\n@admin_required\ndef change_user_role(user_id):\n    \"\"\"Change a user's role\"\"\"\n    user = User.query.get_or_404(user_id)\n    new_role = request.form.get('role')\n\n    if user.email == current_user.email:\n        flash('You cannot change your own role.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    if new_role not in ['Admin', 'Engineer', 'Automation Manager', 'PM']:\n        flash('Invalid role selection.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    old_role = user.role\n    user.role = new_role\n\n    try:\n        db.session.commit()\n        flash(f'User {user.full_name} role changed from {old_role} to {new_role}.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to change role for user {user.full_name} ({user_id}): {e}\")\n        flash('Failed to change user role.', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/delete-user/<int:user_id>', methods=['POST'])\n@admin_required\ndef delete_user(user_id):\n    \"\"\"Delete a user permanently\"\"\"\n    user = User.query.get_or_404(user_id)\n\n    if user.email == current_user.email:\n        flash('You cannot delete your own account.', 'error')\n        return redirect(url_for('dashboard.user_management'))\n\n    user_name = user.full_name\n    user_email = user.email\n\n    try:\n        # Delete associated notifications first (to maintain referential integrity)\n        from models import Notification\n        Notification.query.filter_by(user_email=user_email).delete()\n\n        # Delete the user\n        db.session.delete(user)\n        db.session.commit()\n        flash(f'User {user_name} ({user_email}) has been permanently deleted.', 'success')\n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Failed to delete user {user_name} ({user_email}, ID: {user_id}): {e}\")\n        flash(f'Failed to delete user: {str(e)}', 'error')\n\n    return redirect(url_for('dashboard.user_management'))\n\n@dashboard_bp.route('/system-settings')\n@admin_required\ndef system_settings():\n    \"\"\"System settings page\"\"\"\n    company_logo = SystemSettings.get_setting('company_logo', 'static/cully.png')\n    storage_location = SystemSettings.get_setting('default_storage_location', '/outputs/')\n\n    return render_template('system_settings.html',\n                         company_logo=company_logo,\n                         storage_location=storage_location)\n\n@dashboard_bp.route('/update-settings', methods=['POST'])\n@admin_required\ndef update_settings():\n    \"\"\"Update system settings\"\"\"\n    storage_location = request.form.get('storage_location', '').strip()\n\n    if storage_location:\n        SystemSettings.set_setting('default_storage_location', storage_location)\n        flash('Settings saved successfully.', 'success')\n    else:\n        flash('Storage location is required.', 'error')\n\n    return redirect(url_for('dashboard.system_settings'))\n\n@dashboard_bp.route('/reports')\n@admin_required\ndef admin_reports():\n    \"\"\"Admin reports view - show all system reports\"\"\"\n    from models import Report, SATReport\n    import json\n    from datetime import datetime, timedelta\n    \n    try:\n        # Calculate this month start for template\n        now = datetime.now()\n        this_month_start = datetime(now.year, now.month, 1)\n        \n        # Get all reports - don't filter, get everything\n        reports = Report.query.order_by(Report.created_at.desc()).all()\n        reports_data = []\n        \n        current_app.logger.info(f\"Admin reports: Found {len(reports)} total reports in database\")\n        \n        for report in reports:\n            try:\n                # Get SAT report data if it exists\n                sat_report = SATReport.query.filter_by(report_id=report.id).first()\n                \n                # Start with basic report data\n                project_name = report.document_title or 'Untitled Report'\n                client_name = report.client_name or ''\n                location = report.project_reference or ''\n                status = 'Draft'\n                \n                # If SAT report exists, try to get enhanced data\n                if sat_report and sat_report.data_json:\n                    try:\n                        stored_data = json.loads(sat_report.data_json)\n                        context_data = stored_data.get('context', {})\n                        \n                        # Override with SAT data if available\n                        if context_data.get('DOCUMENT_TITLE'):\n                            project_name = context_data['DOCUMENT_TITLE']\n                        if context_data.get('CLIENT_NAME'):\n                            client_name = context_data['CLIENT_NAME']\n                        if context_data.get('PROJECT_REFERENCE'):\n                            location = context_data['PROJECT_REFERENCE']\n                            \n                    except (json.JSONDecodeError, KeyError, TypeError) as e:\n                        current_app.logger.warning(f\"Could not decode SATReport data for report ID {report.id}: {e}\")\n                \n                # Determine status from approvals\n                if report.approvals_json:\n                    try:\n                        approvals = json.loads(report.approvals_json)\n                        if approvals:\n                            statuses = [a.get(\"status\", \"pending\") for a in approvals]\n                            if \"rejected\" in statuses:\n                                status = \"Rejected\"\n                            elif all(s == \"approved\" for s in statuses):\n                                status = \"Approved\"\n                            elif any(s == \"approved\" for s in statuses):\n                                status = \"Partially Approved\"\n                            else:\n                                status = \"Pending Review\"\n                        else:\n                            status = \"Draft\"\n                    except (json.JSONDecodeError, TypeError):\n                        status = \"Pending Review\"\n                else:\n                    status = \"Draft\"\n                \n                # Add report to list\n                reports_data.append({\n                    'id': report.id,\n                    'project_name': project_name,\n                    'client_name': client_name,\n                    'location': location,\n                    'created_by': report.user_email,\n                    'status': status,\n                    'created_date': report.created_at\n                })\n                \n                current_app.logger.debug(f\"Processed report {report.id}: {project_name}\")\n                \n            except Exception as report_error:\n                current_app.logger.error(f\"Error processing report {report.id}: {report_error}\", exc_info=True)\n                # Add basic report info even if processing fails\n                reports_data.append({\n                    'id': report.id,\n                    'project_name': report.document_title or f'Report {report.id}',\n                    'client_name': report.client_name or '',\n                    'location': report.project_reference or '',\n                    'created_by': report.user_email,\n                    'status': 'Error',\n                    'created_date': report.created_at\n                })\n        \n        current_app.logger.info(f\"Admin reports: Successfully processed {len(reports_data)} reports for display\")\n        \n        return render_template('admin_reports.html', \n                             reports=reports_data,\n                             this_month_start=this_month_start)\n        \n    except Exception as e:\n        current_app.logger.error(f\"Error in admin_reports function: {e}\", exc_info=True)\n        \n        # Try to get basic report count for debugging\n        try:\n            report_count = Report.query.count()\n            current_app.logger.info(f\"Database has {report_count} reports total\")\n        except Exception as count_error:\n            current_app.logger.error(f\"Cannot even count reports: {count_error}\")\n            \n        # Still provide this_month_start even on error\n        now = datetime.now()\n        this_month_start = datetime(now.year, now.month, 1)\n        return render_template('admin_reports.html', \n                             reports=[],\n                             this_month_start=this_month_start)\n\n@dashboard_bp.route('/create-report')\n@role_required(['Engineer'])\ndef create_report():\n    \"\"\"Create report - redirect to report type selector\"\"\"\n    return redirect(url_for('reports.new'))\n\n@dashboard_bp.route('/db-status')\n@login_required\ndef db_status():\n    \"\"\"Check database connection status\"\"\"\n    try:\n        # Try to connect to database\n        db.engine.connect().close()\n        return jsonify({'status': 'connected', 'message': 'Database connection successful'})\n    except Exception as e:\n        current_app.logger.error(f\"Database status check failed: {e}\")\n        return jsonify({'status': 'error', 'message': f'Database connection failed: {str(e)}'}), 500\n\n@dashboard_bp.route('/dashboard/api/admin/users')\n@admin_required\ndef api_admin_users():\n    \"\"\"API endpoint for user management data\"\"\"\n    try:\n        users = User.query.all()\n        users_data = []\n        for user in users:\n            users_data.append({\n                'id': user.id,\n                'full_name': user.full_name,\n                'email': user.email,\n                'role': user.role,\n                'status': user.status,\n                'created_date': user.created_date.isoformat() if user.created_date else None\n            })\n\n        return jsonify({\n            'success': True,\n            'users': users_data\n        })\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching users: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n@dashboard_bp.route('/dashboard/api/admin/reports')\n@admin_required\ndef api_admin_reports():\n    \"\"\"API endpoint for reports data\"\"\"\n    try:\n        reports = Report.query.order_by(Report.created_at.desc()).limit(50).all()\n        reports_data = []\n\n        for report in reports:\n            # Get report title from SAT data if available\n            title = 'Untitled Report'\n            if hasattr(report, 'sat_report') and report.sat_report:\n                try:\n                    import json\n                    data = json.loads(report.sat_report.data_json)\n                    title = data.get('context', {}).get('DOCUMENT_TITLE', 'Untitled Report')\n                except:\n                    pass\n\n            # Determine status\n            status = 'pending'\n            if report.approvals_json:\n                try:\n                    import json\n                    approvals = json.loads(report.approvals_json)\n                    statuses = [a.get(\"status\", \"pending\") for a in approvals]\n                    if \"rejected\" in statuses:\n                        status = \"rejected\"\n                    elif all(s == \"approved\" for s in statuses):\n                        status = \"approved\"\n                    elif any(s == \"approved\" for s in statuses):\n                        status = \"partially_approved\"\n                except:\n                    pass\n\n            reports_data.append({\n                'id': report.id,\n                'title': title,\n                'user_email': report.user_email,\n                'status': status,\n                'created_at': report.created_at.isoformat() if report.created_at else None\n            })\n\n        return jsonify({\n            'success': True,\n            'reports': reports_data\n        })\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching reports: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n@dashboard_bp.route('/dashboard/api/admin/settings')\n@admin_required\ndef api_admin_settings():\n    \"\"\"API endpoint for system settings\"\"\"\n    try:\n        storage_location = SystemSettings.get_setting('default_storage_location', '/outputs/')\n        company_logo = SystemSettings.get_setting('company_logo', 'static/cully.png')\n\n        return jsonify({\n            'success': True,\n            'settings': {\n                'storage_location': storage_location,\n                'company_logo': company_logo\n            }\n        })\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching settings: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n@dashboard_bp.route('/dashboard/api/admin/stats')\n@admin_required\ndef api_admin_stats():\n    \"\"\"API endpoint for dashboard statistics\"\"\"\n    try:\n        users = User.query.all()\n        total_users = len(users)\n        pending_users = len([u for u in users if u.status == 'Pending'])\n        total_reports = Report.query.count()\n\n        return jsonify({\n            'success': True,\n            'stats': {\n                'total_users': total_users,\n                'pending_users': pending_users,\n                'total_reports': total_reports\n            }\n        })\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching stats: {e}\")\n        return jsonify({'success': False, 'error': str(e)})\n\n@dashboard_bp.route('/debug/reports')\n@admin_required\ndef debug_reports():\n    \"\"\"Debug endpoint to check report data\"\"\"\n    try:\n        from models import Report, SATReport\n        \n        # Get basic report count\n        total_reports = Report.query.count()\n        \n        # Get all reports with basic info\n        reports = Report.query.all()\n        report_info = []\n        \n        for report in reports:\n            sat_report = SATReport.query.filter_by(report_id=report.id).first()\n            report_info.append({\n                'id': report.id,\n                'type': report.type,\n                'user_email': report.user_email,\n                'document_title': report.document_title,\n                'created_at': str(report.created_at),\n                'has_sat_data': sat_report is not None\n            })\n        \n        return jsonify({\n            'success': True,\n            'total_reports': total_reports,\n            'reports': report_info\n        })\n        \n    except Exception as e:\n        current_app.logger.error(f\"Debug reports error: {e}\")\n        return jsonify({\n            'success': False,\n            'error': str(e)\n        })\n\n@dashboard_bp.route('/revoke-approval/<report_id>', methods=['POST'])\n@admin_required\ndef revoke_approval(report_id):\n    \"\"\"Revoke approval for a report\"\"\"\n    from models import Report, Notification\n    import json\n    \n    try:\n        report = Report.query.get(report_id)\n        if not report:\n            return jsonify({'success': False, 'message': 'Report not found'}), 404\n        \n        # Get the comment from request\n        data = request.get_json()\n        comment = data.get('comment', '').strip()\n        \n        if not comment:\n            return jsonify({'success': False, 'message': 'Comment is required for revocation'}), 400\n        \n        # Check if report has approval workflow before resetting\n        current_approvals = json.loads(report.approvals_json) if report.approvals_json else []\n        \n        if not current_approvals:\n            # If no approval workflow exists, just unlock the report\n            report.locked = False\n            report.status = 'DRAFT'\n        else:\n            # Reset approvals and unlock the report\n            report.approvals_json = json.dumps([])\n            report.locked = False\n            report.status = 'DRAFT'\n        \n        # Create notification for the report creator\n        try:\n            Notification.create_notification(\n                user_email=report.user_email,\n                title='Report Approval Revoked',\n                message=f'Your report \"{report.document_title or \"SAT Report\"}\" approval has been revoked by admin. Reason: {comment}',\n                notification_type='approval_revoked',\n                submission_id=report_id,\n                action_url=f'/status/{report_id}'\n            )\n        except Exception as notif_error:\n            current_app.logger.warning(f\"Could not create notification: {notif_error}\")\n        \n        db.session.commit()\n        \n        current_app.logger.info(f\"Report {report_id} approval revoked by admin {current_user.email}. Reason: {comment}\")\n        return jsonify({\n            'success': True, \n            'message': 'Report unlocked and status reset successfully. You can now edit the report.'\n        })\n        \n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Error revoking approval for report {report_id}: {e}\")\n        return jsonify({'success': False, 'message': 'Failed to revoke approval'}), 500\n\n@dashboard_bp.route('/delete-report/<report_id>', methods=['POST'])\n@admin_required\ndef delete_report(report_id):\n    \"\"\"Delete a report permanently\"\"\"\n    from models import Report, SATReport\n    \n    try:\n        # Get the report\n        report = Report.query.get(report_id)\n        if not report:\n            return jsonify({'success': False, 'message': 'Report not found'}), 404\n        \n        # Delete associated SAT report data first\n        sat_report = SATReport.query.filter_by(report_id=report_id).first()\n        if sat_report:\n            db.session.delete(sat_report)\n        \n        # Delete the main report\n        db.session.delete(report)\n        db.session.commit()\n        \n        current_app.logger.info(f\"Report {report_id} deleted by admin {current_user.email}\")\n        return jsonify({'success': True, 'message': 'Report deleted successfully'})\n        \n    except Exception as e:\n        db.session.rollback()\n        current_app.logger.error(f\"Error deleting report {report_id}: {e}\")\n        return jsonify({'success': False, 'message': 'Failed to delete report'}), 500\n\n@dashboard_bp.route('/my-reports')\n@role_required(['Engineer'])\ndef my_reports():\n    \"\"\"View engineer's own reports\"\"\"\n    from models import Report, SATReport\n    import json\n\n    # Get reports created by current user\n    reports = Report.query.filter_by(user_email=current_user.email).order_by(Report.updated_at.desc()).all()\n\n    report_list = []\n    for report in reports:\n        sat_report = SATReport.query.filter_by(report_id=report.id).first()\n        if not sat_report:\n            continue\n\n        try:\n            stored_data = json.loads(sat_report.data_json)\n        except json.JSONDecodeError:\n            current_app.logger.warning(f\"Could not decode SATReport data for report ID: {report.id}\")\n            stored_data = {} # Handle malformed JSON\n\n        try:\n            approvals = json.loads(report.approvals_json) if report.approvals_json else []\n        except json.JSONDecodeError:\n            current_app.logger.warning(f\"Could not decode approvals_json for report ID: {report.id}\")\n            approvals = [] # Handle malformed JSON\n\n        # Determine overall status\n        statuses = [a.get(\"status\", \"pending\") for a in approvals]\n        if \"rejected\" in statuses:\n            overall_status = \"rejected\"\n        elif all(status == \"approved\" for status in statuses):\n            overall_status = \"approved\"\n        elif any(status == \"approved\" for status in statuses):\n            overall_status = \"partially_approved\"\n        else:\n            overall_status = \"pending\"\n\n        report_list.append({\n            \"id\": report.id,\n            \"document_title\": stored_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\"),\n            \"client_name\": stored_data.get(\"context\", {}).get(\"CLIENT_NAME\", \"\"),\n            \"project_reference\": stored_data.get(\"context\", {}).get(\"PROJECT_REFERENCE\", \"\"),\n            \"created_at\": report.created_at,\n            \"updated_at\": report.updated_at,\n            \"status\": overall_status,\n            \"locked\": report.locked\n        })\n\n    return render_template('my_reports.html', reports=report_list)\n\n@dashboard_bp.route('/reviews')\n@login_required\n@role_required(['Automation Manager', 'Admin'])\ndef reviews():\n    \"\"\"Reviews and Approvals page for Automation Manager\"\"\"\n    from models import Report, SATReport\n    import json\n\n    # Get all reports that need approval by this Automation Manager\n    pending_reviews = []\n    try:\n        all_reports = Report.query.all()\n        for report in all_reports:\n            if report.approvals_json:\n                try:\n                    approvals = json.loads(report.approvals_json)\n                    for approval in approvals:\n                        if (approval.get('stage') == 1 and  # Automation Manager stage\n                            approval.get('status') == 'pending'):\n                            \n                            # Get SAT report data for context\n                            sat_report = SATReport.query.filter_by(report_id=report.id).first()\n                            report_data = {}\n                            if sat_report:\n                                try:\n                                    stored_data = json.loads(sat_report.data_json)\n                                    report_data = stored_data.get('context', {})\n                                except json.JSONDecodeError:\n                                    pass\n                            \n                            pending_reviews.append({\n                                'id': report.id,\n                                'document_title': report_data.get('DOCUMENT_TITLE', 'SAT Report'),\n                                'client_name': report_data.get('CLIENT_NAME', ''),\n                                'project_reference': report_data.get('PROJECT_REFERENCE', ''),\n                                'prepared_by': report_data.get('PREPARED_BY', ''),\n                                'user_email': report.user_email,\n                                'created_at': report.created_at,\n                                'updated_at': report.updated_at,\n                                'stage': approval.get('stage'),\n                                'approver_email': approval.get('approver_email')\n                            })\n                            break  # Only add once per report\n                except json.JSONDecodeError:\n                    continue\n    except Exception as e:\n        current_app.logger.error(f\"Error getting pending reviews: {e}\")\n    \n    return render_template('automation_manager_reviews.html', \n                         pending_reviews=pending_reviews,\n                         unread_count=0)","size_bytes":38361},"routes/io_builder.py":{"content":"from flask import Blueprint, request, jsonify, current_app, render_template\nfrom flask_login import login_required, current_user\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\nfrom models import db, ModuleSpec\nimport time\nfrom urllib.parse import quote\nimport logging\n\nio_builder_bp = Blueprint('io_builder', __name__)\n\ndef get_unread_count():\n    \"\"\"Get unread notifications count with error handling\"\"\"\n    try:\n        from models import Notification\n        return Notification.query.filter_by(\n            user_email=current_user.email, \n            read=False\n        ).count()\n    except Exception as e:\n        current_app.logger.warning(f\"Could not get unread count: {e}\")\n        return 0\n\n@io_builder_bp.route('/')\n@login_required\ndef index():\n    \"\"\"IO Builder main page\"\"\"\n    try:\n        unread_count = get_unread_count()\n        return render_template('io_builder.html', unread_count=unread_count)\n    except Exception as e:\n        current_app.logger.error(f\"Error rendering io_builder index: {e}\")\n        return render_template('io_builder.html', unread_count=0)\n\ndef get_comprehensive_module_database():\n    \"\"\"Comprehensive database of industrial I/O modules\"\"\"\n    return {\n        # ABB Modules - Comprehensive List\n        'ABB_DA501': {\n            'description': 'ABB DA501 - 16 Channel Digital Input, 24VDC; 4 Analog Input, U, I, RTD; 2 Analog Output, U, I; 8 Configurable DI/DO, 24VDC 0.5A',\n            'digital_inputs': 24,  # 16 fixed DI + 8 configurable as DI\n            'digital_outputs': 8,  # 8 configurable as DO\n            'analog_inputs': 4,\n            'analog_outputs': 2,\n            'voltage_range': '24 VDC',\n            'current_range': '4-20mA',\n            'signal_type': 'Mixed',\n            'verified': True\n        },\n        'DA501': {\n            'description': 'DA501 - 16 Channel Digital Input, 24VDC; 4 Analog Input, U, I, RTD; 2 Analog Output, U, I; 8 Configurable DI/DO, 24VDC 0.5A',\n            'digital_inputs': 24,\n            'digital_outputs': 8,\n            'analog_inputs': 4,\n            'analog_outputs': 2,\n            'voltage_range': '24 VDC',\n            'current_range': '4-20mA',\n            'signal_type': 'Mixed',\n            'verified': True\n        },\n        'ABB_DI810': {\n            'description': 'ABB DI810 - 16-channel 24 VDC Digital Input Module',\n            'digital_inputs': 16,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital',\n            'verified': True\n        },\n        'DI810': {\n            'description': 'DI810 - 16-channel 24 VDC Digital Input Module',\n            'digital_inputs': 16,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital',\n            'verified': True\n        },\n        'ABB_DO810': {\n            'description': 'ABB DO810 - 16-channel 24 VDC Digital Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 16,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital',\n            'verified': True\n        },\n        'DO810': {\n            'description': 'DO810 - 16-channel 24 VDC Digital Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 16,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital',\n            'verified': True\n        },\n        'ABB_AI810': {\n            'description': 'ABB AI810 - 8-channel Analog Input Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 8,\n            'analog_outputs': 0,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '12-bit',\n            'signal_type': 'Analog',\n            'verified': True\n        },\n        'AI810': {\n            'description': 'AI810 - 8-channel Analog Input Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 8,\n            'analog_outputs': 0,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '12-bit',\n            'signal_type': 'Analog',\n            'verified': True\n        },\n        'ABB_AO810': {\n            'description': 'ABB AO810 - 8-channel Analog Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 8,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '12-bit',\n            'signal_type': 'Analog',\n            'verified': True\n        },\n        'AO810': {\n            'description': 'AO810 - 8-channel Analog Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 8,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '12-bit',\n            'signal_type': 'Analog',\n            'verified': True\n        },\n\n        # Siemens Modules\n        'SIEMENS_SM1221': {\n            'description': 'Siemens SM1221 - 16-channel Digital Input Module',\n            'digital_inputs': 16,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital',\n            'verified': True\n        },\n        'SM1221': {\n            'description': 'SM1221 - 16-channel Digital Input Module',\n            'digital_inputs': 16,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital',\n            'verified': True\n        },\n        'SIEMENS_SM1222': {\n            'description': 'Siemens SM1222 - 16-channel Digital Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 16,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital',\n            'verified': True\n        },\n        'SM1222': {\n            'description': 'SM1222 - 16-channel Digital Output Module',\n            'digital_inputs': 0,\n            'digital_outputs': 16,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'signal_type': 'Digital',\n            'verified': True\n        },\n        'SIEMENS_SM1231': {\n            'description': 'Siemens SM1231 - 8-channel Analog Input Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 8,\n            'analog_outputs': 0,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '16-bit',\n            'signal_type': 'Analog',\n            'verified': True\n        },\n        'SM1231': {\n            'description': 'SM1231 - 8-channel Analog Input Module',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 8,\n            'analog_outputs': 0,\n            'voltage_range': '0-10V',\n            'current_range': '4-20mA',\n            'resolution': '16-bit',\n            'signal_type': 'Analog',\n            'verified': True\n        }\n    }\n\n@io_builder_bp.route('/api/module-lookup', methods=['POST'])\ndef module_lookup():\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({'success': False, 'message': 'No data provided'}), 400\n\n        vendor = data.get('vendor', '').strip().upper()\n        model = data.get('model', '').strip().upper()\n\n        if not vendor or not model:\n            return jsonify({'success': False, 'message': 'Vendor and model are required'}), 400\n\n        # Try to find in database first\n        module = IOModule.query.filter_by(vendor=vendor, model=model).first()\n\n        if module:\n            current_app.logger.info(f\"Found module in database: {vendor} {model}\")\n            return jsonify({\n                'success': True,\n                'module': {\n                    'description': module.description,\n                    'digital_inputs': module.digital_inputs,\n                    'digital_outputs': module.digital_outputs,\n                    'analog_inputs': module.analog_inputs,\n                    'analog_outputs': module.analog_outputs,\n                    'total_channels': module.total_channels\n                },\n                'source': 'database'\n            })\n\n        # If not found in database, try to fetch from online\n        module_info = fetch_module_from_online(vendor, model)\n\n        if module_info:\n            # Save to database for future use\n            new_module = IOModule(\n                vendor=vendor,\n                model=model,\n                description=module_info.get('description', ''),\n                digital_inputs=module_info.get('digital_inputs', 0),\n                digital_outputs=module_info.get('digital_outputs', 0),\n                analog_inputs=module_info.get('analog_inputs', 0),\n                analog_outputs=module_info.get('analog_outputs', 0),\n                total_channels=module_info.get('total_channels', 0)\n            )\n\n            db.session.add(new_module)\n            db.session.commit()\n\n            current_app.logger.info(f\"Fetched and saved module: {vendor} {model}\")\n            return jsonify({\n                'success': True,\n                'module': module_info,\n                'source': 'online'\n            })\n\n        return jsonify({'success': False, 'message': f'Module {vendor} {model} not found'}), 404\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in module lookup: {str(e)}\")\n        return jsonify({'success': False, 'message': 'Internal server error'}), 500\n\ndef attempt_web_lookup(company, model):\n    \"\"\"Attempt to find module specifications online\"\"\"\n    try:\n        current_app.logger.info(f\"Starting web lookup for {company} {model}\")\n\n        # Search queries\n        search_queries = [\n            f\"{company} {model} datasheet\",\n            f\"{company} {model} specifications\",\n            f\"{company} {model} I/O module\",\n            f\"{model} industrial automation module\"\n        ]\n\n        headers = {\n            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n            'Accept-Language': 'en-US,en;q=0.5',\n        }\n\n        for query in search_queries:\n            try:\n                current_app.logger.info(f\"Searching: {query}\")\n                search_url = f\"https://duckduckgo.com/html/?q={quote(query)}\"\n\n                response = requests.get(search_url, headers=headers, timeout=10)\n                if response.status_code == 200:\n                    soup = BeautifulSoup(response.content, 'html.parser')\n\n                    # Extract links\n                    links = soup.find_all('a', href=True)\n                    relevant_links = []\n\n                    for link in links:\n                        href = link.get('href', '')\n                        if any(domain in href.lower() for domain in [company.lower(), 'automation', 'industrial', 'datasheet']):\n                            if 'http' in href:\n                                relevant_links.append(href)\n                                if len(relevant_links) >= 2:\n                                    break\n\n                    # Try to scrape relevant links\n                    for link_url in relevant_links:\n                        try:\n                            link_response = requests.get(link_url, headers=headers, timeout=8)\n                            if link_response.status_code == 200:\n                                link_soup = BeautifulSoup(link_response.content, 'html.parser')\n                                parsed_spec = parse_specifications_from_content(link_soup, company, model)\n                                if parsed_spec:\n                                    current_app.logger.info(f\"Successfully parsed specs from {link_url}\")\n                                    return parsed_spec\n                        except Exception as link_error:\n                            current_app.logger.warning(f\"Error processing link {link_url}: {link_error}\")\n                            continue\n\n            except Exception as search_error:\n                current_app.logger.warning(f\"Search failed for '{query}': {search_error}\")\n                continue\n\n        return None\n\n    except Exception as e:\n        current_app.logger.error(f\"Web lookup error: {e}\")\n        return None\n\ndef parse_specifications_from_content(soup, company, model):\n    \"\"\"Parse module specifications from HTML content\"\"\"\n    try:\n        text_content = soup.get_text().lower()\n\n        spec = {\n            'description': f'{company} {model}',\n            'digital_inputs': 0,\n            'digital_outputs': 0,\n            'analog_inputs': 0,\n            'analog_outputs': 0,\n            'voltage_range': '24 VDC',\n            'current_range': '4-20mA',\n            'signal_type': 'Unknown',\n            'verified': True\n        }\n\n        # Enhanced regex patterns for I/O detection\n        io_patterns = {\n            'digital_inputs': [\n                r'(\\d+)\\s*(?:ch|channel[s]?)\\s*(?:24\\s*v\\s*)?digital\\s*input[s]?',\n                r'digital\\s*input[s]?[:\\s]*(\\d+)\\s*(?:ch|channel[s]?)?',\n                r'(\\d+)\\s*di\\b',\n                r'(\\d+)\\s*x\\s*di\\b',\n                r'di\\s*(\\d+)',\n                r'(\\d+)\\s*digital\\s*in'\n            ],\n            'digital_outputs': [\n                r'(\\d+)\\s*(?:ch|channel[s]?)\\s*(?:24\\s*v\\s*)?digital\\s*output[s]?',\n                r'digital\\s*output[s]?[:\\s]*(\\d+)\\s*(?:ch|channel[s]?)?',\n                r'(\\d+)\\s*do\\b',\n                r'(\\d+)\\s*x\\s*do\\b',\n                r'do\\s*(\\d+)',\n                r'(\\d+)\\s*digital\\s*out'\n            ],\n            'analog_inputs': [\n                r'(\\d+)\\s*(?:ch|channel[s]?)\\s*analog\\s*input[s]?',\n                r'analog\\s*input[s]?[:\\s]*(\\d+)\\s*(?:ch|channel[s]?)?',\n                r'(\\d+)\\s*ai\\b',\n                r'(\\d+)\\s*x\\s*ai\\b',\n                r'ai\\s*(\\d+)',\n                r'(\\d+)\\s*analog\\s*in'\n            ],\n            'analog_outputs': [\n                r'(\\d+)\\s*(?:ch|channel[s]?)\\s*analog\\s*output[s]?',\n                r'analog\\s*output[s]?[:\\s]*(\\d+)\\s*(?:ch|channel[s]?)?',\n                r'(\\d+)\\s*ao\\b',\n                r'(\\d+)\\s*x\\s*ao\\b',\n                r'ao\\s*(\\d+)',\n                r'(\\d+)\\s*analog\\s*out'\n            ]\n        }\n\n        # Extract I/O counts\n        for io_type, patterns in io_patterns.items():\n            for pattern in patterns:\n                matches = re.findall(pattern, text_content, re.IGNORECASE)\n                if matches:\n                    try:\n                        value = int(matches[0])\n                        if value > 0:\n                            spec[io_type] = value\n                            current_app.logger.info(f\"Found {io_type}: {value}\")\n                            break\n                    except (ValueError, IndexError):\n                        continue\n\n        # Extract voltage and current ranges\n        voltage_matches = re.findall(r'(\\d+(?:\\.\\d+)?)\\s*[-–to]\\s*(\\d+(?:\\.\\d+)?)\\s*v', text_content, re.IGNORECASE)\n        if voltage_matches:\n            spec['voltage_range'] = f\"{voltage_matches[0][0]}-{voltage_matches[0][1]}V\"\n\n        current_matches = re.findall(r'(\\d+(?:\\.\\d+)?)\\s*[-–to]\\s*(\\d+(?:\\.\\d+)?)\\s*ma', text_content, re.IGNORECASE)\n        if current_matches:\n            spec['current_range'] = f\"{current_matches[0][0]}-{current_matches[0][1]}mA\"\n\n        # Determine signal type\n        total_digital = spec['digital_inputs'] + spec['digital_outputs']\n        total_analog = spec['analog_inputs'] + spec['analog_outputs']\n\n        if total_digital > 0 and total_analog > 0:\n            spec['signal_type'] = 'Mixed'\n        elif total_digital > 0:\n            spec['signal_type'] = 'Digital'\n        elif total_analog > 0:\n            spec['signal_type'] = 'Analog'\n\n        # Only return if we found valid I/O data\n        if any(spec[key] > 0 for key in ['digital_inputs', 'digital_outputs', 'analog_inputs', 'analog_outputs']):\n            current_app.logger.info(f\"Successfully parsed web specifications\")\n            return spec\n\n        return None\n\n    except Exception as e:\n        current_app.logger.error(f\"Error parsing specifications: {e}\")\n        return None\n\n@io_builder_bp.route('/api/generate-io-table', methods=['POST'])\ndef generate_io_table():\n    try:\n        data = request.get_json()\n        if not data:\n            return jsonify({'success': False, 'message': 'No data provided'}), 400\n\n        digital_inputs = data.get('digital_inputs', 0)\n        digital_outputs = data.get('digital_outputs', 0)\n        analog_inputs = data.get('analog_inputs', 0)\n        analog_outputs = data.get('analog_outputs', 0)\n        starting_sno = data.get('starting_sno', 1)\n        rack_no = data.get('rack_no', 0)\n        position = data.get('position', 1)\n\n        io_data = {\n            'digital_inputs': [],\n            'digital_outputs': [],\n            'analog_inputs': [],\n            'analog_outputs': []\n        }\n\n        current_sno = starting_sno\n\n        # Generate Digital Inputs\n        for i in range(digital_inputs):\n            io_data['digital_inputs'].append({\n                'sno': current_sno,\n                'tag': f'DI_{rack_no:02d}_{position:02d}_{i+1:02d}',\n                'description': f'Digital Input {i+1}',\n                'rack': rack_no,\n                'slot': position,\n                'channel': i+1\n            })\n            current_sno += 1\n\n        # Generate Digital Outputs\n        for i in range(digital_outputs):\n            io_data['digital_outputs'].append({\n                'sno': current_sno,\n                'tag': f'DO_{rack_no:02d}_{position:02d}_{i+1:02d}',\n                'description': f'Digital Output {i+1}',\n                'rack': rack_no,\n                'slot': position,\n                'channel': i+1\n            })\n            current_sno += 1\n\n        # Generate Analog Inputs\n        for i in range(analog_inputs):\n            io_data['analog_inputs'].append({\n                'sno': current_sno,\n                'tag': f'AI_{rack_no:02d}_{position:02d}_{i+1:02d}',\n                'description': f'Analog Input {i+1}',\n                'rack': rack_no,\n                'slot': position,\n                'channel': i+1,\n                'range': '4-20mA',\n                'units': 'mA'\n            })\n            current_sno += 1\n\n        # Generate Analog Outputs\n        for i in range(analog_outputs):\n            io_data['analog_outputs'].append({\n                'sno': current_sno,\n                'tag': f'AO_{rack_no:02d}_{position:02d}_{i+1:02d}',\n                'description': f'Analog Output {i+1}',\n                'rack': rack_no,\n                'slot': position,\n                'channel': i+1,\n                'range': '4-20mA',\n                'units': 'mA'\n            })\n            current_sno += 1\n\n        return jsonify({'success': True, 'io_data': io_data})\n\n    except Exception as e:\n        current_app.logger.error(f\"Error generating I/O table: {str(e)}\")\n        return jsonify({'success': False, 'message': 'Error generating I/O table'}), 500\n\n@io_builder_bp.route('/api/save-custom-module', methods=['POST'])\n@login_required\ndef save_custom_module():\n    \"\"\"Save custom module specification to database\"\"\"\n    try:\n        data = request.get_json()\n\n        spec = ModuleSpec(\n            company=data.get('company', '').upper(),\n            model=data.get('model', '').upper(),\n            description=data.get('description', ''),\n            digital_inputs=data.get('digital_inputs', 0),\n            digital_outputs=data.get('digital_outputs', 0),\n            analog_inputs=data.get('analog_inputs', 0),\n            analog_outputs=data.get('analog_outputs', 0),\n            voltage_range=data.get('voltage_range'),\n            current_range=data.get('current_range'),\n            resolution=data.get('resolution'),\n            signal_type=data.get('signal_type'),\n            verified=True\n        )\n\n        existing_spec = ModuleSpec.query.filter_by(company=spec.company, model=spec.model).first()\n        if existing_spec:\n            for key, value in data.items():\n                if hasattr(existing_spec, key) and value is not None:\n                    setattr(existing_spec, key, value)\n            existing_spec.verified = True\n            db.session.commit()\n            return jsonify({'success': True, 'message': 'Module specification updated successfully'})\n        else:\n            db.session.add(spec)\n            db.session.commit()\n            return jsonify({'success': True, 'message': 'Module specification saved successfully'})\n\n    except Exception as e:\n        current_app.logger.error(f\"Error saving custom module: {e}\")\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@io_builder_bp.route('/api/test-lookup/<company>/<model>')\n@login_required\ndef test_lookup(company, model):\n    \"\"\"Test endpoint to verify module lookup functionality\"\"\"\n    try:\n        current_app.logger.info(f\"=== TESTING LOOKUP FOR {company} {model} ===\")\n\n        # Get module database\n        module_db = get_comprehensive_module_database()\n\n        # Test all possible keys\n        test_keys = [\n            f\"{company.upper()}_{model.upper()}\",\n            model.upper(),\n            f\"{company.upper()}_{model.upper().replace('-', '_')}\",\n            f\"{company.upper()}_{model.upper().replace(' ', '_')}\"\n        ]\n\n        results = {}\n        for key in test_keys:\n            if key in module_db:\n                results[key] = module_db[key]\n                current_app.logger.info(f\"Found spec for key: {key}\")\n            else:\n                current_app.logger.info(f\"No spec for key: {key}\")\n\n        return jsonify({\n            'success': True,\n            'company': company,\n            'model': model,\n            'test_keys': test_keys,\n            'found_specs': results,\n            'total_modules_in_db': len(module_db)\n        })\n\n    except Exception as e:\n        current_app.logger.error(f\"Test lookup error: {e}\")\n        return jsonify({'success': False, 'error': str(e)}), 500","size_bytes":22741},"routes/main.py":{"content":"\nfrom flask import Blueprint, render_template, request, redirect, url_for, flash, current_app, jsonify\nfrom flask_login import login_required, current_user\nfrom models import db, Report, SATReport\nimport json\n\nmain_bp = Blueprint('main', __name__)\n\n@main_bp.route('/edit/<submission_id>')\n@login_required\ndef edit_submission(submission_id):\n    \"\"\"Edit a submission with role-based permissions\"\"\"\n    \n    # Get the report\n    report = Report.query.get(submission_id)\n    if not report:\n        flash('Report not found.', 'error')\n        return redirect(url_for('dashboard.home'))\n    \n    # Check permissions\n    can_edit = False\n    if current_user.role == 'Admin':\n        can_edit = True  # Admin can edit any report\n    elif current_user.role == 'Engineer' and current_user.email == report.user_email:\n        # Engineers can edit their own reports until approved by Automation Manager\n        if report.approvals_json:\n            try:\n                approvals = json.loads(report.approvals_json)\n                tm_approved = any(a.get(\"status\") == \"approved\" and a.get(\"stage\") == 1 for a in approvals)\n                can_edit = not tm_approved\n            except:\n                can_edit = True  # If can't parse approvals, allow edit\n        else:\n            can_edit = True\n    elif current_user.role == 'Automation Manager':\n        # Automation Manager can edit reports until approved by PM\n        if report.approvals_json:\n            try:\n                approvals = json.loads(report.approvals_json)\n                pm_approved = any(a.get(\"status\") == \"approved\" and a.get(\"stage\") == 2 for a in approvals)\n                can_edit = not pm_approved\n            except:\n                can_edit = True\n        else:\n            can_edit = True\n    \n    if not can_edit:\n        flash('You do not have permission to edit this report.', 'error')\n        return redirect(url_for('status.view_status', submission_id=submission_id))\n    \n    # If user can edit, redirect to the SAT wizard with the submission ID\n    return redirect(url_for('reports.sat_wizard', submission_id=submission_id))\n\nfrom flask import Blueprint, request, jsonify, render_template, redirect, url_for, flash, send_file, current_app\nfrom flask_login import current_user\nfrom auth import login_required\nimport json\nimport os\nimport uuid\nimport datetime as dt\nfrom datetime import datetime\n\ntry:\n    from models import db, Report, SATReport, test_db_connection\nexcept ImportError as e:\n    print(f\"Warning: Could not import models: {e}\")\n    db = None\n    Report = None\n    SATReport = None\n    test_db_connection = lambda: False\n\ntry:\n    from utils import (load_submissions, save_submissions, send_edit_link,\n                  setup_approval_workflow, process_table_rows, handle_image_removals,\n                  allowed_file, save_uploaded_file, generate_sat_report as create_docx_from_template)\nexcept ImportError as e:\n    print(f\"Warning: Could not import utils: {e}\")\n    generate_sat_report = None\n    create_docx_from_template = None\n    convert_to_pdf = None\n\n# Helper function to get unread notification count (assuming it exists elsewhere)\ndef get_unread_count():\n    \"\"\"Placeholder for getting unread notification count\"\"\"\n    # Replace with actual implementation if available\n    return 0\n\ndef setup_approval_workflow_db(report, approver_emails):\n    \"\"\"Set up approval workflow for database-stored reports\"\"\"\n    approvals = []\n    valid_emails = [email for email in approver_emails if email]\n\n    for i, email in enumerate(valid_emails, 1):\n        approvals.append({\n            \"stage\": i,\n            \"approver_email\": email,\n            \"status\": \"pending\",\n            \"approved_at\": None,\n            \"signature\": None\n        })\n\n    # Lock the report if there are approvers\n    locked = len(valid_emails) > 0\n    return approvals, locked\n\ndef send_approval_link(email, submission_id, stage):\n    \"\"\"Send approval link to approver\"\"\"\n    try:\n        from flask import url_for\n        from utils import send_email\n\n        approval_url = url_for('approval.approve_submission', submission_id=submission_id, stage=stage, _external=True)\n        subject = f\"SAT Report Approval Required - Stage {stage}\"\n        body = f\"\"\"\n        You have been assigned to review and approve a SAT report.\n\n        Please click the following link to review and approve:\n        {approval_url}\n\n        Submission ID: {submission_id}\n        Stage: {stage}\n        \"\"\"\n\n        return send_email(email, subject, body)\n    except Exception as e:\n        current_app.logger.error(f\"Error sending approval link: {e}\")\n        return False\n\ndef create_approval_notification(approver_email, submission_id, stage, document_title):\n    \"\"\"Create approval notification\"\"\"\n    try:\n        from models import Notification, db\n\n        notification = Notification(\n            user_email=approver_email,\n            title=\"New Approval Request\",\n            message=f\"You have a new approval request for: {document_title}\",\n            type=\"approval\",\n            read=False\n        )\n        db.session.add(notification)\n        db.session.commit()\n        return True\n    except Exception as e:\n        current_app.logger.error(f\"Error creating approval notification: {e}\")\n        return False\n\ndef create_new_submission_notification(admin_emails, submission_id, document_title, submitter_email):\n    \"\"\"Create new submission notification for admins\"\"\"\n    try:\n        from models import Notification, db\n\n        for email in admin_emails:\n            notification = Notification(\n                user_email=email,\n                title=\"New Report Submission\",\n                message=f\"New report submitted: {document_title} by {submitter_email}\",\n                type=\"submission\",\n                read=False\n            )\n            db.session.add(notification)\n\n        db.session.commit()\n        return True\n    except Exception as e:\n        current_app.logger.error(f\"Error creating submission notifications: {e}\")\n        return False\n\nmain_bp = Blueprint('main', __name__)\n\n@main_bp.route('/')\n@login_required\ndef index():\n    \"\"\"Render the main form with empty data for a new submission\"\"\"\n    # Redirect to SAT form if user is logged in and it's the main entry point\n    return redirect(url_for('main.sat_form'))\n\n@main_bp.route('/sat_form', methods=['GET', 'POST'])\n@login_required\ndef sat_form():\n    \"\"\"Render the SAT form (index.html) for creating a new report\"\"\"\n    from flask import session\n\n    # Handle POST request from wizard\n    if request.method == 'POST':\n        # Get the form data from the wizard\n        wizard_data = {\n            'document_title': request.form.get('document_title', ''),\n            'project_reference': request.form.get('project_reference', ''),\n            'client_name': request.form.get('client_name', ''),\n            'date': request.form.get('date', ''),\n            'prepared_by': request.form.get('prepared_by', ''),\n            'revision': request.form.get('revision', ''),\n            'purpose': request.form.get('purpose', ''),\n            'scope': request.form.get('scope', ''),\n            'approver_1_email': request.form.get('approver_1_email', ''),\n            'approver_2_email': request.form.get('approver_2_email', ''),\n            'approver_3_email': request.form.get('approver_3_email', ''),\n        }\n        # Store in session for rendering\n        session['wizard_data'] = wizard_data\n\n    # Check if we have wizard data in the session\n    wizard_data = session.pop('wizard_data', {})\n\n    # Pre-populate submission_data with wizard data if available\n    submission_data = {\n        'USER_EMAIL': current_user.email if current_user.is_authenticated else '',\n        'PREPARED_BY': current_user.full_name if current_user.is_authenticated else '',\n    }\n    if wizard_data:\n        submission_data.update({\n            'DOCUMENT_TITLE': wizard_data.get('document_title', ''),\n            'PROJECT_REFERENCE': wizard_data.get('project_reference', ''),\n            'CLIENT_NAME': wizard_data.get('client_name', ''),\n            'DATE': wizard_data.get('date', ''),\n            'PREPARED_BY': current_user.full_name if current_user.is_authenticated else wizard_data.get('prepared_by', ''),\n            'REVISION': wizard_data.get('revision', ''),\n            'PURPOSE': wizard_data.get('purpose', ''),\n            'SCOPE': wizard_data.get('scope', ''),\n            'approver_1_email': wizard_data.get('approver_1_email', ''),\n            'approver_2_email': wizard_data.get('approver_2_email', ''),\n            'approver_3_email': wizard_data.get('approver_3_email', ''),\n            'USER_EMAIL': current_user.email if current_user.is_authenticated else wizard_data.get('user_email', ''),\n        })\n\n    # Always render the SAT.html template (the full SAT form)\n    return render_template(\n        'SAT.html',\n        submission_data=submission_data,\n        user_role=current_user.role if hasattr(current_user, 'role') else 'user'\n    )\n\n@main_bp.route('/edit/<submission_id>')\n@login_required\ndef edit_submission(submission_id):\n    \"\"\"Edit an existing submission\"\"\"\n    from models import Report, SATReport\n    import json\n\n    # Check if submission exists and user has permission\n    report = Report.query.filter_by(id=submission_id).first()\n    if not report:\n        flash('Report not found.', 'error')\n        return redirect(url_for('dashboard.home'))\n\n    # Check if user owns this report or is admin\n    if current_user.email != report.user_email and current_user.role != 'Admin':\n        flash('Access denied. You do not have permission to access this page.', 'error')\n        return redirect(url_for('dashboard.home'))\n\n    # Check if submission is locked\n    if report.locked:\n        flash('This submission is locked and cannot be edited.', 'error')\n        return redirect(url_for('status.view_status', submission_id=submission_id))\n\n@main_bp.route('/edit/<submission_id>')\n@login_required  \ndef edit_submission_legacy(submission_id):\n    \"\"\"Edit an existing submission (if not yet locked)\"\"\"\n    try:\n        from models import Report, SATReport\n\n        # Get report from database\n        report = Report.query.get(submission_id)\n        if not report:\n            flash(\"Submission not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Check if the current user is authorized to edit based on approval status\n        if report.locked:\n            flash(\"This submission is locked and cannot be edited\", \"warning\")\n            return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        # Check if the current user is authorized to edit\n        if current_user.role != 'admin' and report.user_email != current_user.email:\n            flash(\"You are not authorized to edit this submission.\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Get SAT report data\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            flash(\"SAT report data not found\", \"error\")\n            return redirect(url_for('main.index'))\n\n        # Parse the stored data\n        stored_data = json.loads(sat_report.data_json)\n        context_data = stored_data.get(\"context\", {})\n\n        # Get unread notifications count\n        unread_count = get_unread_count()\n\n        return render_template('SAT.html',\n                              submission_data=context_data,\n                              submission_id=submission_id,\n                              unread_count=unread_count,\n                              user_role=current_user.role if hasattr(current_user, 'role') else 'user',\n                              edit_mode=True)\n    except Exception as e:\n        current_app.logger.error(f\"Error in edit_submission: {e}\", exc_info=True)\n        current_app.logger.error(f\"Template rendering error: {str(e)}\")\n        flash(\"An error occurred while loading the submission\", \"error\")\n        return redirect(url_for('dashboard.my_reports'))\n\n@main_bp.route('/generate', methods=['POST'])\n@login_required\ndef generate():\n    \"\"\"Generate a SAT report from form data\"\"\"\n    try:\n        # Log request details for debugging\n        current_app.logger.info(f\"Generate request from: {request.remote_addr}\")\n        current_app.logger.info(f\"Request headers: {request.headers}\")\n        current_app.logger.info(f\"Request form data keys: {list(request.form.keys())}\")\n\n        # Import database models\n        from models import db, Report, SATReport\n\n        # Retrieve submission id and current report\n        submission_id = request.form.get(\"submission_id\", \"\")\n\n        # Create a new submission ID if needed\n        if not submission_id:\n            submission_id = str(uuid.uuid4())\n\n        # Get or create report record\n        report = Report.query.get(submission_id)\n        is_new_report = False\n        if not report:\n            is_new_report = True\n            report = Report(\n                id=submission_id,\n                type='SAT',\n                status='DRAFT',\n                user_email=current_user.email if hasattr(current_user, 'email') else '',\n                approvals_json='[]',\n                version='R0'  # Always start with R0 for new reports\n            )\n            db.session.add(report)\n        else:\n            # This is an edit/resubmit - increment version\n            if not is_new_report:\n                current_version = report.version or 'R0'\n                if current_version.startswith('R'):\n                    try:\n                        version_num = int(current_version[1:])\n                        report.version = f'R{version_num + 1}'\n                    except ValueError:\n                        report.version = 'R1'\n                else:\n                    report.version = 'R1'\n                current_app.logger.info(f\"Version incremented to: {report.version}\")\n\n            # Reset approval workflow for resubmission\n            report.status = 'DRAFT'\n            report.locked = False\n            report.approval_notification_sent = False\n\n        # Get or create SAT report record\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            sat_report = SATReport(\n                report_id=submission_id,\n                data_json='{}',\n                scada_image_urls='[]',\n                trends_image_urls='[]',\n                alarm_image_urls='[]'\n            )\n            db.session.add(sat_report)\n\n        # Load existing data for processing\n        existing_data = json.loads(sat_report.data_json) if sat_report.data_json != '{}' else {}\n        sub = existing_data  # For compatibility with existing code\n\n        # Grab the approver emails from the form\n        approver_emails = [\n            request.form.get(\"approver_1_email\", \"\").strip(),\n            request.form.get(\"approver_2_email\", \"\").strip(),\n            request.form.get(\"approver_3_email\", \"\").strip(),\n        ]\n\n        # Initialize (or update) the approvals list and lock flag\n        approvals, locked = setup_approval_workflow_db(report, approver_emails)\n        report.locked = locked\n        report.approvals_json = json.dumps(approvals)\n\n        # Create the upload directory for this submission\n        upload_dir = os.path.join(current_app.config['UPLOAD_ROOT'], submission_id)\n        os.makedirs(upload_dir, exist_ok=True)\n\n        # Initialize image URLs lists from database\n        scada_urls = json.loads(sat_report.scada_image_urls) if sat_report.scada_image_urls else []\n        trends_urls = json.loads(sat_report.trends_image_urls) if sat_report.trends_image_urls else []\n        alarm_urls = json.loads(sat_report.alarm_image_urls) if sat_report.alarm_image_urls else []\n\n        # Initialize DocxTemplate\n        from docxtpl import DocxTemplate, InlineImage\n        from docx.shared import Mm\n        from werkzeug.utils import secure_filename\n        import base64\n        import time\n        import shutil\n\n        doc = DocxTemplate(current_app.config['TEMPLATE_FILE'])\n\n        # Process signature data\n        sig_data_url = request.form.get(\"sig_prepared_data\", \"\")\n        SIG_PREPARED = \"\"\n\n        if sig_data_url:\n            # Parse and save the signature data\n            try:\n                # strip \"data:image/png;base64,\"\n                if \",\" in sig_data_url:\n                    header, encoded = sig_data_url.split(\",\", 1)\n                    data = base64.b64decode(encoded)\n\n                    # Ensure unique filename\n                    fn = f\"{submission_id}_prepared_{int(time.time())}.png\"\n                    sig_folder = current_app.config['SIGNATURES_FOLDER']\n                    os.makedirs(sig_folder, exist_ok=True)  # Ensure folder exists\n                    out_path = os.path.join(sig_folder, fn)\n\n                    # Write signature file\n                    with open(out_path, \"wb\") as f:\n                        f.write(data)\n\n                    # Verify the file was created successfully\n                    if os.path.exists(out_path) and os.path.getsize(out_path) > 0:\n                        # Store signature filename in two places for redundancy\n                        sub.setdefault(\"context\", {})[\"prepared_signature\"] = fn\n                        sub[\"prepared_signature\"] = fn  # Store in root of submission as well\n\n                        # Add timestamp for the preparer\n                        current_timestamp = dt.datetime.now().isoformat()\n                        sub.setdefault(\"context\", {})[\"prepared_timestamp\"] = current_timestamp\n\n                        # Log success with full path info\n                        current_app.logger.info(f\"Stored preparer signature as {fn}\")\n                        current_app.logger.info(f\"Absolute signature path: {os.path.abspath(out_path)}\")\n                        current_app.logger.info(f\"File exists: {os.path.exists(out_path)}\")\n\n                        # Create InlineImage for immediate use\n                        try:\n                            SIG_PREPARED = InlineImage(doc, out_path, width=Mm(40))\n                            current_app.logger.info(\"Successfully created InlineImage for signature\")\n                        except Exception as e:\n                            current_app.logger.error(f\"Error creating preparer signature image: {e}\")\n                    else:\n                        current_app.logger.error(f\"Signature file not created or empty: {out_path}\")\n                else:\n                    current_app.logger.error(\"Invalid signature data format\")\n            except Exception as e:\n                current_app.logger.error(f\"Error processing signature data: {e}\", exc_info=True)\n\n        # Initialize approval signatures\n        SIG_APPROVER_1 = \"\"\n        SIG_APPROVER_2 = \"\"\n        SIG_APPROVER_3 = \"\"\n\n        # Improved image file handling\n        def save_new(field, url_list, inline_list):\n            \"\"\"Save new uploaded files with better error handling and path resolution\"\"\"\n            for f in request.files.getlist(field):\n                if not f or not f.filename:\n                    continue\n\n                try:\n                    # Create a secure filename and ensure uniqueness\n                    fn = secure_filename(f.filename)\n                    uniq_fn = f\"{uuid.uuid4().hex}_{fn}\"\n\n                    # Ensure the upload directory exists\n                    os.makedirs(upload_dir, exist_ok=True)\n\n                    # Create absolute path for file storage\n                    disk_fp = os.path.join(upload_dir, uniq_fn)\n\n                    # Save the file\n                    f.save(disk_fp)\n                    current_app.logger.info(f\"Saved uploaded file to: {disk_fp}\")\n\n                    # Create proper URL and add image object\n                    try:\n                        # Process image and create scaled inline version\n                        from PIL import Image\n                        with Image.open(disk_fp) as img:\n                            w, h = img.size\n\n                        # Calculate scale to fit max width\n                        max_w_mm = 150\n                        scale = min(1, max_w_mm / (w * 0.264583))\n\n                        # 1) Add public URL for edit-mode preview\n                        # Use posix-style paths for URLs (forward slashes)\n                        rel_path = os.path.join(\"uploads\", submission_id, uniq_fn).replace(\"\\\\\", \"/\")\n                        url = url_for(\"static\", filename=rel_path)\n                        url_list.append(url)\n                        current_app.logger.info(f\"Added image URL: {url}\")\n\n                        # 2) Build InlineImage for DOCX\n                        inline_list.append(\n                            InlineImage(doc, disk_fp,\n                                width=Mm(w * 0.264583 * scale),\n                                height=Mm(h * 0.264583 * scale)\n                            )\n                        )\n                        current_app.logger.info(f\"Created InlineImage for: {uniq_fn}\")\n                    except Exception as e:\n                        current_app.logger.error(f\"Error processing image {fn}: {e}\", exc_info=True)\n                        # Add default size if image processing fails\n                        rel_path = os.path.join(\"uploads\", submission_id, uniq_fn).replace(\"\\\\\", \"/\")\n                        url = url_for(\"static\", filename=rel_path)\n                        url_list.append(url)\n                        inline_list.append(\n                            InlineImage(doc, disk_fp, width=Mm(100), height=Mm(80))\n                        )\n                        current_app.logger.info(f\"Created fallback InlineImage for: {uniq_fn}\")\n                except Exception as e:\n                    current_app.logger.error(f\"Failed to save file {f.filename}: {e}\", exc_info=True)\n\n        # Remove images flagged for deletion\n        handle_image_removals(request.form, \"removed_scada_images\", scada_urls)\n        handle_image_removals(request.form, \"removed_trends_images\", trends_urls)\n        handle_image_removals(request.form, \"removed_alarm_images\", alarm_urls)\n\n        # Create image objects for template\n        scada_image_objects = []\n        trends_image_objects = []\n        alarm_image_objects = []\n\n        # Process new image uploads\n        save_new(\"SCADA_IMAGES\", scada_urls, scada_image_objects)\n        save_new(\"TRENDS_IMAGES\", trends_urls, trends_image_objects)\n        save_new(\"ALARM_IMAGES\", alarm_urls, alarm_image_objects)\n\n        # Process related documents\n        related_documents = process_table_rows(\n            request.form,\n            {\n                'doc_ref[]': 'Document_Reference',\n                'doc_title[]': 'Document_Title'\n            }\n        )\n\n        # Skip Pre and Post Approvals processing since they're not used\n        PRE_APPROVALS = []\n        POST_APPROVALS = []\n\n        # Remove signature image processing since we're not using them\n        SIG_PREPARED_BY = \"\"\n        SIG_REVIEW_TECH = \"\"\n        SIG_REVIEW_PM = \"\"\n        SIG_APPROVAL_CLIENT = \"\"\n\n        # Process Pre-Test Requirements\n        PRE_TEST_REQUIREMENTS = process_table_rows(\n            request.form,\n            {\n                'pretest_item[]': 'Item',\n                'pretest_test[]': 'Test',\n                'pretest_method[]': 'Method_Test_Steps',\n                'pretest_acceptance[]': 'Acceptance_Criteria',\n                'pretest_result[]': 'Result',\n                'pretest_punch[]': 'Punch_Item',\n                'pretest_verified_by[]': 'Verified_by',\n                'pretest_comment[]': 'Comment'\n            }\n        )\n\n        # Process Key Components\n        KEY_COMPONENTS = process_table_rows(\n            request.form,\n            {\n                'keycomp_s_no[]': 'S.no',\n                'keycomp_model[]': 'Model',\n                'keycomp_description[]': 'Description',\n                'keycomp_remarks[]': 'Remarks'\n            }\n        )\n\n        # Process IP Records\n        IP_RECORDS = process_table_rows(\n            request.form,\n            {\n                'ip_device[]': 'Device_Name',\n                'ip_address[]': 'IP_Address',\n                'ip_comment[]': 'Comment'\n            }\n        )\n\n        # Process Digital Signals\n        SIGNAL_LISTS = process_table_rows(\n            request.form,\n            {\n                'S. No.[]': 'S. No.',\n                'Rack No.[]': 'Rack No.',\n                'Module Position[]': 'Module Position',\n                'Signal TAG[]': 'Signal TAG',\n                'Signal Description[]': 'Signal Description',\n                'Result[]': 'Result',\n                'Punch Item[]': 'Punch Item',\n                'Verified By[]': 'Verified By',\n                'Comment[]': 'Comment'\n            }\n        )\n\n        # Process Analogue Signals\n        ANALOGUE_LISTS = process_table_rows(\n            request.form,\n            {\n                'S. No. Analogue[]': 'S. No.',\n                'Rack No. Analogue[]': 'Rack No.',\n                'Module Position Analogue[]': 'Module Position',\n                'Signal TAG Analogue[]': 'Signal TAG',\n                'Signal Description Analogue[]': 'Signal Description',\n                'Result Analogue[]': 'Result',\n                'Punch Item Analogue[]': 'Punch Item',\n                'Verified By Analogue[]': 'Verified By',\n                'Comment Analogue[]': 'Comment'\n            }\n        )\n\n        # Process Modbus Digital Signals\n        MODBUS_DIGITAL_LISTS = process_table_rows(\n            request.form,\n            {\n                'Address[]': 'Address',\n                'Description[]': 'Description',\n                'Remarks[]': 'Remarks',\n                'Digital_Result[]': 'Result',\n                'Digital_Punch Item[]': 'Punch Item',\n                'Digital_Verified By[]': 'Verified By',\n                'Digital_Comment[]': 'Comment'\n            }\n        )\n\n        # Process Modbus Analogue Signals\n        MODBUS_ANALOGUE_LISTS = process_table_rows(\n            request.form,\n            {\n                'Address Analogue[]': ' Address',  # Note: space in name is intentional\n                'Description Analogue[]': 'Description',\n                'Range Analogue[]': 'Range',\n                'Result Analogue[]': 'Result',\n                'Punch Item Analogue[]': 'Punch Item',\n                'Verified By Analogue[]': 'Verified By',\n                'Comment Analogue[]': 'Comment'\n            }\n        )\n\n        # Process Data Validation\n        DATA_VALIDATION = process_table_rows(\n            request.form,\n            {\n                'Validation_Tag[]': 'Tag',\n                'Validation_Range[]': 'Range',\n                'Validation_SCADA Value[]': 'SCADA Value',\n                'Validation_HMI Value[]': 'HMI Value'\n            }\n        )\n\n        # Process Process Test\n        PROCESS_TEST = process_table_rows(\n            request.form,\n            {\n                'Process_Item[]': 'Item',\n                'Process_Action[]': 'Action',\n                'Process_Expected / Required Result[]': 'Expected / Required Result',\n                'Process_Pass/Fail[]': ' Pass/Fail ',  # Note: spaces in name are intentional\n                'Process_Comments[]': ' Comments '     # Note: spaces in name are intentional\n            }\n        )\n\n        # Process SCADA Verification\n        SCADA_VERIFICATION = process_table_rows(\n            request.form,\n            {\n                'SCADA_Task[]': 'Task',\n                'SCADA_Expected_Result[]': 'Expected Result',\n                'SCADA_Pass/Fail[]': 'Pass/Fail',\n                'SCADA_Comments[]': 'Comments'\n            }\n        )\n\n        # Process Trends Testing\n        TRENDS_TESTING = process_table_rows(\n            request.form,\n            {\n                'Trend[]': 'Trend',\n                'Expected Behavior[]': 'Expected Behavior',\n                'Pass/Fail Trend[]': 'Pass/Fail',\n                'Comments Trend[]': 'Comments'\n            }\n        )\n\n        # Process Alarm Signals\n        ALARM_LIST = process_table_rows(\n            request.form,\n            {\n                'Alarm_Type[]': 'Alarm Type',\n                'Expected / Required Result[]': ' Expected / Required Result',\n                'Pass/Fail []': ' Pass/Fail ',  # Note: spaces in name are intentional\n                'Comments []': ' Comments '     # Note: spaces in name are intentional\n            }\n        )\n\n        # Build final context for the DOCX\n        context = {\n            \"DOCUMENT_TITLE\": request.form.get('document_title', ''),\n            \"PROJECT_REFERENCE\": request.form.get('project_reference', ''),\n            \"DOCUMENT_REFERENCE\": request.form.get('document_reference', ''),\n            \"DATE\": request.form.get('date', ''),\n            \"CLIENT_NAME\": request.form.get('client_name', ''),\n            \"REVISION\": request.form.get('revision', ''),\n            \"REVISION_DETAILS\": request.form.get('revision_details', ''),\n            \"REVISION_DATE\": request.form.get('revision_date', ''),\n            \"PREPARED_BY\": request.form.get('prepared_by', ''),\n            \"SIG_PREPARED\": SIG_PREPARED,\n            \"SIG_PREPARED_BY\": SIG_PREPARED_BY,\n            \"REVIEWED_BY_TECH_LEAD\": request.form.get('reviewed_by_tech_lead', ''),\n            \"SIG_REVIEW_TECH\": SIG_REVIEW_TECH,\n            \"REVIEWED_BY_PM\": request.form.get('reviewed_by_pm', ''),\n            \"SIG_REVIEW_PM\": SIG_REVIEW_PM,\n            \"APPROVED_BY_CLIENT\": request.form.get('approved_by_client', ''),\n            \"SIG_APPROVAL_CLIENT\": SIG_APPROVAL_CLIENT,\n            \"PURPOSE\": request.form.get(\"purpose\", \"\"),\n            \"SCOPE\": request.form.get(\"scope\", \"\"),\n            \"PRE_TEST_REQUIREMENTS\": PRE_TEST_REQUIREMENTS,\n            \"KEY_COMPONENTS\": KEY_COMPONENTS,\n            \"IP_RECORDS\": IP_RECORDS,\n            \"RELATED_DOCUMENTS\": related_documents,\n            \"PRE_APPROVALS\": PRE_APPROVALS,\n            \"POST_APPROVALS\": POST_APPROVALS,\n            \"SIGNAL_LISTS\": SIGNAL_LISTS,\n            \"ANALOGUE_LISTS\": ANALOGUE_LISTS,\n            \"MODBUS_DIGITAL_LISTS\": MODBUS_DIGITAL_LISTS,\n            \"MODBUS_ANALOGUE_LISTS\": MODBUS_ANALOGUE_LISTS,\n            \"DATA_VALIDATION\": DATA_VALIDATION,\n            \"PROCESS_TEST\": PROCESS_TEST,\n            \"SCADA_VERIFICATION\": SCADA_VERIFICATION,\n            \"TRENDS_TESTING\": TRENDS_TESTING,\n            \"SCADA_IMAGES\": scada_image_objects,\n            \"TRENDS_IMAGES\": trends_image_objects,\n            \"ALARM_IMAGES\": alarm_image_objects,\n            \"ALARM_LIST\": ALARM_LIST,\n            \"SIG_APPROVER_1\": SIG_APPROVER_1,\n            \"SIG_APPROVER_2\": SIG_APPROVER_2,\n            \"SIG_APPROVER_3\": SIG_APPROVER_3,\n        }\n\n        # For storage, remove the InlineImage objects recursively\n        context_to_store = dict(context)\n        def remove_inline_images(obj):\n            \"\"\"Recursively remove InlineImage objects from nested data structures\"\"\"\n            if isinstance(obj, InlineImage):\n                return None\n            elif isinstance(obj, dict):\n                return {k: remove_inline_images(v) for k, v in obj.items() if not isinstance(v, InlineImage)}\n            elif isinstance(obj, list):\n                return [remove_inline_images(item) for item in obj if not isinstance(item, InlineImage)]\n            else:\n                return obj\n\n        # Apply the cleaning function to all context data\n        for key in list(context_to_store.keys()):\n            context_to_store[key] = remove_inline_images(context_to_store[key])\n\n        # Store approver emails in context for later retrieval in edit form\n        context_to_store[\"approver_1_email\"] = approver_emails[0]\n        context_to_store[\"approver_2_email\"] = approver_emails[1]\n        context_to_store[\"approver_3_email\"] = approver_emails[2]\n\n        # Update report metadata\n        report.document_title = context_to_store.get('DOCUMENT_TITLE', '')\n        report.document_reference = context_to_store.get('DOCUMENT_REFERENCE', '')\n        report.project_reference = context_to_store.get('PROJECT_REFERENCE', '')\n        report.client_name = context_to_store.get('CLIENT_NAME', '')\n        report.revision = context_to_store.get('REVISION', '')\n        report.prepared_by = context_to_store.get('PREPARED_BY', '')\n        report.updated_at = dt.datetime.utcnow()\n\n        # Prepare submission data for storage\n        submission_data = {\n            \"context\": context_to_store,\n            \"user_email\": current_user.email if hasattr(current_user, 'email') else request.form.get(\"user_email\", \"\"),\n            \"approvals\": approvals,\n            \"locked\": locked,\n            \"scada_image_urls\": scada_urls,\n            \"trends_image_urls\": trends_urls,\n            \"alarm_image_urls\": alarm_urls,\n            \"created_at\": existing_data.get(\"created_at\", dt.datetime.now().isoformat()),\n            \"updated_at\": dt.datetime.now().isoformat()\n        }\n\n        # Update SAT report data\n        sat_report.data_json = json.dumps(submission_data)\n        sat_report.date = context_to_store.get('DATE', '')\n        sat_report.purpose = context_to_store.get('PURPOSE', '')\n        sat_report.scope = context_to_store.get('SCOPE', '')\n        sat_report.scada_image_urls = json.dumps(scada_urls)\n        sat_report.trends_image_urls = json.dumps(trends_urls)\n        sat_report.alarm_image_urls = json.dumps(alarm_urls)\n\n        # Save to database\n        db.session.commit()\n\n        # Render the DOCX template\n        doc.render(context)\n\n        # Build a timestamped filename and save to the OS temp directory\n        import tempfile\n        timestamp = dt.datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        filename = f\"SAT_Report_{timestamp}.docx\"\n        temp_path = os.path.join(tempfile.gettempdir(), filename)\n\n        doc.save(temp_path)\n        current_app.logger.info(f\"Document saved to temp path: {temp_path}\")\n\n        # Try to copy to permanent location\n        try:\n            permanent = os.path.abspath(current_app.config['OUTPUT_FILE'])\n            shutil.copyfile(temp_path, permanent)\n            current_app.logger.info(f\"Also copied report to outputs: {permanent}\")\n        except Exception as e:\n            current_app.logger.warning(f\"Could not copy to outputs folder: {e}\")\n\n        # Notify first approver exactly once\n        if not report.approval_notification_sent:\n            first_stage = approvals[0] if approvals else None\n            if first_stage:\n                first_email = first_stage[\"approver_email\"]\n                # Corrected call to send_approval_link\n                sent = send_approval_link(\n                    first_email,\n                    submission_id,\n                    first_stage[\"stage\"]\n                )\n                current_app.logger.info(f\"Approval email to {first_email}: {sent}\")\n\n                # Create approval notification\n                try:\n                    document_title = context.get(\"DOCUMENT_TITLE\", \"SAT Report\")\n                    create_approval_notification(\n                        approver_email=first_email,\n                        submission_id=submission_id,\n                        stage=first_stage[\"stage\"],\n                        document_title=document_title\n                    )\n\n                    # Also notify admins about new submission\n                    from models import User\n                    admin_emails = [u.email for u in User.query.filter_by(role='Admin').all()]\n                    if admin_emails:\n                        create_new_submission_notification(\n                            admin_emails=admin_emails,\n                            submission_id=submission_id,\n                            document_title=document_title,\n                            submitter_email=current_user.email\n                        )\n                except Exception as e:\n                    current_app.logger.error(f\"Error creating submission notifications: {e}\")\n\n                report.approval_notification_sent = True\n                db.session.commit()\n\n        # Send edit link email to user (with graceful failure)\n        email_sent = False\n        if current_app.config.get('ENABLE_EMAIL_NOTIFICATIONS', True):\n            try:\n                email_result = send_edit_link(report.user_email, submission_id)\n                if email_result:\n                    email_sent = True\n                    current_app.logger.info(f\"Email sent successfully to {report.user_email}\")\n                else:\n                    current_app.logger.warning(f\"Failed to send email to {report.user_email}\")\n            except Exception as e:\n                current_app.logger.error(f\"Email sending error: {e}\")\n\n        # Always show success message regardless of email status\n        success_message = \"Report generated successfully!\"\n        if email_sent:\n            success_message += \" An edit link has been sent to your email.\"\n        else:\n            success_message += \" You can access your report using the status page.\"\n\n        flash(success_message, \"success\")\n\n        return jsonify({\n            \"success\": True,\n            \"message\": success_message,\n            \"submission_id\": submission_id,\n            \"redirect_url\": url_for('status.view_status', submission_id=submission_id),\n            \"download_url\": url_for('status.download_report', submission_id=submission_id)\n        })\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in generate: {e}\", exc_info=True)\n        flash(f\"An error occurred while generating the report: {str(e)}\", \"error\")\n        return redirect(url_for('main.index'))\n\n@main_bp.route('/save_progress', methods=['POST'])\n@login_required\ndef save_progress():\n    \"\"\"Save form progress without generating report\"\"\"\n    try:\n        from models import db, Report, SATReport\n\n        # Get submission ID or create new one\n        submission_id = request.form.get(\"submission_id\", \"\")\n        if not submission_id:\n            submission_id = str(uuid.uuid4())\n\n        # Get or create report record\n        report = Report.query.get(submission_id)\n        if not report:\n            report = Report(\n                id=submission_id,\n                type='SAT',\n                status='DRAFT',\n                user_email=current_user.email if hasattr(current_user, 'email') else '',\n                approvals_json='[]'\n            )\n            db.session.add(report)\n\n        # Get or create SAT report record\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            sat_report = SATReport(\n                report_id=submission_id,\n                data_json='{}',\n                scada_image_urls='[]',\n                trends_image_urls='[]',\n                alarm_image_urls='[]'\n            )\n            db.session.add(sat_report)\n\n        # Load existing data\n        existing_data = json.loads(sat_report.data_json) if sat_report.data_json != '{}' else {}\n\n        # Build context from current form data\n        context = {\n            \"DOCUMENT_TITLE\": request.form.get('document_title', ''),\n            \"PROJECT_REFERENCE\": request.form.get('project_reference', ''),\n            \"DOCUMENT_REFERENCE\": request.form.get('document_reference', ''),\n            \"DATE\": request.form.get('date', ''),\n            \"CLIENT_NAME\": request.form.get('client_name', ''),\n            \"REVISION\": request.form.get('revision', ''),\n            \"REVISION_DETAILS\": request.form.get('revision_details', ''),\n            \"REVISION_DATE\": request.form.get('revision_date', ''),\n            \"PREPARED_BY\": request.form.get('prepared_by', ''),\n            \"REVIEWED_BY_TECH_LEAD\": request.form.get('reviewed_by_tech_lead', ''),\n            \"REVIEWED_BY_PM\": request.form.get('reviewed_by_pm', ''),\n            \"APPROVED_BY_CLIENT\": request.form.get('approved_by_client', ''),\n            \"PURPOSE\": request.form.get(\"purpose\", \"\"),\n            \"SCOPE\": request.form.get(\"scope\", \"\"),\n            \"approver_1_email\": request.form.get(\"approver_1_email\", \"\"),\n            \"approver_2_email\": request.form.get(\"approver_2_email\", \"\"),\n            \"approver_3_email\": request.form.get(\"approver_3_email\", \"\"),\n        }\n\n        # Update report metadata\n        report.document_title = context.get('DOCUMENT_TITLE', '')\n        report.document_reference = context.get('DOCUMENT_REFERENCE', '')\n        report.project_reference = context.get('PROJECT_REFERENCE', '')\n        report.client_name = context.get('CLIENT_NAME', '')\n        report.revision = context.get('REVISION', '')\n        report.prepared_by = context.get('PREPARED_BY', '')\n        report.updated_at = dt.datetime.utcnow()\n\n        # Prepare submission data for storage\n        submission_data = {\n            \"context\": context,\n            \"user_email\": current_user.email if hasattr(current_user, 'email') else request.form.get(\"user_email\", \"\"),\n            \"approvals\": existing_data.get(\"approvals\", []),\n            \"locked\": existing_data.get(\"locked\", False),\n            \"scada_image_urls\": existing_data.get(\"scada_image_urls\", []),\n            \"trends_image_urls\": existing_data.get(\"trends_image_urls\", []),\n            \"alarm_image_urls\": existing_data.get(\"alarm_image_urls\", []),\n            \"created_at\": existing_data.get(\"created_at\", dt.datetime.now().isoformat()),\n            \"updated_at\": dt.datetime.now().isoformat()\n        }\n\n        # Update SAT report data\n        sat_report.data_json = json.dumps(submission_data)\n        sat_report.date = context.get('DATE', '')\n        sat_report.purpose = context.get('PURPOSE', '')\n        sat_report.scope = context.get('SCOPE', '')\n\n        # Save to database\n        db.session.commit()\n\n        return jsonify({\n            'success': True,\n            'message': 'Progress saved successfully',\n            'submission_id': submission_id\n        })\n\n    except Exception as e:\n        current_app.logger.error(f\"Error saving progress: {e}\", exc_info=True)\n        return jsonify({\n            'success': False,\n            'message': f'Error saving progress: {str(e)}'\n        }), 500\n\n@main_bp.route('/auto_save_progress', methods=['POST'])\n@login_required\ndef auto_save_progress():\n    \"\"\"Auto-save form progress with CSRF validation\"\"\"\n    try:\n        from models import db, Report, SATReport\n\n        # Get submission ID or create new one\n        submission_id = request.form.get(\"submission_id\", \"\")\n        if not submission_id:\n            submission_id = str(uuid.uuid4())\n\n        # Get form data\n        form_data = request.form.to_dict()\n\n        # Get or create report record\n        report = Report.query.get(submission_id)\n        if not report:\n            report = Report(\n                id=submission_id,\n                type='SAT',\n                status='DRAFT',\n                user_email=current_user.email if hasattr(current_user, 'email') else '',\n                approvals_json='[]'\n            )\n            db.session.add(report)\n\n        # Get or create SAT report record\n        sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n        if not sat_report:\n            sat_report = SATReport(\n                report_id=submission_id,\n                data_json='{}',\n                scada_image_urls='[]',\n                trends_image_urls='[]',\n                alarm_image_urls='[]'\n            )\n            db.session.add(sat_report)\n\n        # Load existing data\n        existing_data = json.loads(sat_report.data_json) if sat_report.data_json != '{}' else {}\n\n        # Build context from current form data\n        context = {\n            \"DOCUMENT_TITLE\": form_data.get('document_title', ''),\n            \"PROJECT_REFERENCE\": form_data.get('project_reference', ''),\n            \"DOCUMENT_REFERENCE\": form_data.get('document_reference', ''),\n            \"DATE\": form_data.get('date', ''),\n            \"CLIENT_NAME\": form_data.get('client_name', ''),\n            \"REVISION\": form_data.get('revision', ''),\n            \"REVISION_DETAILS\": form_data.get('revision_details', ''),\n            \"REVISION_DATE\": form_data.get('revision_date', ''),\n            \"PREPARED_BY\": form_data.get('prepared_by', ''),\n            \"REVIEWED_BY_TECH_LEAD\": form_data.get('reviewed_by_tech_lead', ''),\n            \"REVIEWED_BY_PM\": form_data.get('reviewed_by_pm', ''),\n            \"APPROVED_BY_CLIENT\": form_data.get('approved_by_client', ''),\n            \"PURPOSE\": form_data.get(\"purpose\", \"\"),\n            \"SCOPE\": form_data.get(\"scope\", \"\"),\n            \"approver_1_email\": form_data.get(\"approver_1_email\", \"\"),\n            \"approver_2_email\": form_data.get(\"approver_2_email\", \"\"),\n            \"approver_3_email\": form_data.get(\"approver_3_email\", \"\"),\n        }\n\n        # Update report metadata\n        report.document_title = context.get('DOCUMENT_TITLE', '')\n        report.updated_at = dt.datetime.utcnow()\n\n        # Prepare submission data for storage\n        submission_data = {\n            \"context\": context,\n            \"user_email\": current_user.email if hasattr(current_user, 'email') else form_data.get(\"user_email\", \"\"),\n            \"approvals\": existing_data.get(\"approvals\", []),\n            \"locked\": existing_data.get(\"locked\", False),\n            \"scada_image_urls\": existing_data.get(\"scada_image_urls\", []),\n            \"trends_image_urls\": existing_data.get(\"trends_image_urls\", []),\n            \"alarm_image_urls\": existing_data.get(\"alarm_image_urls\", []),\n            \"created_at\": existing_data.get(\"created_at\", dt.datetime.now().isoformat()),\n            \"updated_at\": dt.datetime.now().isoformat(),\n            \"auto_saved\": True  # Mark as auto-saved\n        }\n\n        # Update SAT report data\n        sat_report.data_json = json.dumps(submission_data)\n        sat_report.date = context.get('DATE', '')\n        sat_report.purpose = context.get('PURPOSE', '')\n        sat_report.scope = context.get('SCOPE', '')\n\n        # Save to database\n        db.session.commit()\n\n        return jsonify({\n            'success': True,\n            'message': 'Auto-save completed',\n            'submission_id': submission_id,\n            'timestamp': dt.datetime.now().isoformat()\n        })\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in auto-save: {e}\", exc_info=True)\n        return jsonify({\n            'success': False,\n            'message': f'Auto-save failed: {str(e)}'\n        }), 500","size_bytes":46503},"routes/notifications.py":{"content":"from flask import Blueprint, render_template, jsonify, request, current_app\nfrom flask_login import current_user\nfrom models import db, Notification\nfrom auth import login_required\nimport json\nfrom datetime import datetime\n\ntry:\n    from models import db, Notification\nexcept ImportError as e:\n    print(f\"Warning: Could not import models: {e}\")\n    db = None\n    Notification = None\n\nnotifications_bp = Blueprint('notifications', __name__)\n\n@notifications_bp.route('/api/notifications')\ndef get_notifications():\n    \"\"\"Get notifications for current user\"\"\"\n    try:\n        if not current_user.is_authenticated:\n            return jsonify({'notifications': [], 'total': 0, 'pages': 0, 'current_page': 1})\n\n        page = request.args.get('page', 1, type=int)\n        per_page = request.args.get('per_page', 10, type=int)\n\n        notifications = Notification.query.filter_by(\n            user_id=current_user.id\n        ).order_by(Notification.created_at.desc()).paginate(\n            page=page, per_page=per_page, error_out=False\n        )\n\n        return jsonify({\n            'notifications': [{\n                'id': n.id,\n                'type': n.type,\n                'title': n.title,\n                'message': n.message,\n                'is_read': n.is_read,\n                'created_at': n.created_at.isoformat(),\n                'metadata': n.metadata\n            } for n in notifications.items],\n            'total': notifications.total,\n            'pages': notifications.pages,\n            'current_page': notifications.page\n        })\n    except Exception as e:\n        # Return empty list when database issues occur\n        current_app.logger.warning(f\"Notifications not available: {e}\")\n        return jsonify({\n            'notifications': [],\n            'total': 0,\n            'pages': 0,\n            'current_page': 1\n        })\n\n@notifications_bp.route('/api/notifications/unread-count')\n@login_required\ndef get_unread_count_api():\n    \"\"\"Get unread notifications count for current user\"\"\"\n    try:\n        if not current_user.is_authenticated:\n            return jsonify({'count': 0})\n\n        unread_count = Notification.query.filter_by(\n            user_email=current_user.email,\n            read=False\n        ).count()\n        return jsonify({'count': unread_count})\n    except Exception as e:\n        current_app.logger.warning(f\"Notifications not available: {e}\")\n        return jsonify({'count': 0})\n\n@notifications_bp.route('/api/notifications/<int:notification_id>/mark-read', methods=['POST'])\n@login_required\ndef mark_notification_read(notification_id):\n    \"\"\"Mark a notification as read\"\"\"\n    try:\n        notification = Notification.query.get(notification_id)\n        if not notification or notification.user_email != current_user.email:\n            return jsonify({'success': False, 'error': 'Notification not found'}), 404\n\n        notification.read = True\n        db.session.commit()\n\n        return jsonify({'success': True})\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@notifications_bp.route('/api/notifications/mark-all-read', methods=['POST'])\n@login_required\ndef mark_all_read():\n    \"\"\"Mark all notifications as read for current user\"\"\"\n    try:\n        Notification.query.filter_by(user_email=current_user.email, read=False)\\\n                         .update({'read': True})\n        db.session.commit()\n\n        return jsonify({'success': True})\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@notifications_bp.route('/notifications')\n@login_required\ndef notification_center():\n    \"\"\"Notification center page\"\"\"\n    notifications = Notification.query.filter_by(user_email=current_user.email)\\\n                                    .order_by(Notification.created_at.desc())\\\n                                    .limit(50).all()\n\n    return render_template('notification_center.html', notifications=notifications)","size_bytes":3957},"routes/reports.py":{"content":"from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, current_app\nfrom flask_login import login_required, current_user\nfrom models import db, Report, User\nfrom auth import login_required, role_required\nfrom utils import setup_approval_workflow_db, create_new_submission_notification, get_unread_count\nimport json\nimport uuid\nfrom datetime import datetime\n\nreports_bp = Blueprint('reports', __name__, url_prefix='/reports')\n\n@reports_bp.route('/new')\n@login_required\n@role_required(['Engineer', 'Automation Manager', 'PM', 'Admin'])\ndef new():\n    \"\"\"Show report type selection page\"\"\"\n    return render_template('report_selector.html')\n\n@reports_bp.route('/new/sat')\n@login_required\n@role_required(['Engineer', 'Automation Manager', 'Admin'])\ndef new_sat():\n    \"\"\"SAT report creation\"\"\"\n    return redirect(url_for('reports.new_sat_full'))\n\n@reports_bp.route('/new/sat/full')\n@login_required\n@role_required(['Engineer', 'Automation Manager', 'Admin'])\ndef new_sat_full():\n    \"\"\"Full SAT report form\"\"\"\n    try:\n        import uuid\n        from utils import get_unread_count\n        \n        # Create completely empty submission data structure for new forms\n        submission_data = {\n            'DOCUMENT_TITLE': '',\n            'PROJECT_REFERENCE': '',\n            'DOCUMENT_REFERENCE': '',\n            'DATE': '',\n            'CLIENT_NAME': '',\n            'REVISION': '',\n            'REVISION_DETAILS': '',\n            'REVISION_DATE': '',\n            'USER_EMAIL': current_user.email if current_user.is_authenticated else '',\n            'PREPARED_BY': current_user.full_name if current_user.is_authenticated else '',\n            'REVIEWED_BY_TECH_LEAD': '',\n            'REVIEWED_BY_PM': '',\n            'APPROVED_BY_CLIENT': '',\n            'PURPOSE': '',\n            'SCOPE': '',\n            'RELATED_DOCUMENTS': [],\n            'PRE_EXECUTION_APPROVAL': [],\n            'POST_EXECUTION_APPROVAL': [],\n            'PRE_TEST_REQUIREMENTS': [],\n            'KEY_COMPONENTS': [],\n            'IP_RECORDS': [],\n            'SIGNAL_LISTS': [],\n            'DIGITAL_OUTPUTS': [],\n            'ANALOGUE_INPUTS': [],\n            'ANALOGUE_OUTPUTS': [],\n            'MODBUS_DIGITAL_LISTS': [],\n            'MODBUS_ANALOGUE_LISTS': [],\n            'PROCESS_TEST': [],\n            'SCADA_VERIFICATION': [],\n            'TRENDS_TESTING': [],\n            'ALARM_LIST': []\n        }\n        \n        # Completely clear any cached form data for new reports\n        unread_count = get_unread_count()\n        submission_id = str(uuid.uuid4())\n        \n        # Don't load wizard_data for new reports - start completely fresh        \n        return render_template('SAT.html', \n                             submission_data=submission_data,\n                             submission_id=submission_id,\n                             unread_count=unread_count,\n                             is_new_report=True)\n    except Exception as e:\n        current_app.logger.error(f\"Error rendering SAT form: {e}\")\n        # Provide minimal data structure even on error\n        submission_data = {}\n        return render_template('SAT.html', \n                             submission_data=submission_data,\n                             submission_id='',\n                             unread_count=0)","size_bytes":3309},"routes/status.py":{"content":"from flask import Blueprint, render_template, redirect, url_for, flash, current_app, send_file\nimport os\nimport json\nimport tempfile\nimport shutil\nfrom flask_login import current_user, login_required\nimport datetime as dt\n\nstatus_bp = Blueprint('status', __name__)\n\n@status_bp.route('/<submission_id>')\n@login_required\ndef view_status(submission_id):\n    \"\"\"View a specific submission with auto-download\"\"\"\n    from models import Report, SATReport\n\n    # Check if submission_id is valid\n    if not submission_id or submission_id == 'None':\n        flash('Invalid submission ID.', 'error')\n        return redirect(url_for('dashboard.home'))\n\n    report = Report.query.filter_by(id=submission_id).first()\n    if not report:\n        flash('Report not found.', 'error')\n        return redirect(url_for('dashboard.home'))\n\n    sat_report = SATReport.query.filter_by(report_id=report.id).first()\n    if not sat_report:\n        flash('Report data not found.', 'error')\n        return redirect(url_for('dashboard.home'))\n\n    try:\n        stored_data = json.loads(sat_report.data_json) if sat_report.data_json else {}\n    except json.JSONDecodeError:\n        stored_data = {}\n\n    approvals = json.loads(report.approvals_json) if report.approvals_json else []\n\n    # Determine overall status\n    statuses = [a.get(\"status\", \"pending\") for a in approvals]\n    if \"rejected\" in statuses:\n        overall_status = \"rejected\"\n    elif all(status == \"approved\" for status in statuses):\n        overall_status = \"approved\"\n    elif any(status == \"approved\" for status in statuses):\n        overall_status = \"partially_approved\"\n    else:\n        overall_status = \"pending\"\n\n    # Get submission data context with fallbacks\n    submission_data = stored_data.get(\"context\", {})\n    if not submission_data:\n        submission_data = stored_data  # Fallback if context doesn't exist\n\n    # Check if report files exist\n    pdf_path = os.path.join(current_app.config['OUTPUT_DIR'], f'SAT_Report_{submission_id}_Final.pdf')\n    docx_path = os.path.join(current_app.config['OUTPUT_DIR'], f'SAT_Report_{submission_id}_Final.docx')\n\n    download_available = os.path.exists(pdf_path) or os.path.exists(docx_path)\n    has_pdf = os.path.exists(pdf_path)\n\n    # Determine if current user can edit this report\n    can_edit = False\n    if current_user.role == 'Admin':\n        can_edit = True  # Admin can edit any report\n    elif current_user.role == 'Engineer' and current_user.email == report.user_email:\n        # Engineers can edit their own reports until approved by Automation Manager\n        tm_approved = any(a.get(\"status\") == \"approved\" and a.get(\"stage\") == 1 for a in approvals)\n        can_edit = not tm_approved\n    elif current_user.role == 'Automation Manager':\n        # Automation Manager can edit reports until approved by PM\n        pm_approved = any(a.get(\"status\") == \"approved\" and a.get(\"stage\") == 2 for a in approvals)\n        can_edit = not pm_approved\n\n    # Build context similar to old version\n    context = {\n        \"submission_id\": submission_id,\n        \"submission_data\": submission_data,\n        \"approvals\": approvals,\n        \"locked\": report.locked,\n        \"can_edit\": can_edit,\n        \"created_at\": report.created_at.strftime('%Y-%m-%d %H:%M:%S') if isinstance(report.created_at, dt.datetime) else report.created_at,\n        \"updated_at\": report.updated_at.strftime('%Y-%m-%d %H:%M:%S') if isinstance(report.updated_at, dt.datetime) else report.updated_at,\n        \"user_email\": report.user_email,\n        \"document_title\": submission_data.get(\"DOCUMENT_TITLE\", \"SAT Report\"),\n        \"project_reference\": submission_data.get(\"PROJECT_REFERENCE\", \"\"),\n        \"client_name\": submission_data.get(\"CLIENT_NAME\", \"\"),\n        \"prepared_by\": submission_data.get(\"PREPARED_BY\", \"\"),\n        \"overall_status\": overall_status,\n        \"download_available\": download_available,\n        \"has_pdf\": has_pdf,\n        \"auto_download\": True\n    }\n\n    return render_template('status.html', **context)\n\n@status_bp.route('/download/<submission_id>')\n@login_required\ndef download_report(submission_id):\n    \"\"\"Download the generated report\"\"\"\n    try:\n        # Validate submission ID\n        if not submission_id or submission_id == 'None':\n            current_app.logger.error(f\"Invalid submission ID: {submission_id}\")\n            flash('Invalid submission ID.', 'error')\n            return redirect(url_for('dashboard.home'))\n\n        # Check if we already have a generated file first (bypass database if needed)\n        permanent_path = os.path.join(current_app.config['OUTPUT_DIR'], f'SAT_Report_{submission_id}_Final.docx')\n        \n        if os.path.exists(permanent_path):\n            current_app.logger.info(f\"Found existing report file: {permanent_path}\")\n            try:\n                # Try to get document title from database, but don't fail if database is down\n                from models import Report, SATReport\n                report = Report.query.filter_by(id=submission_id).first()\n                if report:\n                    sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n                    if sat_report and sat_report.data_json:\n                        stored_data = json.loads(sat_report.data_json)\n                        context_data = stored_data.get(\"context\", {})\n                        doc_title = context_data.get(\"DOCUMENT_TITLE\", \"SAT_Report\")\n                    else:\n                        doc_title = \"SAT_Report\"\n                else:\n                    doc_title = \"SAT_Report\"\n            except Exception as db_error:\n                current_app.logger.warning(f\"Database error when getting title, using default: {db_error}\")\n                doc_title = \"SAT_Report\"\n            \n            # Clean the title for use in filename\n            safe_title = \"\".join(c if c.isalnum() or c in ['_', '-'] else \"_\" for c in doc_title)\n            download_name = f\"{safe_title}_{submission_id}.docx\"\n            \n            return send_file(permanent_path, as_attachment=True, download_name=download_name)\n\n        # If file doesn't exist, try to get data from database and generate\n        try:\n            from models import Report, SATReport\n            report = Report.query.filter_by(id=submission_id).first()\n            if not report:\n                current_app.logger.error(f\"Report not found in database: {submission_id}\")\n                flash('Report not found in database.', 'error')\n                return redirect(url_for('dashboard.home'))\n\n            sat_report = SATReport.query.filter_by(report_id=submission_id).first()\n            if not sat_report:\n                current_app.logger.error(f\"SAT report data not found: {submission_id}\")\n                flash('Report data not found.', 'error')\n                return redirect(url_for('dashboard.home'))\n\n            # Parse stored data\n            try:\n                stored_data = json.loads(sat_report.data_json) if sat_report.data_json else {}\n            except json.JSONDecodeError as json_error:\n                current_app.logger.error(f\"JSON decode error: {json_error}\")\n                stored_data = {}\n\n            context_data = stored_data.get(\"context\", {})\n            if not context_data:\n                current_app.logger.error(f\"No context data found for submission: {submission_id}\")\n                flash('No report data found.', 'error')\n                return redirect(url_for('status.view_status', submission_id=submission_id))\n\n        except Exception as db_error:\n            current_app.logger.error(f\"Database error: {db_error}\")\n            flash('Database connection error. Cannot generate report.', 'error')\n            return redirect(url_for('dashboard.home'))\n\n        # Generate fresh report\n        current_app.logger.info(f\"Generating fresh report for submission {submission_id}\")\n\n        try:\n            # Check template file exists\n            template_file = current_app.config.get('TEMPLATE_FILE', 'templates/SAT_Template.docx')\n            if not os.path.exists(template_file):\n                current_app.logger.error(f\"Template file not found: {template_file}\")\n                flash('Report template file not found.', 'error')\n                return redirect(url_for('status.view_status', submission_id=submission_id))\n\n            # Initialize DocxTemplate\n            from docxtpl import DocxTemplate, InlineImage\n            from docx.shared import Mm\n            doc = DocxTemplate(template_file)\n\n            # Process signatures from stored data\n            SIG_PREPARED = \"\"\n            if context_data.get(\"prepared_signature\"):\n                sig_path = os.path.join(current_app.config['SIGNATURES_FOLDER'], context_data[\"prepared_signature\"])\n                if os.path.exists(sig_path):\n                    try:\n                        SIG_PREPARED = InlineImage(doc, sig_path, width=Mm(40))\n                    except Exception as e:\n                        current_app.logger.error(f\"Error loading signature: {e}\")\n\n            # Process stored images\n            def load_stored_images(url_list, max_width_mm=150):\n                \"\"\"Load stored images from URLs\"\"\"\n                image_objects = []\n                upload_dir = os.path.join(current_app.config['UPLOAD_ROOT'], submission_id)\n\n                if not os.path.exists(upload_dir):\n                    current_app.logger.warning(f\"Upload directory not found: {upload_dir}\")\n                    return image_objects\n\n                for url in url_list:\n                    try:\n                        # Extract filename from URL\n                        filename = url.split('/')[-1]\n                        image_path = os.path.join(upload_dir, filename)\n\n                        if os.path.exists(image_path):\n                            try:\n                                from PIL import Image\n                                with Image.open(image_path) as img:\n                                    w, h = img.size\n\n                                # Calculate scale to fit max width\n                                scale = min(1, max_width_mm / (w * 0.264583))\n\n                                image_objects.append(\n                                    InlineImage(doc, image_path,\n                                        width=Mm(w * 0.264583 * scale),\n                                        height=Mm(h * 0.264583 * scale)\n                                    )\n                                )\n                            except Exception as e:\n                                current_app.logger.error(f\"Error processing stored image {filename}: {e}\")\n                                # Add default size if image processing fails\n                                try:\n                                    image_objects.append(\n                                        InlineImage(doc, image_path, width=Mm(100), height=Mm(80))\n                                    )\n                                except Exception as e2:\n                                    current_app.logger.error(f\"Failed to add image with default size: {e2}\")\n                        else:\n                            current_app.logger.warning(f\"Image file not found: {image_path}\")\n                    except Exception as e:\n                        current_app.logger.error(f\"Error loading stored image from {url}: {e}\")\n\n                return image_objects\n\n            # Load stored images safely\n            try:\n                scada_urls = json.loads(sat_report.scada_image_urls) if sat_report.scada_image_urls else []\n                trends_urls = json.loads(sat_report.trends_image_urls) if sat_report.trends_image_urls else []\n                alarm_urls = json.loads(sat_report.alarm_image_urls) if sat_report.alarm_image_urls else []\n            except Exception as json_error:\n                current_app.logger.error(f\"Error parsing image URLs: {json_error}\")\n                scada_urls = trends_urls = alarm_urls = []\n\n            scada_image_objects = load_stored_images(scada_urls)\n            trends_image_objects = load_stored_images(trends_urls)\n            alarm_image_objects = load_stored_images(alarm_urls)\n\n            # Build context for template rendering\n            render_context = dict(context_data)\n            render_context.update({\n                \"SIG_PREPARED\": SIG_PREPARED,\n                \"SCADA_IMAGES\": scada_image_objects,\n                \"TRENDS_IMAGES\": trends_image_objects,\n                \"ALARM_IMAGES\": alarm_image_objects,\n                \"SIG_APPROVER_1\": \"\",\n                \"SIG_APPROVER_2\": \"\",\n                \"SIG_APPROVER_3\": \"\",\n            })\n\n            # Render the document with proper error handling\n            try:\n                doc.render(render_context)\n                \n                # Ensure output directory exists\n                permanent_dir = current_app.config['OUTPUT_DIR']\n                os.makedirs(permanent_dir, exist_ok=True)\n                \n                # Save the document\n                doc.save(permanent_path)\n                \n                # Verify the file was created and has content\n                if not os.path.exists(permanent_path) or os.path.getsize(permanent_path) == 0:\n                    raise Exception(\"Document file was not created properly or is empty\")\n                    \n                current_app.logger.info(f\"Document saved successfully: {permanent_path} ({os.path.getsize(permanent_path)} bytes)\")\n                \n            except Exception as render_error:\n                current_app.logger.error(f\"Error rendering/saving document: {render_error}\", exc_info=True)\n                flash(f'Error generating report document: {str(render_error)}', 'error')\n                return redirect(url_for('status.view_status', submission_id=submission_id))\n\n            current_app.logger.info(f\"Fresh report generated: {permanent_path}\")\n\n            # Get document title for filename\n            doc_title = context_data.get(\"DOCUMENT_TITLE\", \"SAT_Report\")\n            safe_title = \"\".join(c if c.isalnum() or c in ['_', '-'] else \"_\" for c in doc_title)\n            download_name = f\"{safe_title}_{submission_id}.docx\"\n\n            # Return the file\n            return send_file(permanent_path, as_attachment=True, download_name=download_name)\n\n        except Exception as generation_error:\n            current_app.logger.error(f\"Error during report generation: {generation_error}\", exc_info=True)\n            flash('Error generating report for download.', 'error')\n            return redirect(url_for('status.view_status', submission_id=submission_id))\n\n    except Exception as e:\n        current_app.logger.error(f\"Error in download_report for {submission_id}: {e}\", exc_info=True)\n        flash('Error downloading report.', 'error')\n        return redirect(url_for('dashboard.home'))\n\n\n\n@status_bp.route('/list')\n@login_required\ndef list_submissions():\n    \"\"\"List all submissions for admin view\"\"\"\n    from models import Report, SATReport\n\n    try:\n        reports = Report.query.order_by(Report.created_at.desc()).all()\n        submission_list = []\n\n        for report in reports:\n            sat_report = SATReport.query.filter_by(report_id=report.id).first()\n            if not sat_report:\n                continue\n\n            try:\n                stored_data = json.loads(sat_report.data_json)\n            except json.JSONDecodeError:\n                stored_data = {}\n\n            # Determine overall status\n            if report.approvals_json:\n                try:\n                    approvals = json.loads(report.approvals_json)\n                    statuses = [a.get(\"status\", \"pending\") for a in approvals]\n                    if \"rejected\" in statuses:\n                        overall_status = \"rejected\"\n                    elif all(status == \"approved\" for status in statuses):\n                        overall_status = \"approved\"\n                    elif any(status == \"approved\" for status in statuses):\n                        overall_status = \"partially_approved\"\n                    else:\n                        overall_status = \"pending\"\n                except:\n                    overall_status = \"pending\"\n            else:\n                overall_status = \"draft\"\n\n            submission_list.append({\n                \"id\": report.id,\n                \"document_title\": stored_data.get(\"context\", {}).get(\"DOCUMENT_TITLE\", \"SAT Report\"),\n                \"client_name\": stored_data.get(\"context\", {}).get(\"CLIENT_NAME\", \"\"),\n                \"created_at\": report.created_at.strftime('%Y-%m-%d %H:%M:%S') if isinstance(report.created_at, dt.datetime) else report.created_at,\n                \"updated_at\": report.updated_at.strftime('%Y-%m-%d %H:%M:%S') if isinstance(report.updated_at, dt.datetime) else report.updated_at,\n                \"status\": overall_status,\n                \"user_email\": report.user_email\n            })\n\n        return render_template('submissions_list.html', submissions=submission_list)\n\n    except Exception as e:\n        current_app.logger.error(f\"Error fetching submissions list: {e}\")\n        flash('Error loading submissions.', 'error')\n        return render_template('submissions_list.html', submissions=[])","size_bytes":17226},"static/css/form.css":{"content":":root {\n  /* — CULLY BRAND COLORS FROM LOGO — */\n  --cully-primary: #4DD0E1;           /* Main teal from Cully logo */\n  --cully-primary-light: #80DEEA;     /* Lighter teal */\n  --cully-primary-dark: #26C6DA;      /* Darker teal */\n  --cully-secondary: #00BCD4;         /* Accent teal from logo */\n  --cully-secondary-light: #4FC3F7;   /* Light accent teal */\n  --cully-accent: #00ACC1;           /* Deep teal accent */\n  --cully-accent-light: #40C4FF;     /* Light accent blue */\n\n  /* — CONSISTENT ALIASES — */\n  --primary: #4DD0E1;\n  --primary-light: #80DEEA;\n  --primary-dark: #26C6DA;\n  --secondary: #00BCD4;\n  --secondary-light: #4FC3F7;\n  --accent: #00ACC1;\n  --accent-light: #40C4FF;\n\n  /* — TEXT AND BACKGROUNDS — */\n  --text-primary: #1e293b;\n  --text-secondary: #64748b;\n  --text-muted: #94a3b8;\n  --bg-primary: #f8fafc;\n  --bg-secondary: #f1f5f9;\n  --bg-card: #ffffff;\n  --border-color: #e2e8f0;\n  --glass-bg: rgba(255, 255, 255, 0.85);\n  --shadow-color: rgba(77, 208, 225, 0.1);\n  --shadow-lg: rgba(77, 208, 225, 0.15);\n\n  /* — SHARED — */\n  --border-radius: 12px;\n  --border-radius-sm: 8px;\n  --border-radius-lg: 16px;\n  --transition: 0.3s ease;\n  --spacing-xs: 0.25rem;\n  --spacing-sm: 0.5rem;\n  --spacing-md: 1rem;\n  --spacing-lg: 1.5rem;\n  --spacing-xl: 2rem;\n}\n\n/* Import notification styles */\n@import url('notifications.css');\n\n/* Base styling */\nbody {\n    font-family: 'Arial', sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f5f5f5;\n}\n\n* {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: 'Poppins', sans-serif;\n  color: var(--text);\n  background: linear-gradient(135deg, var(--bg-start), var(--bg-end));\n  min-height: 100vh;\n  line-height: 1.5;\n}\n\n/* — LOGO HEADER — */\n.logo-header {\n  text-align: left;\n  padding: 2rem 0 1rem;\n}\n.logo-header img {\n  height: 64px;\n  filter: drop-shadow(0 4px 6px rgba(0,0,0,0.1));\n}\n\n/* Modern Navigation Bar - Space Efficient */\n    .modern-nav {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      background: linear-gradient(135deg, white 0%, rgba(77, 208, 225, 0.05) 100%);\n      padding: 8px 16px; /* Reduced from 16px 32px */\n      box-shadow: 0 2px 8px rgba(77, 208, 225, 0.1); /* Reduced shadow */\n      border-bottom: 1px solid var(--cully-primary); /* Reduced from 2px */\n      margin-bottom: 0;\n      width: 100%;\n      box-sizing: border-box;\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n      overflow: hidden;\n      transition: all 0.3s ease;\n    }\n\n    /* Dynamic navigation sizing */\n    @media (max-width: 1200px) {\n      .modern-nav {\n        padding: 6px 12px;\n      }\n\n      .brand-text {\n        font-size: 16px;\n      }\n\n      .nav-actions {\n        gap: 8px;\n      }\n    }\n\n    @media (max-width: 768px) {\n      .modern-nav {\n        padding: 4px 8px;\n        flex-wrap: wrap;\n        gap: 4px;\n      }\n\n      .brand-text {\n        display: none; /* Hide brand text on small screens */\n      }\n\n      .brand-logo {\n        height: 28px; /* Smaller logo */\n      }\n    }\n\n    @media (max-width: 480px) {\n      .modern-nav {\n        padding: 2px 4px;\n        min-height: 40px;\n      }\n    }\n\n.nav-brand {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n}\n\n.brand-logo {\n  height: 40px;\n  width: auto;\n}\n\n.brand-text {\n  font-size: 18px;\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.nav-actions {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex-wrap: nowrap;\n}\n\n/* Quick Actions */\n.quick-table-access {\n  position: relative;\n  margin-right: 16px;\n}\n\n.quick-access-btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  background: linear-gradient(135deg, var(--cully-accent) 0%, var(--cully-primary) 100%);\n  color: white;\n  border: none;\n  border-radius: var(--border-radius-sm);\n  font-weight: 600;\n  font-size: 14px;\n  cursor: pointer;\n  transition: var(--transition);\n  box-shadow: 0 2px 8px rgba(77, 208, 225, 0.25);\n}\n\n.quick-access-btn:hover {\n  background: linear-gradient(135deg, var(--cully-accent-light) 0%, var(--cully-primary-light) 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(77, 208, 225, 0.4);\n}\n\n.quick-access-dropdown {\n  display: none;\n  position: absolute;\n  top: 100%;\n  left: 0;\n  background: white;\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n  min-width: 200px;\n  z-index: 1000;\n  opacity: 0;\n  visibility: hidden;\n  transform: translateY(-10px);\n  transition: all 0.3s ease;\n  margin-top: 8px;\n}\n\n.quick-access-dropdown.show {\n  display: block;\n  opacity: 1;\n  visibility: visible;\n  transform: translateY(0);\n}\n\n.quick-table-access.open .quick-access-dropdown {\n  display: block;\n  opacity: 1;\n  visibility: visible;\n  transform: translateY(0);\n}\n\n.quick-access-dropdown a {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 16px;\n  color: var(--text-primary);\n  text-decoration: none;\n  transition: var(--transition);\n  border-bottom: 1px solid var(--border-color);\n}\n\n.quick-access-dropdown a:last-child {\n  border-bottom: none;\n}\n\n.quick-access-dropdown a:hover {\n  background: var(--bg-secondary);\n  color: var(--primary);\n}\n\n.quick-access-dropdown i {\n  width: 16px;\n  text-align: center;\n}\n\n/* Special styling for logout option */\n.quick-access-dropdown a[href*=\"logout\"] {\n  color: #ef4444;\n}\n\n.quick-access-dropdown a[href*=\"logout\"]:hover {\n  background: #fee2e2;\n  color: #dc2626;\n}\n\n.quick-access-dropdown a[href*=\"logout\"] i {\n  color: #ef4444;\n}\n\n/* User Profile Section */\n.user-profile {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  position: relative;\n}\n\n.user-avatar {\n  width: 40px;\n  height: 40px;\n  background: linear-gradient(135deg, var(--cully-primary), var(--cully-primary-dark));\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  font-size: 18px;\n  box-shadow: 0 2px 10px rgba(77, 208, 225, 0.3);\n  border: 2px solid white;\n}\n\n.user-details {\n  cursor: pointer;\n  padding: 8px 12px;\n  border-radius: var(--border-radius-sm);\n  transition: var(--transition);\n  min-width: 120px;\n}\n\n.user-details:hover {\n  background: var(--bg-secondary);\n}\n\n.user-name {\n  font-weight: 600;\n  font-size: 14px;\n  color: var(--text-primary);\n  margin-bottom: 2px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 150px;\n}\n\n.user-role {\n  font-size: 12px;\n  color: var(--text-secondary);\n}\n\n/* User Dropdown Menu */\n.user-dropdown-menu {\n  position: absolute;\n  top: 100%;\n  right: 0;\n  background: white;\n  border: 1px solid var(--border-color);\n  border-radius: var(--border-radius);\n  box-shadow: 0 8px 25px rgba(0,0,0,0.15);\n  min-width: 200px;\n  z-index: 1000;\n  opacity: 0;\n  visibility: hidden;\n  transform: translateY(-10px);\n  transition: all 0.3s ease;\n  margin-top: 8px;\n}\n\n.user-dropdown-menu.show {\n  opacity: 1;\n  visibility: visible;\n  transform: translateY(0);\n}\n\n.user-dropdown-menu a {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  padding: 12px 16px;\n  color: var(--text-primary);\n  text-decoration: none;\n  transition: var(--transition);\n  border-bottom: 1px solid var(--border-color);\n}\n\n.user-dropdown-menu a:last-child {\n  border-bottom: none;\n}\n\n.user-dropdown-menu a:hover {\n  background: var(--bg-secondary);\n  color: var(--primary);\n}\n\n.user-dropdown-menu i {\n  width: 16px;\n  text-align: center;\n}\n\n.dropdown-divider {\n  height: 1px;\n  background: var(--border-color);\n  margin: 4px 0;\n}\n\n/* — WELCOME SCREEN — */\n.welcome-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  text-align: center;\n  background: linear-gradient(135deg, var(--primary) 0%, #2c5aa0 100%);\n  color: white;\n  padding: 2rem;\n}\n.welcome-page h2 {\n  font-size: 2.5rem;\n  color: var(--primary-light);\n  margin: 1rem 0;\n}\n.welcome-page p {\n  margin-bottom: 2rem;\n  color: #555;\n}\n\n/* — BUTTONS — */\n.btn-primary,\n.btn-secondary {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  transition: var(--transition);\n  text-decoration: none;\n}\n.btn-primary {\n  background: linear-gradient(135deg, var(--cully-primary) 0%, var(--cully-secondary) 100%);\n  color: white;\n  box-shadow: 0 6px 20px rgba(77, 208, 225, 0.3);\n  border: none;\n}\n.btn-primary:hover {\n  background: linear-gradient(135deg, var(--cully-primary-light) 0%, var(--cully-secondary-light) 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 8px 25px rgba(77, 208, 225, 0.4);\n}\n.btn-secondary {\n  background: transparent;\n  color: var(--primary-light);\n  border: 2px solid var(--primary-light);\n  box-shadow: 0 4px 12px var(--shadow-color);\n}\n.btn-secondary:hover {\n  background: rgba(47,132,189,0.1);\n  transform: translateY(-1px);\n}\n\n/* Save Progress Button */\n.save-progress-btn {\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  padding: 8px 16px;\n  background: linear-gradient(135deg, var(--cully-secondary) 0%, var(--cully-accent) 100%);\n  color: white;\n  border: none;\n  border-radius: var(--border-radius-sm);\n  font-weight: 600;\n  font-size: 14px;\n  cursor: pointer;\n  transition: var(--transition);\n  margin-right: 12px;\n  white-space: nowrap;\n  box-shadow: 0 2px 8px rgba(0, 188, 212, 0.25);\n}\n\n.save-progress-btn:hover {\n  background: linear-gradient(135deg, var(--cully-secondary-light) 0%, var(--cully-accent-light) 100%);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(0, 188, 212, 0.4);\n}\n\n.save-progress-btn i {\n  font-size: 14px;\n}\n\n/* — FULL-WIDTH CONTAINER SYSTEM — */\n.container {\n  max-width: none;\n  margin: 0;\n  padding: 0;\n  background: transparent;\n  border-radius: 0;\n  box-shadow: none;\n  backdrop-filter: none;\n  overflow-x: hidden;\n  width: 100vw;\n  box-sizing: border-box;\n}\n\n/* Override any existing container restrictions */\nbody .container {\n  width: 100vw !important;\n  max-width: none !important;\n  margin: 0 !important;\n  padding: 0 !important;\n}\n\n/* Body adjustments for full-width design */\nbody.dashboard-layout {\n  margin: 0;\n  padding: 0;\n  width: 100vw;\n  overflow-x: hidden;\n  box-sizing: border-box;\n  background: linear-gradient(135deg, var(--cully-primary-light) 0%, var(--cully-secondary-light) 50%, var(--cully-primary-light) 100%);\n  min-height: 100vh;\n}\n\n/* Admin container should use full viewport */\n.admin-container {\n      max-width: none;\n      margin: 0;\n      padding: 0;\n      width: 100vw;\n      box-sizing: border-box;\n    }\n\n    /* Full Width Layout Overrides */\n    .horizontal-progress-bar {\n      width: 100%;\n      margin: 16px 0;\n      padding: 20px;\n      box-sizing: border-box;\n    }\n\n    .full-width-content {\n      width: 100%;\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n    }\n\n    .form-step {\n      padding: 24px;\n      margin: 0;\n      width: 100%;\n      box-sizing: border-box;\n    }\nform fieldset {\n  border: none;\n  margin-bottom: 2rem;\n  display: none;\n  padding: 1rem 0;\n}\nform fieldset.active {\n  display: block;\n  animation: fadeIn 0.5s ease-out;\n}\n.step-legend {\n      font-size: 1.3rem; /* Reduced from 1.75rem */\n      font-weight: 700;\n      color: var(--cully-primary);\n      margin-bottom: 12px; /* Reduced from 24px */\n      display: flex;\n      align-items: center;\n      gap: 8px; /* Reduced from 12px */\n    }\n\n    .step-legend i {\n      color: var(--cully-secondary);\n      font-size: 1.1rem; /* Smaller icon */\n    }\n\n    /* Enhanced Form Sections */\n    .form-section {\n      background: linear-gradient(135deg, rgba(255, 255, 255, 0.95) 0%, rgba(248, 250, 252, 0.9) 100%);\n      border: 2px solid rgba(77, 208, 225, 0.15);\n      border-radius: var(--border-radius-lg);\n      padding: 32px;\n      margin: 24px 0;\n      box-shadow: 0 8px 32px rgba(77, 208, 225, 0.1);\n      backdrop-filter: blur(10px);\n      transition: all 0.3s ease;\n    }\n\n    .form-section:hover {\n      border-color: rgba(77, 208, 225, 0.3);\n      box-shadow: 0 12px 40px rgba(77, 208, 225, 0.15);\n      transform: translateY(-2px);\n    }\n\n    .form-section h4 {\n      color: var(--cully-primary);\n      font-size: 1.3rem;\n      font-weight: 700;\n      margin-bottom: 20px;\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      padding-bottom: 12px;\n      border-bottom: 2px solid var(--cully-primary-light);\n    }\n\n    .form-section h4 i {\n      font-size: 1.4rem;\n      color: var(--cully-secondary);\n    }\n\n/* — PROGRESS BAR — */\nnav.progress {\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  margin: 1.5rem 0;\n}\n.progress-step {\n  text-align: center;\n  cursor: pointer;\n  transition: var(--transition);\n}\n.progress-step.disabled {\n  opacity: 0.3;\n}\n.progress-step .circle {\n  width: 42px;\n  height: 42px;\n  margin: 0 auto 0.3rem;\n  border-radius: 50%;\n  background: #e0e0e0;\n  color: #555;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n}\n.progress-step.active .circle {\n  background: linear-gradient(135deg, var(--cully-primary) 0%, var(--cully-secondary) 100%);\n  color: #fff;\n  box-shadow: 0 0 20px rgba(77, 208, 225, 0.5);\n  border: 2px solid var(--cully-primary-light);\n}\n.progress-step span {\n  display: block;\n  font-size: 0.85rem;\n  color: var(--text);\n}\n\n/* — LABELS & INPUTS — */\nlabel {\n  display: block;\n  margin-top: 1.2rem;\n  font-weight: 500;\n}\n.required {\n  color: var(--accent);\n}\ninput, textarea, select {\n  width: 100%;\n  margin-top: 0.4rem;\n  padding: 0.75rem 1rem;\n  font-size: 1rem;\n  border: none;\n  border-radius: var(--border-radius);\n  background: #f5f5f5;\n  box-shadow: inset 0 2px 5px var(--shadow-color);\n  transition: var(--transition);\n}\ninput:focus, textarea:focus, select:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(47,132,189,0.2);\n}\nselect {\n  appearance: none;\n  background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg width='10' height='5' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0l5 5 5-5z' fill='%23666'/%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 1rem center;\n  background-size: 10px 5px;\n}\ntextarea { min-height: 100px; resize: vertical; }\n\n/* — ERROR TEXT — */\n.error {\n  display: none;\n  color: #e53935;\n  font-size: 0.85rem;\n  margin-top: 0.3rem;\n}\ninput:invalid + .error,\ntextarea:invalid + .error {\n  display: block;\n}\n\n/* ===== COMPLETE RESPONSIVE DESIGN SYSTEM ===== */\n\n/* Main Layout - Vertical Sidebar with Full Width Content */\n    .main-layout {\n      display: flex;\n      flex-direction: row;\n      min-height: calc(100vh - 80px);\n      width: 100vw;\n      max-width: 100vw;\n      margin: 0;\n      gap: 0;\n      padding: 0;\n      overflow-x: hidden;\n    }\n\n    /* Vertical Progress Sidebar */\n    .app-sidebar {\n      width: 320px;\n      min-width: 320px;\n      flex-shrink: 0;\n      background: rgba(255, 255, 255, 0.98);\n      backdrop-filter: blur(10px);\n      border-radius: 0 16px 16px 0;\n      padding: 24px;\n      height: calc(100vh - 80px);\n      box-shadow: 4px 0 20px rgba(0,0,0,0.08);\n      border: 1px solid var(--border-color);\n      border-left: none;\n      box-sizing: border-box;\n      overflow-y: auto;\n      position: sticky;\n      top: 0;\n    }\n\n    /* Main Content Area - Full Width Remaining Space */\n    .app-content {\n      flex: 1;\n      min-width: 0;\n      width: calc(100vw - 320px);\n      max-width: calc(100vw - 320px);\n      background: rgba(255, 255, 255, 0.98);\n      backdrop-filter: blur(15px);\n      border-radius: 16px 0 0 16px;\n      padding: 24px;\n      box-shadow: 0 4px 20px rgba(0,0,0,0.08);\n      border: 1px solid var(--border-color);\n      border-right: none;\n      box-sizing: border-box;\n      overflow-x: auto;\n      overflow-y: auto;\n      height: calc(100vh - 80px);\n    }\n\n    /* Vertical Progress Steps */\n    .progress-nav {\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n      padding: 0;\n      width: 100%;\n      box-sizing: border-box;\n    }\n\n    .progress-step {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      gap: 16px;\n      padding: 16px;\n      border-radius: var(--border-radius-sm);\n      cursor: pointer;\n      transition: var(--transition);\n      border: 1px solid transparent;\n      text-align: left;\n      width: 100%;\n      background: rgba(255, 255, 255, 0.9);\n      box-shadow: 0 2px 8px rgba(0,0,0,0.05);\n      position: relative;\n    }\n\n.step-circle {\n      width: 36px;\n      height: 36px;\n      border-radius: 50%;\n      background: #e2e8f0;\n      color: var(--text-secondary);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      font-weight: 600;\n      font-size: 16px;\n      transition: var(--transition);\n      flex-shrink: 0;\n      border: 2px solid #f1f5f9;\n    }\n\n    .step-info {\n      display: flex;\n      flex-direction: column;\n      flex: 1;\n      min-width: 0;\n    }\n\n    .step-title {\n      font-weight: 600;\n      font-size: 14px;\n      margin-bottom: 4px;\n      line-height: 1.2;\n      color: var(--text-primary);\n    }\n\n    .step-description {\n      font-size: 12px;\n      opacity: 0.8;\n      line-height: 1.3;\n      color: var(--text-secondary);\n    }\n\n    .progress-step:hover {\n      background: rgba(77, 208, 225, 0.05);\n      border-color: rgba(77, 208, 225, 0.2);\n      transform: translateY(-1px);\n    }\n\n    .progress-step.active {\n      background: rgba(77, 208, 225, 0.1);\n      border-color: var(--cully-primary-light);\n    }\n\n    .progress-step.active .step-circle {\n      background: linear-gradient(135deg, var(--cully-primary), var(--cully-primary-dark));\n      color: white;\n      box-shadow: 0 4px 15px rgba(77, 208, 225, 0.4);\n      border-color: var(--cully-primary);\n    }\n\n    .progress-step.active .step-title {\n      color: var(--cully-primary);\n      font-weight: 700;\n    }\n\n    .progress-step.active .step-description {\n      color: var(--cully-primary-dark);\n      opacity: 0.9;\n    }\n\n    .progress-step.completed .step-circle {\n      background: var(--cully-primary-light);\n      color: white;\n      border-color: var(--cully-primary-light);\n    }\n\n    .progress-step.completed .step-title {\n      color: var(--cully-primary-dark);\n    }\n\n/* Space-Efficient Cards */\n    .card {\n      background: white;\n      border-radius: var(--border-radius-sm);\n      border: 1px solid var(--border-color);\n      margin: 12px 0; /* Reduced from 24px */\n      overflow: hidden;\n      box-shadow: 0 1px 6px rgba(0, 0, 0, 0.04); /* Reduced shadow */\n    }\n\n    .card-header {\n      background: linear-gradient(135deg, var(--cully-primary) 0%, var(--cully-primary-light) 100%);\n      color: white;\n      padding: 10px 16px; /* Reduced from 16px 24px */\n      font-weight: 600;\n      font-size: 14px; /* Slightly smaller */\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .card-body {\n      padding: 12px; /* Reduced from 24px */\n    }\n\n/* Tables - Maximum Width Utilization */\n    .table-responsive, .table-container {\n      position: relative;\n      margin: 6px 0; /* Reduced margin */\n      border-radius: var(--border-radius-sm);\n      box-shadow: 0 1px 4px rgba(0,0,0,0.06);\n      background: white;\n      width: 100%;\n      max-width: 100%;\n      overflow-x: auto;\n      -webkit-overflow-scrolling: touch;\n    }\n\n    /* Base Table Styles - Full Width */\n    table {\n      width: 100%;\n      min-width: 100%;\n      border-collapse: collapse;\n      background: white;\n      border-radius: var(--border-radius-sm);\n      table-layout: fixed; /* Fixed layout for better control */\n      font-size: 12px; /* Optimized font size */\n    }\n\n/* Compact Table Headers */\n    .digital-signals th,\n    .digital-outputs th,\n    .analogue-inputs th,\n    .analogue-outputs th,\n    .approvals th,\n    .documents th,\n    .pretest-table th,\n    .key-components th,\n    .ip-records th,\n    .modbus-digital th,\n    .modbus-analogue th,\n    .process-tests th,\n    .scada-verification th,\n    .trends-testing th,\n    .alarm-signals th {\n      background: var(--cully-primary);\n      color: white;\n      padding: 8px 6px; /* Reduced from 14px 16px */\n      text-align: left;\n      font-weight: 600;\n      font-size: 11px; /* Reduced from 14px */\n      border-bottom: 1px solid var(--cully-primary-dark);\n      white-space: nowrap;\n      position: sticky;\n      top: 0;\n      z-index: 10;\n    }\n\n    /* Compact Table Cells */\n    .digital-signals td,\n    .digital-outputs td,\n    .analogue-inputs td,\n    .analogue-outputs td,\n    .approvals td,\n    .documents td,\n    .pretest-table td,\n    .key-components td,\n    .ip-records td,\n    .modbus-digital td,\n    .modbus-analogue td,\n    .process-tests td,\n    .scada-verification td,\n    .trends-testing td,\n    .alarm-signals td {\n      padding: 6px 4px; /* Reduced from 14px 16px */\n      border-bottom: 1px solid #f1f5f9;\n      color: var(--text-primary);\n      font-size: 12px; /* Reduced from 14px */\n      vertical-align: top;\n    }\n\n    /* Alternating row colors for better readability */\n    tbody tr:nth-child(even) {\n      background: #f8f9fa;\n    }\n\n    tbody tr:hover {\n      background: rgba(77, 208, 225, 0.08);\n    }\n\n/* Professional Form Controls */\ntbody td input,\ntbody td textarea,\ntbody td select {\n  width: 100%;\n  min-width: 0;\n  padding: 10px 12px;\n  border: 1px solid #e2e8f0;\n  border-radius: 6px;\n  font-size: 13px;\n  margin: 0;\n  line-height: 1.4;\n  background: white;\n  transition: all 0.25s ease;\n  box-shadow: 0 1px 2px rgba(0,0,0,0.05);\n  font-family: inherit;\n  box-sizing: border-box;\n}\n\n/* Focus States */\ntbody td input:focus,\ntbody td textarea:focus,\ntbody td select:focus {\n  outline: none;\n  border-color: var(--primary);\n  box-shadow: 0 0 0 2px rgba(77, 208, 225, 0.15);\n  background: #fefefe;\n}\n\ntbody td textarea {\n  min-height: 80px;\n  resize: vertical;\n  font-family: inherit;\n}\n\n/* Professional Action Buttons */\n.table-actions-cell {\n  text-align: center;\n  padding: 8px 4px !important;\n  min-width: 120px;\n}\n\n.table-action-buttons {\n  display: flex;\n  gap: 4px;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: nowrap;\n}\n\n.table-action-btn {\n  padding: 6px 8px;\n  border: none;\n  border-radius: 6px;\n  cursor: pointer;\n  font-size: 11px;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  min-width: 32px;\n  height: 28px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  white-space: nowrap;\n}\n\n.table-action-btn.edit-btn {\n  background: linear-gradient(135deg, #3b82f6, #2563eb);\n  color: white;\n  box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);\n}\n\n.table-action-btn.edit-btn:hover {\n  background: linear-gradient(135deg, #2563eb, #1d4ed8);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(59, 130, 246, 0.4);\n}\n\n.table-action-btn.delete-btn {\n  background: linear-gradient(135deg, #ef4444, #dc2626);\n  color: white;\n  box-shadow: 0 2px 4px rgba(239, 68, 68, 0.3);\n}\n\n.table-action-btn.delete-btn:hover {\n  background: linear-gradient(135deg, #dc2626, #b91c1c);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(239, 68, 68, 0.4);\n}\n\n.table-action-btn.move-btn {\n  background: linear-gradient(135deg, #6b7280, #4b5563);\n  color: white;\n  box-shadow: 0 2px 4px rgba(107, 114, 128, 0.3);\n}\n\n.table-action-btn.move-btn:hover {\n  background: linear-gradient(135deg, #4b5563, #374151);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(107, 114, 128, 0.4);\n}\n\n/* Legacy support for existing remove buttons */\n.remove-row-btn, .btn-remove {\n  background: linear-gradient(135deg, #ef4444, #dc2626);\n  color: white;\n  border: none;\n  padding: 8px 12px;\n  border-radius: 8px;\n  cursor: pointer;\n  font-size: 12px;\n  font-weight: 600;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(239, 68, 68, 0.3);\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n}\n\n.remove-row-btn:hover, .btn-remove:hover {\n  background: linear-gradient(135deg, #dc2626, #b91c1c);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 8px rgba(239, 68, 68, 0.4);\n}\n\n/* Intelligent Column Sizing for Professional Layout */\n\n/* Digital Signals Table - Precise Column Widths */\n.digital-signals th:nth-child(1), .digital-signals td:nth-child(1) { width: 60px; max-width: 60px; } /* S.No */\n.digital-signals th:nth-child(2), .digital-signals td:nth-child(2) { width: 80px; max-width: 80px; } /* Rack No */\n.digital-signals th:nth-child(3), .digital-signals td:nth-child(3) { width: 120px; max-width: 120px; } /* Module Position */\n.digital-signals th:nth-child(4), .digital-signals td:nth-child(4) { width: 140px; max-width: 140px; } /* Signal TAG */\n.digital-signals th:nth-child(5), .digital-signals td:nth-child(5) { width: 200px; min-width: 200px; } /* Description */\n.digital-signals th:nth-child(6), .digital-signals td:nth-child(6) { width: 100px; max-width: 100px; } /* Result */\n.digital-signals th:nth-child(7), .digital-signals td:nth-child(7) { width: 150px; max-width: 150px; } /* Punch Item */\n.digital-signals th:nth-child(8), .digital-signals td:nth-child(8) { width: 120px; max-width: 120px; } /* Verified By */\n.digital-signals th:nth-child(9), .digital-signals td:nth-child(9) { width: 150px; min-width: 150px; } /* Comment */\n.digital-signals th:nth-child(10), .digital-signals td:nth-child(10) { width: 80px; max-width: 80px; } /* Action */\n\n/* Digital Outputs Table */\n.digital-outputs th:nth-child(1), .digital-outputs td:nth-child(1) { width: 60px; max-width: 60px; }\n.digital-outputs th:nth-child(2), .digital-outputs td:nth-child(2) { width: 80px; max-width: 80px; }\n.digital-outputs th:nth-child(3), .digital-outputs td:nth-child(3) { width: 120px; max-width: 120px; }\n.digital-outputs th:nth-child(4), .digital-outputs td:nth-child(4) { width: 140px; max-width: 140px; }\n.digital-outputs th:nth-child(5), .digital-outputs td:nth-child(5) { width: 200px; min-width: 200px; }\n.digital-outputs th:nth-child(6), .digital-outputs td:nth-child(6) { width: 100px; max-width: 100px; }\n.digital-outputs th:nth-child(7), .digital-outputs td:nth-child(7) { width: 150px; max-width: 150px; }\n.digital-outputs th:nth-child(8), .digital-outputs td:nth-child(8) { width: 120px; max-width: 120px; }\n.digital-outputs th:nth-child(9), .digital-outputs td:nth-child(9) { width: 150px; min-width: 150px; }\n.digital-outputs th:nth-child(10), .digital-outputs td:nth-child(10) { width: 80px; max-width: 80px; }\n\n/* Analogue Inputs Table */\n.analogue-inputs th:nth-child(1), .analogue-inputs td:nth-child(1) { width: 60px; max-width: 60px; }\n.analogue-inputs th:nth-child(2), .analogue-inputs td:nth-child(2) { width: 80px; max-width: 80px; }\n.analogue-inputs th:nth-child(3), .analogue-inputs td:nth-child(3) { width: 120px; max-width: 120px; }\n.analogue-inputs th:nth-child(4), .analogue-inputs td:nth-child(4) { width: 140px; max-width: 140px; }\n.analogue-inputs th:nth-child(5), .analogue-inputs td:nth-child(5) { width: 200px; min-width: 200px; }\n.analogue-inputs th:nth-child(6), .analogue-inputs td:nth-child(6) { width: 100px; max-width: 100px; }\n.analogue-inputs th:nth-child(7), .analogue-inputs td:nth-child(7) { width: 150px; max-width: 150px; }\n.analogue-inputs th:nth-child(8), .analogue-inputs td:nth-child(8) { width: 120px; max-width: 120px; }\n.analogue-inputs th:nth-child(9), .analogue-inputs td:nth-child(9) { width: 150px; min-width: 150px; }\n.analogue-inputs th:nth-child(10), .analogue-inputs td:nth-child(10) { width: 80px; max-width: 80px; }\n\n/* Analogue Outputs Table */\n.analogue-outputs th:nth-child(1), .analogue-outputs td:nth-child(1) { width: 60px; max-width: 60px; }\n.analogue-outputs th:nth-child(2), .analogue-outputs td:nth-child(2) { width: 80px; max-width: 80px; }\n.analogue-outputs th:nth-child(3), .analogue-outputs td:nth-child(3) { width: 120px; max-width: 120px; }\n.analogue-outputs th:nth-child(4), .analogue-outputs td:nth-child(4) { width: 140px; max-width: 140px; }\n.analogue-outputs th:nth-child(5), .analogue-outputs td:nth-child(5) { width: 200px; min-width: 200px; }\n.analogue-outputs th:nth-child(6), .analogue-outputs td:nth-child(6) { width: 100px; max-width: 100px; }\n.analogue-outputs th:nth-child(7), .analogue-outputs td:nth-child(7) { width: 150px; max-width: 150px; }\n.analogue-outputs th:nth-child(8), .analogue-outputs td:nth-child(8) { width: 120px; max-width: 120px; }\n.analogue-outputs th:nth-child(9), .analogue-outputs td:nth-child(9) { width: 150px; min-width: 150px; }\n.analogue-outputs th:nth-child(10), .analogue-outputs td:nth-child(10) { width: 80px; max-width: 80px; }\n\n/* Other Tables - Flexible Widths */\n.approvals th:nth-child(1), .approvals td:nth-child(1) { width: 25%; }\n.approvals th:nth-child(2), .approvals td:nth-child(2) { width: 20%; }\n.approvals th:nth-child(3), .approvals td:nth-child(3) { width: 15%; }\n.approvals th:nth-child(4), .approvals td:nth-child(4) { width: 15%; }\n.approvals th:nth-child(5), .approvals td:nth-child(5) { width: 20%; }\n.approvals th:nth-child(6), .approvals td:nth-child(6) { width: 5%; }\n\n.documents th:nth-child(1), .documents td:nth-child(1) { width: 30%; }\n.documents th:nth-child(2), .documents td:nth-child(2) { width: 60%; }\n.documents th:nth-child(3), .documents td:nth-child(3) { width: 10%; }\n\n.key-components th:nth-child(1), .key-components td:nth-child(1) { width: 10%; }\n.key-components th:nth-child(2), .key-components td:nth-child(2) { width: 25%; }\n.key-components th:nth-child(3), .key-components td:nth-child(3) { width: 45%; }\n.key-components th:nth-child(4), .key-components td:nth-child(4) { width: 15%; }\n.key-components th:nth-child(5), .key-components td:nth-child(5) { width: 5%; }\n\n.ip-records th:nth-child(1), .ip-records td:nth-child(1) { width: 30%; }\n.ip-records th:nth-child(2), .ip-records td:nth-child(2) { width: 25%; }\n.ip-records th:nth-child(3), .ip-records td:nth-child(3) { width: 40%; }\n.ip-records th:nth-child(4), .ip-records td:nth-child(4) { width: 5%; }\n\n/* Perfect Input Alignment Within Table Cells */\n.digital-signals td input,\n.digital-signals td select,\n.digital-signals td textarea,\n.digital-outputs td input,\n.digital-outputs td select,\n.digital-outputs td textarea,\n.analogue-inputs td input,\n.analogue-inputs td select,\n.analogue-inputs td textarea,\n.analogue-outputs td input,\n.analogue-outputs td select,\n.analogue-outputs td textarea,\n.approvals td input,\n.approvals td select,\n.approvals td textarea,\n.documents td input,\n.documents td textarea,\n.pretest-table td input,\n.pretest-table td select,\n.pretest-table td textarea,\n.key-components td input,\n.key-components td textarea,\n.ip-records td input,\n.ip-records td textarea,\n.modbus-digital td input,\n.modbus-digital td select,\n.modbus-digital td textarea,\n.modbus-analogue td input,\n.modbus-analogue td select,\n.modbus-analogue td textarea,\n.process-tests td input,\n.process-tests td select,\n.process-tests td textarea,\n.scada-verification td input,\n.scada-verification td select,\n.scada-verification td textarea,\n.trends-testing td input,\n.trends-testing td select,\n.trends-testing td textarea,\n.alarm-signals td input,\n.alarm-signals td select,\n.alarm-signals td textarea {\n  width: calc(100% - 2px);\n  margin: 0;\n  padding: 6px 8px;\n  font-size: 12px;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  box-sizing: border-box;\n  background: white;\n  text-align: center;\n  vertical-align: middle;\n  outline: none;\n  transition: all 0.2s ease;\n}\n\n/* Special alignment for S.No column */\n.digital-signals td:nth-child(1) input,\n.digital-outputs td:nth-child(1) input,\n.analogue-inputs td:nth-child(1) input,\n.analogue-outputs td:nth-child(1) input {\n  text-align: center;\n  font-weight: 600;\n  color: var(--cully-primary);\n}\n\n/* Special styling for Result columns */\n.digital-signals td:nth-child(6) select,\n.digital-outputs td:nth-child(6) select,\n.analogue-inputs td:nth-child(6) select,\n.analogue-outputs td:nth-child(6) select {\n  text-align-last: center;\n  font-weight: 500;\n}\n\n/* Textarea specific styling */\n.digital-signals td textarea,\n.digital-outputs td textarea,\n.analogue-inputs td textarea,\n.analogue-outputs td textarea {\n  min-height: 60px;\n  resize: vertical;\n  text-align: left;\n  vertical-align: top;\n  padding: 8px;\n}\n\n/* Focus States */\n.digital-signals td input:focus,\n.digital-signals td select:focus,\n.digital-signals td textarea:focus,\n.digital-outputs td input:focus,\n.digital-outputs td select:focus,\n.digital-outputs td textarea:focus,\n.analogue-inputs td input:focus,\n.analogue-inputs td select:focus,\n.analogue-inputs td textarea:focus,\n.analogue-outputs td input:focus,\n.analogue-outputs td select:focus,\n.analogue-outputs td textarea:focus,\n.approvals td input:focus,\n.approvals td select:focus,\n.approvals td textarea:focus,\n.documents td input:focus,\n.documents td textarea:focus,\n.pretest-table td input:focus,\n.pretest-table td select:focus,\n.pretest-table td textarea:focus,\n.key-components td input:focus,\n.key-components td textarea:focus,\n.ip-records td input:focus,\n.ip-records td textarea:focus,\n.modbus-digital td input:focus,\n.modbus-digital td select:focus,\n.modbus-digital td textarea:focus,\n.modbus-analogue td input:focus,\n.modbus-analogue td select:focus,\n.modbus-analogue td textarea:focus,\n.process-tests td input:focus,\n.process-tests td select:focus,\n.process-tests td textarea:focus,\n.scada-verification td input:focus,\n.scada-verification td select:focus,\n.scada-verification td textarea:focus,\n.trends-testing td input:focus,\n.trends-testing td select:focus,\n.trends-testing td textarea:focus,\n.alarm-signals td input:focus,\n.alarm-signals td select:focus,\n.alarm-signals td textarea:focus {\n  border-color: var(--cully-primary);\n  box-shadow: 0 0 0 2px rgba(77, 208, 225, 0.15);\n  background: #fefefe;\n}\n\n/* — UTILITY BUTTON GROUP — */\n.button-group {\n  margin-top: 1.5rem;\n  display: flex;\n  gap: 1rem;\n}\n\n/* — ANIMATIONS — */\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes fadeOut {\n  from { opacity: 1; transform: scale(1); }\n  to { opacity: 0; transform: scale(0.95); }\n}\n\n/* — DYNAMIC ROW ANIMATIONS — */\n.fade-in {\n  animation: fadeIn 0.3s ease-out;\n}\n\n.fade-out {\n  animation: fadeOut 0.3s ease-out;\n  pointer-events: none;\n}\n\n/* — IMAGE PREVIEWS — */\n.file-list {\n  list-style: none;\n  margin-top: 0.5rem;\n}\n.file-list li {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n.file-list img.preview-thumb {\n  max-width: 60px;\n  max-height: 60px;\n  border-radius: var(--border-radius);\n  object-fit: cover;\n}\n\n.error {\n  color: #e74c3c;\n  font-size: 0.85rem;\n  display: none;\n}\n\n.form-step.invalid input:invalid {\n  border-color: #e74c3c;\n}\n\n.signature-pad-container {\n  border: 1px dashed #ccc;\n  margin-bottom: 20px;\n  height: 200px;\n  width: 100%;\n  background-color: #f9f9f9;\n}\n\n#sig_prepared_canvas {\n  width: 100%;\n  height: 100%;\n  cursor: crosshair;\n}\n\n.signature-pad-container {\n  position: relative;\n  width: 100%;\n  height: 150px;\n  border: 1px solid #ccc;\n}\n\n#sig_prepared_canvas {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n  /* Add a hint message */\n  .signature-pad-container::before {\n    content: \"Click and drag to sign here\";\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    color: #aaa;\n    pointer-events: none;\n    z-index: 1;\n  }\n\n\n.required-field {\n  border-left: 3px solid var(--accent);\n}\n\n.invalid-field {\n  border-color: #e74c3c;\n  box-shadow: 0 0 0 3px rgba(231, 76, 60, 0.2);\n}\n\n/* Error message styling */\n.error {\n  color: #e74c3c;\n  font-size: 0.85rem;\n  margin-top: 0.3rem;\n  display: none;\n  animation: fadeIn 0.3s ease-out;\n}\n\n/* Improved focus styles */\ninput:focus, textarea:focus, select:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(47,132,189,0.2);\n  border-color: var(--primary);\n}\n\n/* Signature pad improvements */\n.signature-pad-container {\n  position: relative;\n  border: 1px solid #ccc;\n  margin-bottom: 20px;\n  border-radius: var(--border-radius);\n  overflow: hidden;\n}\n\n.signature-pad-container:before {\n  content: \"Sign here\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: #ccc;\n  font-size: 1.5rem;\n  pointer-events: none;\n  opacity: 0.7;\n  z-index: 0;\n}\n\n/* Button styles */\nbutton[type=\"submit\"].btn-primary {\n  position: relative;\n  background: var(--primary);\n  color: white;\n  font-weight: 600;\n  border: none;\n  padding: 0.75rem 1.5rem;\n  border-radius: var(--border-radius);\n  cursor: pointer;\n  transition: var(--transition);\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\nbutton[type=\"submit\"].btn-primary:hover {\n  background: var(--primary-light);\n  transform: translateY(-2px);\n}\n\nbutton[type=\"submit\"].btn-primary:active {\n  transform: translateY(0);\n}\n\n/* Form step transition improvements */\n.form-step {\n  transition: opacity 0.3s ease;\n  opacity: 0;\n  display: none;\n}\n\n.form-step.active {\n  opacity: 1;\n  display: block;\n  animation: fadeInStep 0.5s ease-out;\n}\n\n@keyframes fadeInStep {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n/* File upload styling improvements */\ninput[type=\"file\"] {\n  border: 2px dashed #ccc;\n  padding: 20px;\n  background: #f8f9fa;\n  border-radius: var(--border-radius);\n  transition: border-color 0.3s;\n  cursor: pointer;\n}\n\ninput[type=\"file\"]:hover {\n  border-color: var(--primary-light);\n}\n\n.file-list {\n  margin-top: 10px;\n}\n\n.file-list li {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  padding: 8px;\n  background: white;\n  border-radius: var(--border-radius);\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n.file-list img.preview-thumb {\n  width: 60px;\n  height: 60px;\n  object-fit: cover;\n  border-radius: 4px;\n  margin-right: 10px;\n}\n\n.file-list button {\n  background: transparent;\n  border: none;\n  color: #e74c3c;\n  cursor: pointer;\n  padding: 5px;\n  margin-left: 10px;\n}\n\n/* Tooltip styling */\n.tooltip {\n  position: relative;\n  display: inline-block;\n  margin-left: 5px;\n  cursor: help;\n}\n\n.tooltip .tooltip-icon {\n  width: 18px;\n  height: 18px;\n  background: var(--primary);\n  color: white;\n  border-radius: 50%;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 12px;\n  font-weight: bold;\n}\n\n.tooltip .tooltip-text {\n  visibility: hidden;\n  width: 200px;\n  background: #333;\n  color: white;\n  text-align: center;\n  border-radius: 6px;\n  padding: 8px;\n  position: absolute;\n  z-index: 1;\n  bottom: 125%;\n  left: 50%;\n  transform: translateX(-50%);\n  opacity: 0;\n  transition: opacity 0.3s;\n  font-size: 0.8rem;\n  pointer-events: none;\n}\n\n.tooltip:hover .tooltip-text {\n  visibility: visible;\n  opacity: 1;\n}\n\n/* Mobile Responsiveness Improvements */\n@media screen and (max-width: 768px) {\n  /* General styles */\n  .container {\n    padding: 1rem;\n    margin: 1rem;\n  }\n\n  /* Form controls become full width */\n  input, textarea, select {\n    width: 100%;\n    padding: 0.75rem;\n  }\n\n  /* Logo size adjustment */\n  .logo-header img {\n    height: 40px;\n  }\n\n  /* Button group stacking */\n  .button-group {\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n\n  .button-group button,\n  .button-group a {\n    width: 100%;\n    text-align: center;\n  }\n\n  /* Progress navigation stacking */\n  nav.progress {\n    flex-wrap: wrap;\n    gap: 0.5rem;\n  }\n\n  .progress-step {\n    width: 30%; /* 3 steps per row */\n  }\n\n  /* Tables responsive handling */\n  .table-responsive {\n    max-width: 100%;\n    overflow-x: auto;\n  }\n\n  table {\n    min-width: 600px; /* Ensure minimum width for horizontal scroll */\n  }\n\n  /* File upload improvements */\n  input[type=\"file\"] {\n    padding: 0.5rem;\n  }\n\n  .file-list li {\n    flex-wrap: wrap;\n  }\n\n  .file-list .preview-thumb {\n    width: 40px;\n    height: 40px;\n  }\n\n  /* Card adjustments */\n  .card {\n    margin: 1rem 0;\n  }\n\n  .card-header {\n    padding: 0.6rem 1rem;\n  }\n\n  .card-body {\n    padding: 0.75rem;\n  }\n\n  /* Signature pad sizing */\n  .signature-pad-container {\n    height: 150px;\n  }\n\n  /* Status page adjustments */\n  .status-badge {\n    display: block;\n    width: 100%;\n  }\n\n  .progress-tracker .step-content {\n    padding: 10px;\n  }\n\n  .document-info h3 {\n    font-size: 1.2rem;\n  }\n}\n\n/* Portrait orientation on small screens */\n@media (max-width: 767px) and (orientation: portrait) {\n  /* No changes needed for this specific media query based on the provided diff */\n}\n\n/* Landscape orientation on small screens */\n@media (max-width: 767px) and (orientation: landscape) {\n  .progress-sidebar {\n    position: fixed;\n    left: -250px;\n    top: 0;\n    height: 100vh;\n    width: 250px;\n    z-index: 1000;\n    transition: left 0.3s ease;\n    background: white;\n    box-shadow: 2px 0 10px rgba(0,0,0,0.1);\n  }\n\n  .progress-sidebar.open {\n    left: 0;\n  }\n\n  .form-container {\n    width: 100%;\n    max-width: 100%;\n    margin-left: 0;\n  }\n\n  .sidebar-toggle {\n    display: block;\n    position: fixed;\n    top: 10px;\n    left: 10px;\n    z-index: 1001;\n    background: var(--primary);\n    color: white;\n    border: none;\n    padding: 8px;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n}\n\n/* Report grid responsiveness */\n@media (max-width: 768px) {\n  .report-grid {\n    grid-template-columns: 1fr;\n    gap: 1.5rem;\n    padding: 0 1rem;\n  }\n\n  .report-type-page h1 {\n    font-size: 2rem;\n  }\n\n  .report-card {\n    padding: 1.5rem;\n  }\n\n  .report-icon {\n    font-size: 2.5rem;\n  }\n}\n\n/* Ultra-wide screens (1600px+) - Maximum space utilization with enhanced readability */\n@media (min-width: 1600px) {\n  .main-layout {\n    max-width: none;\n    margin: 0;\n  }\n\n  .progress-sidebar {\n    width: 200px;\n    min-width: 200px;\n  }\n\n  .form-container {\n    width: calc(100vw - 200px);\n    max-width: calc(100vw - 200px);\n    padding: 20px 32px;\n  }\n\n  #step-8 .form-container {\n    padding: 16px 24px !important;\n  }\n\n  #step-8 table {\n    font-size: 14px;\n    min-width: 1400px;\n  }\n\n  #step-8 th {\n    padding: 14px 10px;\n    font-size: 13px;\n  }\n\n  #step-8 td {\n    padding: 12px 8px;\n  }\n\n  #step-8 td input, #step-8 td select, #step-8 td textarea {\n    font-size: 13px;\n    padding: 8px 10px;\n    min-height: 36px;\n  }\n}\n\n/* Table scroll indicators for better UX */\n#step-8 .table-container {\n  position: relative;\n}\n\n#step-8 .table-container::before {\n  content: \"← Scroll horizontally to view all columns →\";\n  position: absolute;\n  bottom: -25px;\n  left: 50%;\n  transform: translateX(-50%);\n  font-size: 11px;\n  color: #64748b;\n  font-style: italic;\n  white-space: nowrap;\n  opacity: 0.8;\n  pointer-events: none;\n  z-index: 5;\n}\n\n/* Hide scroll indicator on larger screens where it's not needed */\n@media (min-width: 1400px) {\n  #step-8 .table-container::before {\n    display: none;\n  }\n}\n\n/* Enhanced table styling for better data visibility */\n#step-8 .table-container {\n  background: linear-gradient(135deg, #ffffff 0%, #f8f9fc 100%);\n  border: 2px solid #e2e8f0;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08), 0 1px 3px rgba(0, 0, 0, 0.1);\n}\n\n/* Special styling for first column (S.No) */\n#step-8 td:nth-child(1) input {\n  text-align: center;\n  font-weight: 600;\n  color: var(--admin-primary);\n  background: #f0f9ff;\n}\n\n/* Enhanced dropdown styling */\n#step-8 td select {\n  appearance: none;\n  background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg width='10' height='5' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 0l5 5 5-5z' fill='%23666'/%3E%3C/svg%3E\");\n  background-repeat: no-repeat;\n  background-position: right 8px center;\n  background-size: 10px 5px;\n  padding-right: 28px;\n}\n\n/* Result column special styling */\n#step-8 td:nth-child(6) select {\n  font-weight: 600;\n}\n\n#step-8 td:nth-child(6) select option[value=\"Pass\"] {\n  background: #d1fae5;\n  color: #065f46;\n}\n\n#step-8 td:nth-child(6) select option[value=\"Fail\"] {\n  background: #fee2e2;\n  color: #991b1b;\n}\n\n#step-8 td:nth-child(6) select option[value=\"N/A\"] {\n  background: #f3f4f6;\n  color: #374151;\n}\n\n/* Improved table responsiveness */\n.table-responsive {\n  overflow-x: auto;\n  position: relative;\n}\n\n.mobile-table-notice {\n  display: none;\n  text-align: center;\n  color: #666;\n  font-style: italic;\n  margin-bottom: 5px;\n  font-size: 0.8rem;\n}\n\n.mobile-table-wrapper::after {\n  display: none;\n}\n\n/* Only show scroll indicators when actually needed */\n@media (max-width: 1200px) {\n  .table-responsive table {\n    min-width: 800px;\n  }\n\n  .mobile-table-notice {\n    display: block;\n  }\n\n  .mobile-table-wrapper::after {\n    content: \"→\";\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    transform: translateY(-50%);\n    font-size: 1.5rem;\n    color: rgba(0,0,0,0.3);\n    animation: pulse 1.5s infinite;\n    pointer-events: none;\n    display: block;\n  }\n}\n\n/* Pre-submission checklist improvements */\n.checklist-container {\n  background: white;\n  border-radius: var(--border-radius);\n  padding: var(--spacing-lg);\n  margin: var(--spacing-lg) 0;\n  box-shadow: 0 2px 10px var(--shadow-color);\n}\n\n.checklist-header {\n  background: var(--primary);\n  color: white;\n  padding: var(--spacing-md) var(--spacing-lg);\n  margin: calc(-1 * var(--spacing-lg)) calc(-1 * var(--spacing-lg)) var(--spacing-lg);\n  border-radius: var(--border-radius) var(--border-radius) 0 0;\n  font-weight: 600;\n  font-size: 1.1rem;\n}\n\n.checklist-item {\n  display: flex;\n  align-items: flex-start;\n  gap: var(--spacing-md);\n  padding: var(--spacing-md) 0;\n  border-bottom: 1px solid var(--border-color);\n}\n\n.checklist-item:last-child {\n  border-bottom: none;\n}\n\n.checklist-item input[type=\"checkbox\"] {\n  width: 18px;\n  height: 18px;\n  margin: 0;\n  margin-top: 2px;\n  accent-color: var(--primary);\n}\n\n.checklist-text {\n  flex: 1;\n  line-height: 1.5;\n}\n\n.checklist-text.required {\n  font-weight: 600;\n  color: var(--text-primary);\n}\n\n.checklist-text.required::after {\n  content: \" *\";\n  color: var(--accent);\n  font-weight: bold;\n}\n\n.recovery-notification {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  background-color: rgba(33, 150, 243, 0.1);\n  backdrop-filter: blur(8px);\n  z-index: 1000;\n  padding: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  animation: slideDown 0.3s ease-out;\n  border-bottom: 1px solid rgba(33, 150, 243, 0.3);\n}\n\n@keyframes slideDown {\n  from { transform: translateY(-100%); }\n  to { transform: translateY(0); }\n}\n\n.recovery-content {\n  max-width: 1000px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  padding: 10px;\n  background-color: white;\n  border-radius: var(--border-radius);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n.recovery-icon {\n  font-size: 2rem;\n  color: var(--primary);\n  margin-right: 15px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.recovery-message {\n  flex: 1;\n}\n\n.recovery-message h4 {\n  margin: 0 0 5px 0;\n  color: var(--primary);\n}\n\n.recovery-message p {\n  margin: 0;\n  font-size: 0.9rem;\n  color: #666;\n}\n\n.recovery-actions {\n  display: flex;\n  gap: 10px;\n  margin-left: 15px;\n}\n\n.recovery-actions button {\n  padding: 8px 15px;\n  font-size: 0.9rem;\n}\n\n@media screen and (max-width: 768px) {\n  .recovery-content {\n    flex-direction: column;\n    text-align: center;\n    padding: 15px;\n  }\n\n  .recovery-icon {\n    margin-right: 0;\n    margin-bottom: 10px;\n  }\n\n  .recovery-actions {\n    margin-left: 0;\n    margin-top: 15px;\n    width: 100%;\n    justify-content: center;\n  }\n}\n\n/* Flash message styling */\n.flash-messages {\n  margin-bottom: 20px;\n  width: 100%;\n}\n\n.alert {\n  padding: 15px;\n  border-radius: var(--border-radius);\n  margin-bottom: 10px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.alert-success {\n  background-color: #d4edda;\n  color: #155724;\n  border: 1px solid #c3e6cb;\n}\n\n.alert-warning {\n  background-color: #fff3cd;\n  color: #856404;\n  border: 1px solid #ffeeba;\n}\n\n.alert-error {\n  background-color: #f8d7da;\n  color: #721c24;\n  border: 1px solid #f5c6cb;\n}\n\n.alert-info {\n  background-color: #d1ecf1;\n  color: #0c5460;\n  border: 1px solid #bee5eb;\n}\n\n.watermark-img {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%) rotate(0deg);\n  width: 300px;\n  height: auto;\n  max-width: 80vw;\n  max-height: 80vh;\n  opacity: 0.1;\n  pointer-events: none;\n  z-index: 9998;\n}\n\n/* Mobile-specific watermark adjustments */\n@media screen and (max-width: 768px) {\n  .watermark-img {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 250px;\n    max-width: 70vw;\n    max-height: 70vh;\n    opacity: 0.08;\n  }\n\n  /* Ensure container has relative positioning for absolute watermark */\n  .container {\n    position: relative;\n  }\n}\n\n/* I/O Builder Styles */\n.io-builder-container {\n    background: #f8f9fa;\n    border-radius: 8px;\n    padding: 20px;\n    margin: 20px 0;\n}\n\n.io-builder-header {\n    text-align: center;\n    margin-bottom: 30px;\n}\n\n.io-builder-header h3 {\n    color: var(--primary);\n    margin-bottom: 8px;\n}\n\n.io-builder-header p {\n    color: #666;\n    margin: 0;\n}\n\n.module-config-section,\n.modbus-config-section {\n    background: white;\n    border-radius: 8px;\n    padding: 20px;\n    margin-bottom: 20px;\n    border: 1px solid #e1e5e9;\n}\n\n.module-config-section h4,\n.modbus-config-section h4 {\n    color: var(--primary);\n    margin-bottom: 16px;\n}\n\n/* Generated Tables Styles */\n.generation-summary {\n    background: #e8f5e8;\n    border: 1px solid #4caf50;\n    border-radius: 8px;\n    padding: 16px;\n    margin-bottom: 20px;\n}\n\n.generation-summary h4 {\n    color: #2e7d32;\n    margin-bottom: 12px;\n}\n\n.summary-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 12px;\n}\n\n.summary-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background: rgba(255, 255, 255, 0.8);\n    padding: 8px 12px;\n    border-radius: 4px;\n}\n\n.summary-item .label {\n    font-weight: 600;\n    color: #333;\n}\n\n.summary-item .value {\n    font-weight: 700;\n    color: #2e7d32;\n    background: #c8e6c9;\n    padding: 4px 8px;\n    border-radius: 4px;\n}\n\n.table-section {\n    margin-bottom: 30px;\n}\n\n.table-section h5 {\n    color: var(--primary);\n    margin-bottom: 12px;\n    border-bottom: 2px solid var(--primary);\n    padding-bottom: 8px;\n}\n\n.table-responsive {\n    overflow-x: auto;\n    background: white;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.io-table {\n    width: 100%;\n    border-collapse: collapse;\n    margin: 0;\n    font-size: 14px;\n}\n\n.io-table thead {\n    background: var(--primary);\n    color: white;\n}\n\n.io-table th,\n.io-table td {\n    padding: 12px 8px;\n    text-align: left;\n    border-bottom: 1px solid #ddd;\n}\n\n.io-table th {\n    font-weight: 600;\n    font-size: 12px;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n}\n\n.io-table tbody tr:nth-child(even) {\n    background: #f8f9fa;\n}\n\n.io-table tbody tr:hover {\n    background: #e3f2fd;\n}\n\n.io-table td {\n    font-family: 'Courier New', monospace;\n    font-size: 13px;\n}\n\n#generation_results {\n    margin-top: 20px;\n    padding: 20px;\n    background: white;\n    border-radius: 8px;\n    border: 1px solid #e1e5e9;\n} 20px;\n    border-bottom: 2px solid var(--primary);\n    padding-bottom: 8px;\n}\n\n.module-stats {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 15px;\n    margin-bottom: 20px;\n    padding: 15px;\n    background: #f1f3f4;\n    border-radius: 6px;\n}\n\n.stat-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.stat-item label {\n    font-size: 12px;\n    font-weight: 600;\n    color: #666;\n    margin-bottom: 5px;\n}\n\n.stat-item input {\n    width: 60px;\n    text-align: center;\n    font-weight: bold;\n    background: #fff;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    padding: 5px;\n}\n\n.module-entry-form,\n.modbus-entry-form {\n    border: 1px solid #e1e5e9;\n    border-radius: 6px;\n    padding: 20px;\n    margin-bottom: 20px;\n    background: #fafbfc;\n}\n\n.form-row {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    gap: 15px;\n    margin-bottom: 15px;\n}\n\n.btn-lookup {\n    background: var(--primary);\n    color: white;\n    border: none;\n    padding: 8px 12px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 12px;\n    margin-left: 8px;\n    transition: background 0.2s;\n}\n\n.btn-lookup:hover {\n    background: var(--primary-dark, #0056b3);\n}\n\n.module-spec {\n    border: 2px solid var(--primary);\n    border-radius: 8px;\n    padding: 15px;\n    margin: 15px 0;\n    background: #f0f7ff;\n}\n\n.module-spec h5 {\n    color: var(--primary);\n    margin-bottom: 15px;\n}\n\n.spec-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 10px;\n}\n\n.spec-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 5px 10px;\n    background: white;\n    border-radius: 4px;\n    border: 1px solid #ddd;\n}\n\n.spec-item label {\n    font-weight: 600;\n    color: #555;\n}\n\n.spec-item span {\n    font-weight: bold;\n    color: var(--primary);\n}\n\n.source-indicator {\n    margin-bottom: 10px;\n}\n\n.source-badge {\n    display: inline-block;\n    padding: 4px 8px;\n    border-radius: 12px;\n    font-size: 11px;\n    font-weight: bold;\n    text-transform: uppercase;\n}\n\n.source-database {\n    background: #d4edda;\n    color: #155724;\n}\n\n.source-web {\n    background: #d1ecf1;\n    color: #0c5460;\n}\n\n.source-manual {\n    background: #fff3cd;\n    color: #856404;\n}\n\n.manual-override {\n    border-top: 1px solid #ddd;\n    margin-top: 15px;\n    padding-top: 15px;\n}\n\n.manual-override h6 {\n    color: #856404;\n    margin-bottom: 10px;\n}\n\n.modules-list,\n.modbus-ranges-list {\n    margin-top: 20px;\n}\n\n.modules-container,\n.ranges-container {\n    max-height: 300px;\n    overflow-y: auto;\n    border: 1px solid #e1e5e9;\n    border-radius: 6px;\n    background: white;\n}\n\n.module-item,\n.range-item {\n    padding: 15px;\n    border-bottom: 1px solid #f1f3f4;\n    transition: background 0.2s;\n}\n\n.module-item:hover,\n.range-item:hover {\n    background: #f8f9fa;\n}\n\n.module-item:last-child,\n.range-item:last-child {\n    border-bottom: none;\n}\n\n.module-header,\n.range-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 8px;\n}\n\n.module-header h5,\n.range-header h6 {\n    margin: 0;\n    color: var(--primary);\n}\n\n.remove-module-btn,\n.remove-range-btn {\n    background: #dc3545;\n    color: white;\n    border: none;\n    padding: 6px 8px;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 12px;\n    transition: background 0.2s;\n}\n\n.remove-module-btn:hover,\n.remove-range-btn:hover {\n    background: #c82333;\n}\n\n.module-details,\n.range-details {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    font-size: 12px;\n    color: #666;\n}\n\n.module-details span,\n.range-details span {\n    padding: 2px 6px;\n    background: #e9ecef;\n    border-radius: 3px;\n}\n\n.no-modules,\n.no-ranges {\n    text-align: center;\n    padding: 40px 20px;\n    color: #666;\n    font-style: italic;\n}\n\n.generation-section {\n    background: white;\n    border-radius: 8px;\n    padding: 20px;\n    text-align: center;\n    border: 1px solid #e1e5e9;\n}\n\n.generation-actions {\n    margin-bottom: 15px;\n}\n\n.btn-large {\n    padding: 15px 30px;\n    font-size: 16px;\n    font-weight: bold;\n    margin: 0 10px;\n}\n\n.generation-status {\n    padding: 10px;\n    border-radius: 6px;\n    margin-top: 10px;\n}\n\n.generation-status.info {\n    background: #d1ecf1;\n    color: #0c5460;\n    border: 1px solid #bee5eb;\n}\n\n.generation-status.success {\n    background: #d4edda;\n    color: #155724;\n    border: 1px solid #c3e6cb;\n}\n\n.generation-status.error {\n    background: #f8d7da;\n    color: #721c24;\n    border: 1px solid #f5c6cb;\n}\n\n.hidden {\n    display: none !important;\n}\n\n/* Mobile responsiveness for I/O builder */\n@media (max-width: 768px) {\n    .form-row {\n        grid-template-columns: 1fr;\n    }\n\n    .module-stats {\n        grid-template-columns: repeat(2, 1fr);\n    }\n\n    .spec-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .module-details,\n    .range-details {\n        flex-direction: column;\n        gap: 5px;\n    }\n\n    .btn-large {\n        width: 100%;\n        margin: 5px 0;\n    }\n\n    /* Table scroll indicators for better UX */\n    .table-container {\n        position: relative;\n    }\n\n    .table-container::after {\n        content: \"← Scroll horizontally to see all columns →\";\n        position: absolute;\n        bottom: -20px;\n        left: 50%;\n        transform: translateX(-50%);\n        font-size: 10px;\n        color: #64748b;\n        font-style: italic;\n        white-space: nowrap;\n        opacity: 0.7;\n        pointer-events: none;\n    }\n\n    /* Hide scroll indicator when table fits */\n    .table-container:not([data-scrollable])::after {\n        display: none;\n    }\n\n    /* Column toggle controls for I/O tables */\n    .table-controls {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-bottom: 8px;\n        padding: 4px 8px;\n        background: #f8f9fc;\n        border-radius: 6px;\n        border: 1px solid #e2e8f0;\n    }\n\n    .column-toggles {\n        display: flex;\n        gap: 8px;\n        flex-wrap: wrap;\n    }\n\n    .column-toggle-btn {\n        padding: 2px 6px;\n        font-size: 9px;\n        border: 1px solid #d1d5db;\n        background: white;\n        border-radius: 3px;\n        cursor: pointer;\n        transition: all 0.2s;\n    }\n\n    .column-toggle-btn:hover {\n        background: #f3f4f6;\n        border-color: var(--admin-primary);\n    }\n\n    .column-toggle-btn.active {\n        background: var(--admin-primary);\n        color: white;\n        border-color: var(--admin-primary);\n    }\n\n    .table-info {\n        font-size: 10px;\n        color: #64748b;\n    }\n\n    /* Mobile navigation adjustments */\n    .modern-nav {\n        padding: 8px 16px;\n        flex-wrap: wrap;\n        gap: 8px;\n    }\n\n    .nav-actions {\n        flex-direction: row;\n        justify-content: space-between;\n        align-items: center;\n        gap: 4px;\n        width: 100%;\n        flex-wrap: wrap;\n    }\n\n    .quick-table-access {\n        order: 1;\n        margin-right: 4px;\n    }\n\n    .save-progress-btn {\n        order: 2;\n        margin-right: 4px;\n        padding: 6px 12px;\n        font-size: 12px;\n    }\n\n    .user-profile {\n        order: 3;\n        min-width: auto;\n    }\n\n    .user-name {\n        max-width: 100px;\n    }\n\n    .brand-text {\n        display: none;\n    }\n\n    .quick-access-btn {\n        padding: 6px 12px;\n        font-size: 12px;\n    }\n\n    .quick-access-dropdown {\n        min-width: 180px;\n        left: -20px;\n    }\n\n    /* Mobile table improvements */\n    .table-responsive {\n        border-radius: 0;\n        margin: 0.5rem 0;\n    }\n\n    table {\n        min-width: 600px;\n        font-size: 12px;\n    }\n\n    thead th {\n        padding: 8px 6px;\n        font-size: 12px;\n    }\n\n    tbody td {\n        padding: 8px 6px;\n        max-width: 120px;\n    }\n\n    tbody td input,\n    tbody td textarea,\n    tbody td select {\n        min-width: 100px;\n        font-size: 12px;\n    }\n}\n\n/* ===== MAIN CONTENT LAYOUT ===== */\n.main-content {\n  flex-grow: 1;\n  padding: 20px 24px;\n  background-color: #f8f9fa;\n  overflow-y: auto; /* Allow scrolling within the main content area */\n}\n\n/* Adjustments for the dashboard layout */\nbody.dashboard-layout .main-content {\n  padding: 0; /* Reset padding for dashboard */\n  background: linear-gradient(135deg, #E3F4F4 0%, #D1E9FE 50%, #E3F4F4 100%);\n}\n\n/* Specific padding for the form container within the main layout */\n.main-layout .form-container {\n  padding: 20px 24px;\n}\n\n/* Special handling for Step 8 - I/O Testing tables with improved readability */\n#step-8 .form-container {\n  padding: 16px 24px !important;\n  max-width: none !important;\n  width: 100% !important;\n}\n\n#step-8 .data-card {\n  margin: 12px 0 !important;\n  border-radius: 12px;\n  overflow: hidden;\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n}\n\n#step-8 .card-body {\n  padding: 16px !important;\n}\n\n/* I/O Testing Tables - Professional and readable styling */\n#step-8 .table-container {\n  overflow-x: auto;\n  border-radius: 8px;\n  margin: 8px 0;\n  background: white;\n  box-shadow: 0 2px 12px rgba(0,0,0,0.1);\n  max-width: 100%;\n  width: 100%;\n  border: 1px solid #e2e8f0;\n}\n\n#step-8 table {\n  width: 100%;\n  min-width: 1400px; /* Increased for better column spacing */\n  border-collapse: collapse;\n  font-size: 14px; /* Slightly larger for better readability */\n  table-layout: auto;\n  background: white;\n}\n\n#step-8 th {\n  background: linear-gradient(135deg, var(--admin-primary), var(--admin-primary-dark));\n  color: white;\n  padding: 12px 8px;\n  text-align: center;\n  font-weight: 600;\n  font-size: 12px;\n  white-space: nowrap;\n  position: sticky;\n  top: 0;\n  z-index: 10;\n  border-right: 1px solid rgba(255,255,255,0.3);\n  line-height: 1.4;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n}\n\n#step-8 td {\n  padding: 10px 8px;\n  border-bottom: 1px solid #e2e8f0;\n  border-right: 1px solid #f1f5f9;\n  vertical-align: middle;\n  background: white;\n  text-align: center;\n  line-height: 1.4;\n}\n\n#step-8 tbody tr:nth-child(even) {\n  background: #f8f9fc;\n}\n\n#step-8 tbody tr:hover {\n  background: rgba(77, 208, 225, 0.08);\n  transform: translateY(-1px);\n  transition: all 0.2s ease;\n}\n\n/* Balanced column widths for professional appearance */\n#step-8 th:nth-child(1), #step-8 td:nth-child(1) { width: 60px; min-width: 60px; } /* S.No */\n#step-8 th:nth-child(2), #step-8 td:nth-child(2) { width: 80px; min-width: 80px; } /* Rack/Rack No */\n#step-8 th:nth-child(3), #step-8 td:nth-child(3) { width: 100px; min-width: 100px; } /* Pos/Module Position */\n#step-8 th:nth-child(4), #step-8 td:nth-child(4) { width: 140px; min-width: 140px; } /* Signal TAG */\n#step-8 th:nth-child(5), #step-8 td:nth-child(5) { width: 200px; min-width: 200px; } /* Description */\n#step-8 th:nth-child(6), #step-8 td:nth-child(6) { width: 90px; min-width: 90px; } /* Result */\n#step-8 th:nth-child(7), #step-8 td:nth-child(7) { width: 120px; min-width: 120px; } /* Punch/Punch Item */\n#step-8 th:nth-child(8), #step-8 td:nth-child(8) { width: 110px; min-width: 110px; } /* Verified/Verified By */\n#step-8 th:nth-child(9), #step-8 td:nth-child(9) { width: 150px; min-width: 150px; } /* Comment */\n#step-8 th:nth-child(10), #step-8 td:nth-child(10) { width: 80px; min-width: 80px; } /* Action */\n\n/* Professional form controls for I/O tables */\n#step-8 td input,\n#step-8 td select,\n#step-8 td textarea {\n  width: calc(100% - 4px);\n  padding: 8px 10px;\n  font-size: 12px;\n  border: 1px solid #d1d5db;\n  border-radius: 6px;\n  margin: 0;\n  background: white;\n  line-height: 1.4;\n  min-height: 32px;\n  box-sizing: border-box;\n  transition: all 0.2s ease;\n  font-family: inherit;\n}\n\n#step-8 td input:focus,\n#step-8 td select:focus,\n#step-8 td textarea:focus {\n  outline: none;\n  border-color: var(--admin-primary);\n  box-shadow: 0 0 0 2px rgba(77, 208, 225, 0.15);\n  background: #fefefe;\n}\n\n#step-8 td select {\n  padding: 6px 8px;\n  font-size: 12px;\n  cursor: pointer;\n}\n\n#step-8 td textarea {\n  min-height: 60px;\n  resize: vertical;\n  font-size: 12px;\n  padding: 8px;\n  text-align: left;\n}\n\n#step-8 .btn-remove {\n  padding: 6px 10px;\n  font-size: 11px;\n  border-radius: 4px;\n  min-width: 32px;\n  height: 32px;\n  background: linear-gradient(135deg, #ef4444, #dc2626);\n  color: white;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#step-8 .btn-remove:hover {\n  background: linear-gradient(135deg, #dc2626, #b91c1c);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);\n}\n\n/* Enhanced card header styling for I/O tables */\n#step-8 .card-header {\n  padding: 16px 20px;\n  font-size: 16px;\n  font-weight: 600;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: linear-gradient(135deg, var(--admin-primary), var(--admin-primary-dark));\n  color: white;\n}\n\n#step-8 .header-btn {\n  padding: 8px 16px;\n  font-size: 12px;\n  border-radius: 6px;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s;\n  font-weight: 600;\n}\n\n#step-8 .header-btn.primary {\n  background: var(--admin-success);\n  color: white;\n  box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);\n}\n\n#step-8 .header-btn.primary:hover {\n  background: #059669;\n  transform: translateY(-1px);\n  box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);\n}\n\n/* Enhanced add button styling for I/O tables */\n#step-8 .btn-add {\n  padding: 10px 20px;\n  font-size: 13px;\n  margin-top: 16px;\n  background: linear-gradient(135deg, var(--admin-success), #059669);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  display: inline-flex;\n  align-items: center;\n  gap: 8px;\n  font-weight: 600;\n}\n\n#step-8 .btn-add:hover {\n  background: linear-gradient(135deg, #059669, #047857);\n  transform: translateY(-2px);\n  box-shadow: 0 4px 15px rgba(16, 185, 129, 0.3);\n}\n\n/* Mobile responsive adjustments for I/O tables with improved readability */\n@media (max-width: 1600px) {\n  #step-8 table {\n    min-width: 1100px;\n    font-size: 12px;\n  }\n\n  #step-8 th, #step-8 td {\n    padding: 8px 6px;\n  }\n\n  #step-8 td input, #step-8 td select, #step-8 td textarea {\n    font-size: 11px;\n    padding: 6px 8px;\n    min-height: 30px;\n  }\n}\n\n@media (max-width: 1400px) {\n  #step-8 table {\n    min-width: 1000px;\n    font-size: 11px;\n  }\n\n  #step-8 th, #step-8 td {\n    padding: 6px 4px;\n  }\n\n  #step-8 td input, #step-8 td select, #step-8 td textarea {\n    font-size: 10px;\n    padding: 5px 6px;\n    min-height: 28px;\n  }\n}\n\n@media (max-width: 1200px) {\n  .main-layout .form-container {\n    padding: 12px;\n  }\n\n  #step-8 .form-container {\n    padding: 8px 12px !important;\n  }\n\n  #step-8 table {\n    min-width: 900px;\n    font-size: 10px;\n  }\n\n  #step-8 th, #step-8 td {\n    padding: 5px 3px;\n  }\n\n  #step-8 td input, #step-8 td select, #step-8 td textarea {\n    font-size: 9px;\n    padding: 4px 5px;\n    min-height: 26px;\n  }\n}\n\n@media (max-width: 768px) {\n  .main-content {\n    padding: 12px;\n  }\n  .main-layout .form-container {\n    padding: 8px;\n  }\n\n  #step-8 .form-container {\n    padding: 6px 8px !important;\n  }\n\n  #step-8 table {\n    min-width: 800px;\n    font-size: 9px;\n  }\n\n  #step-8 th, #step-8 td {\n    padding: 4px 2px;\n  }\n\n  #step-8 td input, #step-8 td select, #step-8 td textarea {\n    font-size: 8px;\n    padding: 3px 4px;\n    min-height: 24px;\n  }\n\n  #step-8 .btn-remove {\n    padding: 4px 6px;\n    font-size: 8px;\n    min-width: 28px;\n    height: 24px;\n  }\n}\n\n/* ===== RESPONSIVE LAYOUT ADJUSTMENTS FOR VERTICAL SIDEBAR ===== */\n\n/* Hide sidebar on smaller screens and make content full width */\n@media (max-width: 1200px) {\n  .app-sidebar {\n    width: 280px;\n    min-width: 280px;\n    padding: 20px;\n  }\n\n  .app-content {\n    width: calc(100vw - 280px);\n    max-width: calc(100vw - 280px);\n    padding: 20px;\n  }\n\n  .progress-step {\n    padding: 14px;\n    gap: 12px;\n  }\n\n  .step-circle {\n    width: 32px;\n    height: 32px;\n    font-size: 14px;\n  }\n\n  .step-title {\n    font-size: 13px;\n  }\n\n  .step-description {\n    font-size: 11px;\n  }\n}\n\n/* Mobile layout - stack vertically */\n@media (max-width: 768px) {\n  .main-layout {\n    flex-direction: column;\n  }\n\n  .app-sidebar {\n    width: 100%;\n    min-width: 100%;\n    height: auto;\n    max-height: 300px;\n    border-radius: 16px 16px 0 0;\n    overflow-y: auto;\n    position: static;\n  }\n\n  .app-content {\n    width: 100%;\n    max-width: 100%;\n    height: auto;\n    border-radius: 0 0 16px 16px;\n    padding: 16px;\n  }\n\n  .progress-nav {\n    flex-direction: row;\n    overflow-x: auto;\n    gap: 8px;\n    padding: 10px 0;\n  }\n\n  .progress-step {\n    flex-direction: column;\n    min-width: 80px;\n    max-width: 80px;\n    padding: 8px;\n    text-align: center;\n    flex-shrink: 0;\n  }\n\n  .step-circle {\n    width: 28px;\n    height: 28px;\n    font-size: 12px;\n    margin-bottom: 4px;\n  }\n\n  .step-title {\n    font-size: 10px;\n  }\n\n  .step-description {\n    font-size: 8px;\n    display: none; /* Hide on very small screens */\n  }\n}\n\n\n/* Unified Dashboard Styling */\n        .dashboard-layout {\n            background: linear-gradient(135deg, #f8f9fc 0%, #e2e8f0 100%);\n            color: #1f2937;\n            font-family: 'Inter', sans-serif;\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .dashboard-content {\n            flex-grow: 1;\n            display: flex;\n            flex-direction: column;\n        }\n\n        .dashboard-main {\n            flex-grow: 1;\n            padding-top: 0;\n        }\n\n        .dashboard-nav {\n            display: flex;\n            justify-content: center; /* Center navigation links */\n            align-items: center;\n            background: white;\n            padding: 12px 24px;\n            border-radius: 16px;\n            box-shadow: var(--card-shadow);\n            margin-bottom: 32px;\n            border: 1px solid #e2e8f0;\n            overflow-x: auto; /* Enable horizontal scrolling for nav links */\n            white-space: nowrap; /* Prevent wrapping of nav links */\n        }\n\n        /* Admin-specific navigation styling */\n        .admin-container .dashboard-nav {\n            padding: 20px 24px;\n        }\n\n        /* Responsive navigation improvements */\n        @media (max-width: 1200px) {\n            .dashboard-nav {\n                padding: 6px 12px;\n            }\n\n            .nav-links {\n                gap: 8px;\n            }\n\n            .nav-link {\n                padding: 8px 14px;\n                font-size: 13px;\n            }\n        }\n\n        @media (max-width: 768px) {\n            .dashboard-nav {\n                padding: 4px 8px;\n                flex-wrap: wrap;\n                gap: 4px;\n                justify-content: center;\n            }\n\n            .nav-links {\n                flex-wrap: wrap;\n                justify-content: center;\n                gap: 4px;\n            }\n\n            .nav-link {\n                padding: 6px 12px;\n                font-size: 12px;\n            }\n\n            .nav-link i {\n                font-size: 14px;\n            }\n        }\n\n        @media (max-width: 480px) {\n            .dashboard-nav {\n                padding: 2px 4px;\n                min-height: 40px;\n            }\n\n            .nav-link {\n                padding: 4px 8px;\n                font-size: 10px;\n            }\n\n            .nav-link i {\n                font-size: 12px;\n            }\n\n            .developer-footer {\n                padding: 12px;\n                font-size: 0.8rem;\n            }\n        }\n\n.developer-footer {\n            text-align: center;\n            padding: 20px;\n            margin-top: auto; /* Push footer to the bottom */\n            background-color: #f1f5f9; /* Light background for footer */\n            border-top: 1px solid #e2e8f0; /* Subtle separator */\n        }\n/* Enhanced toolbar button styles */\n    .toolbar-btn:active {\n      transform: translateY(1px);\n    }\n\n    .toolbar-btn:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n      background: #f8f9fa;\n      color: #9ca3af;\n    }\n\n    .toolbar-btn:focus {\n      outline: 2px solid var(--admin-primary);\n      outline-offset: 2px;\n    }\n\n    /* Visual feedback for button press */\n    .toolbar-btn.pressed {\n      transform: scale(0.95);\n      background: var(--admin-primary-dark);\n      color: white;\n    }\n\n    /* Enhanced active state */\n    .toolbar-btn.active {\n      background: var(--admin-primary) !important;\n      color: white !important;\n      box-shadow: 0 2px 8px rgba(77, 208, 225, 0.4) !important;\n      border: 1px solid var(--admin-primary-dark);\n    }\n\n    /* Better hover states */\n    .toolbar-btn:not(.active):hover {\n      background: #f1f5f9;\n      color: var(--admin-primary);\n      border: 1px solid var(--admin-primary-light);\n    }\n\n    /* Toolbar group separators */\n    .toolbar-group + .toolbar-group {\n      position: relative;\n      margin-left: 8px;\n    }\n\n    .toolbar-group + .toolbar-group::before {\n      content: '';\n      position: absolute;\n      left: -4px;\n      top: 50%;\n      transform: translateY(-50%);\n      height: 20px;\n      width: 1px;\n      background: #d1d5db;\n    }\n\n    /* Special styling for heading buttons */\n    .toolbar-btn[data-value=\"h1\"],\n    .toolbar-btn[data-value=\"h2\"],\n    .toolbar-btn[data-value=\"h3\"] {\n      font-weight: bold;\n      font-size: 11px;\n      min-width: 32px;\n      letter-spacing: -0.5px;\n    }\n\n    /* Specific icon improvements */\n    .toolbar-btn i {\n      font-size: 13px;\n      line-height: 1;\n    }\n\n    /* Make sure text formatting buttons are clearly visible */\n    .toolbar-btn[data-command=\"bold\"],\n    .toolbar-btn[data-command=\"italic\"],\n    .toolbar-btn[data-command=\"underline\"] {\n      font-weight: 700;\n    }\n\n    .toolbar-btn[data-command=\"italic\"] {\n      font-style: italic;\n    }\n\n    .toolbar-btn[data-command=\"underline\"] {\n      text-decoration: underline;\n    }\n\n/* Color picker styles */\n    .color-picker {\n      width: 32px;\n      height: 32px;\n      border: 1px solid #e2e8f0;\n      border-radius: 6px;\n      cursor: pointer;\n      padding: 3px;\n      background: white;\n      overflow: hidden;\n      transition: all 0.2s ease;\n      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);\n    }\n\n    .color-picker:hover {\n      border-color: var(--admin-primary);\n      box-shadow: 0 4px 12px rgba(77, 208, 225, 0.3);\n      transform: translateY(-1px);\n    }\n\n    .color-picker::-webkit-color-swatch-wrapper {\n      padding: 0;\n      border: none;\n      border-radius: 4px;\n      overflow: hidden;\n    }\n\n    .color-picker::-webkit-color-swatch {\n      border: 1px solid #e2e8f0;\n      border-radius: 4px;\n    }\n\n    /* Firefox color picker */\n    .color-picker::-moz-color-swatch {\n      border: 1px solid #e2e8f0;\n      border-radius: 4px;\n    }","size_bytes":73782},"static/css/notifications.css":{"content":"\n/* Notification Bell */\n.notification-wrapper {\n    position: relative;\n    display: inline-block;\n    margin-left: 15px;\n}\n\n.notification-bell {\n    background: none;\n    border: none;\n    color: #333;\n    font-size: 18px;\n    cursor: pointer;\n    padding: 8px;\n    border-radius: 50%;\n    transition: background-color 0.2s ease;\n    position: relative;\n}\n\n.notification-bell:hover {\n    background-color: #f5f5f5;\n}\n\n.notification-badge {\n    position: absolute;\n    top: 0;\n    right: 0;\n    background-color: #e74c3c;\n    color: white;\n    border-radius: 50%;\n    padding: 2px 6px;\n    font-size: 11px;\n    font-weight: bold;\n    min-width: 18px;\n    height: 18px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    animation: pulse 2s infinite;\n}\n\n@keyframes pulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.1); }\n    100% { transform: scale(1); }\n}\n\n/* Notification Dropdown */\n.notification-dropdown {\n    position: absolute;\n    top: 100%;\n    right: 0;\n    width: 350px;\n    max-height: 500px;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    z-index: 1000;\n    overflow: hidden;\n}\n\n.notification-header {\n    padding: 15px;\n    border-bottom: 1px solid #eee;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    background-color: #f8f9fa;\n}\n\n.notification-header h3 {\n    margin: 0;\n    font-size: 16px;\n    color: #333;\n}\n\n.mark-all-read {\n    background: none;\n    border: none;\n    color: #007bff;\n    font-size: 12px;\n    cursor: pointer;\n    text-decoration: underline;\n}\n\n.mark-all-read:hover {\n    color: #0056b3;\n}\n\n.notification-list {\n    max-height: 350px;\n    overflow-y: auto;\n}\n\n.notification-item {\n    padding: 12px 15px;\n    border-bottom: 1px solid #f0f0f0;\n    transition: background-color 0.2s ease;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n}\n\n.notification-item:hover {\n    background-color: #f8f9fa;\n}\n\n.notification-item.unread {\n    background-color: #e3f2fd;\n    border-left: 3px solid #2196f3;\n}\n\n.notification-item.read {\n    opacity: 0.7;\n}\n\n.notification-content {\n    flex: 1;\n    margin-right: 10px;\n}\n\n.notification-content h4 {\n    margin: 0 0 5px 0;\n    font-size: 14px;\n    font-weight: 600;\n    color: #333;\n}\n\n.notification-content p {\n    margin: 0 0 5px 0;\n    font-size: 13px;\n    color: #666;\n    line-height: 1.4;\n}\n\n.notification-time {\n    font-size: 11px;\n    color: #999;\n}\n\n.notification-actions {\n    display: flex;\n    flex-direction: column;\n    gap: 5px;\n}\n\n.notification-action,\n.mark-read {\n    background: #007bff;\n    color: white;\n    border: none;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 11px;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n}\n\n.notification-action:hover {\n    background: #0056b3;\n}\n\n.mark-read {\n    background: #6c757d;\n}\n\n.mark-read:hover {\n    background: #545b62;\n}\n\n.notification-footer {\n    padding: 10px 15px;\n    text-align: center;\n    border-top: 1px solid #eee;\n    background-color: #f8f9fa;\n}\n\n.view-all {\n    color: #007bff;\n    text-decoration: none;\n    font-size: 13px;\n    font-weight: 500;\n}\n\n.view-all:hover {\n    text-decoration: underline;\n}\n\n.loading,\n.error,\n.no-notifications {\n    padding: 20px;\n    text-align: center;\n    color: #666;\n    font-style: italic;\n}\n\n.error {\n    color: #e74c3c;\n}\n\n/* Toast Notifications */\n.notification-toast {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: white;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n    padding: 15px;\n    min-width: 300px;\n    z-index: 1001;\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    animation: slideIn 0.3s ease;\n}\n\n@keyframes slideIn {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n.notification-toast.notification-success {\n    border-left: 4px solid #28a745;\n}\n\n.notification-toast.notification-error {\n    border-left: 4px solid #dc3545;\n}\n\n.notification-toast.notification-warning {\n    border-left: 4px solid #ffc107;\n}\n\n.notification-toast.notification-info {\n    border-left: 4px solid #17a2b8;\n}\n\n.toast-content h4 {\n    margin: 0 0 5px 0;\n    font-size: 14px;\n    font-weight: 600;\n}\n\n.toast-content p {\n    margin: 0;\n    font-size: 13px;\n    color: #666;\n}\n\n.toast-close {\n    background: none;\n    border: none;\n    font-size: 18px;\n    cursor: pointer;\n    color: #999;\n    margin-left: 10px;\n}\n\n.toast-close:hover {\n    color: #333;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .notification-dropdown {\n        width: 300px;\n        right: -50px;\n    }\n    \n    .notification-toast {\n        right: 10px;\n        left: 10px;\n        min-width: auto;\n    }\n}\n","size_bytes":4922},"static/js/form.js":{"content":"// Wrapped in an IIFE to prevent global scope pollution\n(function() {\n  // Track current step\n  let currentStep = 1;\n\n  // Define functions first so they can be used\n  function goToStep(step) {\n    const currentFs = document.getElementById(`step-${currentStep}`);\n\n    // Clear previous validation states\n    if (currentFs) {\n      currentFs.classList.remove('invalid');\n      currentFs.querySelectorAll('.error').forEach(el => el.style.display = 'none');\n\n      if (step > currentStep) {\n        if (!currentFs.checkValidity()) {\n          currentFs.classList.add('invalid');\n\n          // Show error messages\n          currentFs.querySelectorAll(':invalid').forEach(field => {\n            const errorEl = field.nextElementSibling;\n            if (errorEl && errorEl.classList.contains('error')) {\n              errorEl.style.display = 'inline-block';\n            }\n          });\n\n          currentFs.querySelector(':invalid')?.focus();\n          return;\n        }\n      }\n    }\n\n    currentStep = step;\n\n    for (let i = 1; i <= 10; i++) {\n      const stepEl = document.getElementById(`step-${i}`);\n      const progEl = document.getElementById(`prog-${i}`);\n      if (stepEl) stepEl.classList.toggle('active', i === step);\n      if (progEl) {\n        progEl.classList.toggle('active', i === step);\n        progEl.classList.toggle('disabled', i !== step);\n      }\n    }\n\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n    saveState();\n  }\n\n  // Define startProcess function\n  function startProcess() {\n    document.getElementById('welcomePage').style.display = 'none';\n    document.getElementById('reportTypePage').style.display = 'block';\n  }\n\n  // Function to show SAT form\n  function showSATForm() {\n    window.location.href = '/reports/new/sat/full';\n  }\n\n  // Function to go back to welcome\n  function backToWelcome() {\n    document.getElementById('reportTypePage').style.display = 'none';\n    document.getElementById('welcomePage').style.display = 'block';\n  }\n\n  // LOCALSTORAGE STATE PERSISTENCE\n  const FORM_KEY = 'satFormState';\n  function saveState() {\n    const form = document.getElementById('satForm');\n    if (!form) return;\n\n    const data = {};\n    Array.from(form.elements).forEach(el => {\n      if (!el.name || el.type === 'file') return;\n      if ((el.type === 'checkbox' || el.type === 'radio') && !el.checked) return;\n      data[el.name] = el.value;\n    });\n    localStorage.setItem(FORM_KEY, JSON.stringify(data));\n  }\n\n  function loadState() {\n    const stored = localStorage.getItem(FORM_KEY);\n    if (!stored) return;\n\n    const data = JSON.parse(stored);\n    const form = document.getElementById('satForm');\n    if (!form) return;\n\n    Object.entries(data).forEach(([name, val]) => {\n      const el = form.elements[name];\n      if (el) el.value = val;\n    });\n  }\n\n  function removeRow(button) {\n    const row = button.closest('tr');\n    if (row) row.remove();\n    saveState();\n  }\n\n  function addRow(templateId, tbodyId) {\n    console.log(`Adding row: template=${templateId}, tbody=${tbodyId}`);\n\n    // Prevent rapid double-clicks\n    if (addRow._processing) {\n      console.log('AddRow already processing, skipping...');\n      return;\n    }\n    addRow._processing = true;\n\n    setTimeout(() => {\n      addRow._processing = false;\n    }, 300);\n\n    // Get the tbody element\n    const tbody = document.getElementById(tbodyId);\n    if (!tbody) {\n      console.error(`tbody not found: ${tbodyId}`);\n      addRow._processing = false;\n      return;\n    }\n\n    // Get the template element\n    const template = document.getElementById(templateId);\n    if (!template) {\n      console.error(`template not found: ${templateId}`);\n      addRow._processing = false;\n      return;\n    }\n\n    // Clone the template content\n    const clone = template.content.cloneNode(true);\n    const row = clone.querySelector('tr');\n\n    if (row) {\n      row.classList.add('fade-in');\n      console.log('Row cloned successfully');\n    } else {\n      console.error('No tr element found in template');\n      addRow._processing = false;\n      return;\n    }\n\n    // Clear any text nodes that might interfere\n    Array.from(tbody.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE && node.textContent.trim() === '') {\n        tbody.removeChild(node);\n      }\n    });\n\n    // Append the new row\n    tbody.appendChild(clone);\n    console.log('Row added successfully');\n\n    // Save state after adding\n    saveState();\n  }\n\n  function setupEventHandlers() {\n    // Wire up progress nav clicks\n    document.querySelectorAll('.progress-step').forEach(el => {\n      el.style.cursor = 'pointer';\n      el.addEventListener('click', () => {\n        const step = Number(el.id.split('-')[1]);\n        goToStep(step);\n      });\n    });\n\n    // Setup report type selection handlers\n    document.addEventListener('click', (e) => {\n      // Handle SAT report selection\n      if (e.target.closest('[data-report-type=\"sat\"]')) {\n        showSATForm();\n      }\n\n      // Handle back to welcome button\n      if (e.target.closest('#backToWelcomeButton')) {\n        backToWelcome();\n      }\n    });\n\n    setupAddButtons();\n\n    // Setup navigation buttons with delegation\n    document.addEventListener('click', (e) => {\n      // Next step\n      if (e.target.closest('[data-next-step]')) {\n        const btn = e.target.closest('[data-next-step]');\n        goToStep(parseInt(btn.dataset.nextStep));\n      }\n      // Previous step\n      if (e.target.closest('[data-prev-step]')) {\n        const btn = e.target.closest('[data-prev-step]');\n        goToStep(parseInt(btn.dataset.prevStep));\n      }\n      // Remove row\n      if (e.target.closest('.remove-row-btn')) {\n        const btn = e.target.closest('.remove-row-btn');\n        removeRow(btn);\n      }\n    });\n\n    // Setup file uploads\n    setupFileInputs();\n\n    // Save on input change\n    document.getElementById('satForm')?.addEventListener('input', saveState);\n  }\n\n  function setupAddButtons() {\n    // Use single event delegation for all add buttons\n    document.addEventListener('click', function(e) {\n      // Prevent multiple handlers by checking if we've already handled this event\n      if (e.defaultPrevented) return;\n      \n      // Check if clicked element is an add button\n      const addButton = e.target.closest('.btn-add');\n      if (addButton) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        // Get the onclick attribute and extract the function call\n        const onclickAttr = addButton.getAttribute('onclick');\n        if (onclickAttr) {\n          // Extract template and tbody IDs from onclick\n          const matches = onclickAttr.match(/addRow\\('([^']+)',\\s*'([^']+)'\\)/);\n          if (matches) {\n            const templateId = matches[1];\n            const tbodyId = matches[2];\n            addRow(templateId, tbodyId);\n          }\n        } else {\n          // Handle specific button IDs for backward compatibility\n          const buttonMappings = [\n            { btnId: 'add-related-doc-btn', tmplId: 'tmpl-related-doc', tbodyId: 'related-documents-body' },\n            { btnId: 'add-pre-approval-btn', tmplId: 'tmpl-pre-approval', tbodyId: 'pre-approvals-body' },\n            { btnId: 'add-post-approval-btn', tmplId: 'tmpl-post-approval', tbodyId: 'post-approvals-body' },\n            { btnId: 'add-pretest-btn', tmplId: 'tmpl-pretest', tbodyId: 'pretest-body' },\n            { btnId: 'add-keycomp-btn', tmplId: 'tmpl-keycomp', tbodyId: 'key-components-body' },\n            { btnId: 'add-iprecord-btn', tmplId: 'tmpl-iprecord', tbodyId: 'ip-records-body' },\n            { btnId: 'add-digital-signal-btn', tmplId: 'tmpl-digital-signal', tbodyId: 'digital-signals-body' },\n            { btnId: 'add-digital-output-btn', tmplId: 'tmpl-digital-output', tbodyId: 'digital-outputs-body' },\n            { btnId: 'add-analogue-input-btn', tmplId: 'tmpl-analogue-input', tbodyId: 'analogue-inputs-body' },\n            { btnId: 'add-analogue-output-btn', tmplId: 'tmpl-analogue-output', tbodyId: 'analogue-outputs-body' },\n            { btnId: 'add-modbus-digital-btn', tmplId: 'tmpl-modbus-digital', tbodyId: 'modbus-digital-body' },\n            { btnId: 'add-modbus-analogue-btn', tmplId: 'tmpl-modbus-analogue', tbodyId: 'modbus-analogue-body' },\n            { btnId: 'add-process-test-btn', tmplId: 'tmpl-process-test', tbodyId: 'process-test-body' },\n            { btnId: 'add-scada-ver-btn', tmplId: 'tmpl-scada-verification', tbodyId: 'scada-verification-body' },\n            { btnId: 'add-trends-testing-btn', tmplId: 'tmpl-trends-testing', tbodyId: 'trends-testing-body' },\n            { btnId: 'add-alarm-list-btn', tmplId: 'tmpl-alarm-list', tbodyId: 'alarm-body' }\n          ];\n\n          const mapping = buttonMappings.find(m => \n            addButton.id === m.btnId || addButton.closest(`#${m.btnId}`)\n          );\n          \n          if (mapping) {\n            addRow(mapping.tmplId, mapping.tbodyId);\n          }\n        }\n        return;\n      }\n    });\n  }\n\n  function setupFileInputs() {\n    // Setup file inputs with image preview\n    setupFileInput('scada-input', 'scada-file-list');\n    setupFileInput('trends-input', 'trends-file-list');\n    setupFileInput('alarm-input', 'alarm-file-list');\n  }\n\n  function setupFileInput(inputId, listId) {\n    const input = document.getElementById(inputId);\n    const listEl = document.getElementById(listId);\n    if (!input || !listEl) return;\n\n    // Store files in a custom property to maintain them across selections\n    if (!input._accumulatedFiles) {\n      input._accumulatedFiles = [];\n    }\n\n    input.addEventListener('change', (e) => {\n      // Get newly selected files\n      const newFiles = Array.from(e.target.files);\n\n      // Add new files to accumulated files (avoid duplicates by name)\n      newFiles.forEach(newFile => {\n        const exists = input._accumulatedFiles.some(existingFile => \n          existingFile.name === newFile.name && existingFile.size === newFile.size\n        );\n        if (!exists) {\n          input._accumulatedFiles.push(newFile);\n        }\n      });\n\n      // Update the input's files property with accumulated files\n      const dt = new DataTransfer();\n      input._accumulatedFiles.forEach(file => {\n        dt.items.add(file);\n      });\n      input.files = dt.files;\n\n      // Update the display\n      updateFileList(input, listEl);\n      saveState();\n    });\n  }\n\n  function updateFileList(input, listEl) {\n    // Clear the display list\n    listEl.innerHTML = '';\n\n    // Re-populate with current files in the input\n    Array.from(input.files).forEach((file, idx) => {\n      const li = document.createElement('li');\n      li.dataset.fileIndex = idx; // Store the file index for removal\n\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const img = document.createElement('img');\n          img.src = reader.result;\n          img.alt = file.name;\n          img.classList.add('preview-thumb');\n          li.appendChild(img);\n          addFileDetails(li, file, idx);\n        };\n        reader.readAsDataURL(file);\n      } else {\n        addFileDetails(li, file, idx);\n      }\n      listEl.appendChild(li);\n    });\n  }\n\n  function addFileDetails(li, file, idx) {\n    const span = document.createElement('span');\n    span.textContent = file.name;\n    span.classList.add('file-name');\n    li.appendChild(span);\n\n    const btn = document.createElement('button');\n    btn.type = 'button';\n    btn.textContent = 'Remove';\n    btn.classList.add('remove-file-btn');\n    btn.addEventListener('click', () => {\n      const input = li.closest('ul').previousElementSibling;\n      const fileIndex = parseInt(li.dataset.fileIndex);\n      removeFile(input, fileIndex);\n    });\n\n    li.appendChild(btn);\n  }\n\n  function removeFile(input, removeIndex) {\n    try {\n      // Remove from accumulated files array\n      if (input._accumulatedFiles && input._accumulatedFiles[removeIndex]) {\n        input._accumulatedFiles.splice(removeIndex, 1);\n      }\n\n      // Update the input's files property\n      const dt = new DataTransfer();\n      if (input._accumulatedFiles) {\n        input._accumulatedFiles.forEach(file => {\n          dt.items.add(file);\n        });\n      } else {\n        // Fallback to current files if accumulated files not available\n        Array.from(input.files).forEach((file, i) => {\n          if (i !== removeIndex) {\n            dt.items.add(file);\n          }\n        });\n      }\n\n      // Update the input's files\n      input.files = dt.files;\n\n      // Update the display\n      const listEl = input.nextElementSibling;\n      if (listEl && listEl.classList.contains('file-list')) {\n        updateFileList(input, listEl);\n      }\n\n      // Save state after removal\n      saveState();\n\n    } catch (error) {\n      console.error('Error removing file:', error);\n      // Fallback: trigger change event to refresh the list\n      input.dispatchEvent(new Event('change'));\n    }\n  }\n\n  // Initialize the form\n  window.addEventListener('DOMContentLoaded', () => {\n    loadState();\n    goToStep(1);\n    setupEventHandlers();\n    setupFileInputs();\n\n    // Initialize rich text editors\n    setTimeout(() => {\n      setupRichTextEditor();\n    }, 500);\n  });\n\n  // Expose public methods\n  window.startProcess = startProcess;\n  window.showSATForm = showSATForm;\n  window.backToWelcome = backToWelcome;\n  window.goToStep = goToStep;\n  window.addRow = addRow;\n  window.removeRow = removeRow;\n  window.handleFormSubmit = handleFormSubmit;\n\n  // Utility function for debouncing\n  function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // Handle form submission with AJAX\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    \n    const form = event.target;\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    const formData = new FormData(form);\n    \n    // Show loading state\n    if (submitBtn) {\n      submitBtn.disabled = true;\n      submitBtn.innerHTML = '<i class=\"fa fa-spinner fa-spin\"></i> Generating Report...';\n    }\n    \n    // Clear previous alerts\n    document.querySelectorAll('.alert').forEach(alert => alert.remove());\n    \n    fetch(form.action, {\n      method: 'POST',\n      body: formData\n    })\n    .then(response => response.json())\n    .then(data => {\n      if (data.success) {\n        // Show success message\n        showAlert(data.message, 'success');\n        \n        // Clear localStorage to prevent auto-population\n        localStorage.removeItem('satFormState');\n        \n        // Redirect to status page after short delay\n        setTimeout(() => {\n          window.location.href = data.redirect_url;\n        }, 1500);\n      } else {\n        throw new Error(data.message || 'Generation failed');\n      }\n    })\n    .catch(error => {\n      console.error('Form submission error:', error);\n      showAlert('Error generating report: ' + error.message, 'error');\n    })\n    .finally(() => {\n      // Restore button state\n      if (submitBtn) {\n        submitBtn.disabled = false;\n        submitBtn.innerHTML = '<i class=\"fa fa-check\"></i> Generate SAT Report';\n      }\n    });\n    \n    return false;\n  }\n  \n  // Show alert messages\n  function showAlert(message, type) {\n    const alertDiv = document.createElement('div');\n    alertDiv.className = `alert alert-${type}`;\n    alertDiv.innerHTML = `\n      <i class=\"fa fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}\"></i>\n      ${message}\n    `;\n    \n    // Insert at top of form\n    const form = document.getElementById('satForm');\n    if (form) {\n      form.insertBefore(alertDiv, form.firstChild);\n      \n      // Auto-remove after 5 seconds for success messages\n      if (type === 'success') {\n        setTimeout(() => alertDiv.remove(), 5000);\n      }\n    }\n  }\n\n  // Rich text editor setup\n  function setupRichTextEditor() {\n    console.log('Setting up rich text editors...');\n\n    // Set up Purpose editor\n    const purposeEditor = document.getElementById('purpose-editor');\n    const purposeTextarea = document.getElementById('purpose');\n    const purposeToolbar = document.querySelector('[data-target=\"purpose-editor\"]');\n\n    if (purposeEditor && purposeTextarea) {\n      console.log('Initializing Purpose editor');\n      initializeEditor(purposeEditor, purposeTextarea, purposeToolbar);\n    }\n\n    // Set up Scope editor\n    const scopeEditor = document.getElementById('scope-editor');\n    const scopeTextarea = document.getElementById('scope');\n    const scopeToolbar = document.querySelector('[data-target=\"scope-editor\"]');\n\n    if (scopeEditor && scopeTextarea) {\n      console.log('Initializing Scope editor');\n      initializeEditor(scopeEditor, scopeTextarea, scopeToolbar);\n    }\n  }\n\n  function initializeEditor(editor, textarea, toolbar) {\n    // Make editor contenteditable\n    editor.contentEditable = true;\n    editor.style.outline = 'none';\n\n    // Load initial content\n    if (textarea.value) {\n      editor.innerHTML = textarea.value;\n    } else {\n      editor.innerHTML = '<p><br></p>';\n    }\n\n    // Set up toolbar if it exists\n    if (toolbar) {\n      setupEditorToolbar(toolbar, editor, textarea);\n    }\n\n    // Sync content changes\n    editor.addEventListener('input', () => {\n      textarea.value = editor.innerHTML;\n    });\n\n    // Handle paste events\n    editor.addEventListener('paste', (e) => {\n      e.preventDefault();\n      const text = (e.originalEvent || e).clipboardData.getData('text/plain');\n      document.execCommand('insertText', false, text);\n      textarea.value = editor.innerHTML;\n    });\n  }\n\n  function setupEditorToolbar(toolbar, editor, textarea) {\n    // Handle toolbar button clicks\n    toolbar.addEventListener('click', (e) => {\n      e.preventDefault();\n      const button = e.target.closest('.toolbar-btn');\n      if (!button) return;\n\n      const command = button.dataset.command;\n      const value = button.dataset.value;\n\n      editor.focus();\n\n      try {\n        if (command === 'formatBlock') {\n          document.execCommand(command, false, value);\n        } else if (command === 'foreColor' || command === 'hiliteColor') {\n          const color = value || button.dataset.value;\n          document.execCommand(command, false, color);\n        } else {\n          document.execCommand(command, false, value);\n        }\n\n        // Update textarea\n        textarea.value = editor.innerHTML;\n\n        // Update button states\n        updateToolbarButtons(toolbar);\n\n      } catch (error) {\n        console.error('Command failed:', command, error);\n      }\n    });\n\n    // Handle color picker changes\n    const colorPickers = toolbar.querySelectorAll('.color-picker');\n    colorPickers.forEach(picker => {\n      picker.addEventListener('change', (e) => {\n        editor.focus();\n        const command = picker.dataset.command;\n        document.execCommand(command, false, e.target.value);\n        textarea.value = editor.innerHTML;\n      });\n    });\n\n  }\n\n})();","size_bytes":19131},"static/js/notifications.js":{"content":"\nclass NotificationSystem {\n    constructor() {\n        this.pollInterval = 30000; // Poll every 30 seconds\n        this.isPolling = false;\n        this.notificationContainer = null;\n        this.init();\n    }\n\n    init() {\n        this.createNotificationElements();\n        this.loadInitialNotifications();\n        this.startPolling();\n        this.bindEvents();\n    }\n\n    createNotificationElements() {\n        // Create notification bell icon if it doesn't exist\n        const nav = document.querySelector('.nav-links') || document.querySelector('nav');\n        if (nav && !document.getElementById('notification-bell')) {\n            const bellHtml = `\n                <div class=\"notification-wrapper\">\n                    <button id=\"notification-bell\" class=\"notification-bell\" title=\"Notifications\">\n                        <i class=\"fas fa-bell\"></i>\n                        <span id=\"notification-badge\" class=\"notification-badge\" style=\"display: none;\">0</span>\n                    </button>\n                    <div id=\"notification-dropdown\" class=\"notification-dropdown\" style=\"display: none;\">\n                        <div class=\"notification-header\">\n                            <h3>Notifications</h3>\n                            <button id=\"mark-all-read\" class=\"mark-all-read\">Mark all read</button>\n                        </div>\n                        <div id=\"notification-list\" class=\"notification-list\">\n                            <div class=\"loading\">Loading notifications...</div>\n                        </div>\n                        <div class=\"notification-footer\">\n                            <a href=\"/notifications\" class=\"view-all\">View All Notifications</a>\n                        </div>\n                    </div>\n                </div>\n            `;\n            nav.insertAdjacentHTML('beforeend', bellHtml);\n        }\n    }\n\n    bindEvents() {\n        const bell = document.getElementById('notification-bell');\n        const dropdown = document.getElementById('notification-dropdown');\n        const markAllRead = document.getElementById('mark-all-read');\n\n        if (bell) {\n            bell.addEventListener('click', (e) => {\n                e.stopPropagation();\n                this.toggleDropdown();\n            });\n        }\n\n        if (markAllRead) {\n            markAllRead.addEventListener('click', () => {\n                this.markAllAsRead();\n            });\n        }\n\n        // Close dropdown when clicking outside\n        document.addEventListener('click', (e) => {\n            if (dropdown && !dropdown.contains(e.target) && !bell.contains(e.target)) {\n                dropdown.style.display = 'none';\n            }\n        });\n    }\n\n    async loadInitialNotifications() {\n        try {\n            const response = await fetch('/notifications/api/notifications');\n            const data = await response.json();\n            \n            if (data.success) {\n                this.updateNotificationBadge(data.unread_count);\n                this.renderNotifications(data.notifications);\n            }\n        } catch (error) {\n            console.error('Error loading notifications:', error);\n        }\n    }\n\n    async startPolling() {\n        if (this.isPolling) return;\n        this.isPolling = true;\n\n        const poll = async () => {\n            try {\n                const response = await fetch('/notifications/api/notifications/unread-count');\n                const data = await response.json();\n                \n                if (data.success) {\n                    this.updateNotificationBadge(data.count);\n                }\n            } catch (error) {\n                console.error('Error polling notifications:', error);\n            }\n            \n            if (this.isPolling) {\n                setTimeout(poll, this.pollInterval);\n            }\n        };\n\n        poll();\n    }\n\n    stopPolling() {\n        this.isPolling = false;\n    }\n\n    updateNotificationBadge(count) {\n        const badge = document.getElementById('notification-badge');\n        if (badge) {\n            if (count > 0) {\n                badge.textContent = count > 99 ? '99+' : count;\n                badge.style.display = 'block';\n            } else {\n                badge.style.display = 'none';\n            }\n        }\n    }\n\n    async toggleDropdown() {\n        const dropdown = document.getElementById('notification-dropdown');\n        if (!dropdown) return;\n\n        if (dropdown.style.display === 'none' || !dropdown.style.display) {\n            // Load fresh notifications when opening\n            await this.loadNotifications();\n            dropdown.style.display = 'block';\n        } else {\n            dropdown.style.display = 'none';\n        }\n    }\n\n    async loadNotifications() {\n        const list = document.getElementById('notification-list');\n        if (!list) return;\n\n        list.innerHTML = '<div class=\"loading\">Loading notifications...</div>';\n\n        try {\n            const response = await fetch('/notifications/api/notifications');\n            const data = await response.json();\n            \n            if (data.success) {\n                this.renderNotifications(data.notifications);\n                this.updateNotificationBadge(data.unread_count);\n            } else {\n                list.innerHTML = '<div class=\"error\">Error loading notifications</div>';\n            }\n        } catch (error) {\n            console.error('Error loading notifications:', error);\n            list.innerHTML = '<div class=\"error\">Error loading notifications</div>';\n        }\n    }\n\n    renderNotifications(notifications) {\n        const list = document.getElementById('notification-list');\n        if (!list) return;\n\n        if (notifications.length === 0) {\n            list.innerHTML = '<div class=\"no-notifications\">No notifications</div>';\n            return;\n        }\n\n        const html = notifications.map(notification => {\n            const timeAgo = this.getTimeAgo(new Date(notification.created_at));\n            const readClass = notification.read ? 'read' : 'unread';\n            const actionButton = notification.action_url ? \n                `<button class=\"notification-action\" onclick=\"window.open('${notification.action_url}', '_blank')\">View</button>` : '';\n\n            return `\n                <div class=\"notification-item ${readClass}\" data-id=\"${notification.id}\">\n                    <div class=\"notification-content\">\n                        <h4>${notification.title}</h4>\n                        <p>${notification.message}</p>\n                        <small class=\"notification-time\">${timeAgo}</small>\n                    </div>\n                    <div class=\"notification-actions\">\n                        ${actionButton}\n                        ${!notification.read ? '<button class=\"mark-read\" onclick=\"notificationSystem.markAsRead(' + notification.id + ')\">Mark read</button>' : ''}\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        list.innerHTML = html;\n    }\n\n    async markAsRead(notificationId) {\n        try {\n            const response = await fetch(`/notifications/api/notifications/${notificationId}/mark-read`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': document.querySelector('meta[name=csrf-token]')?.getAttribute('content') || ''\n                }\n            });\n\n            const data = await response.json();\n            if (data.success) {\n                // Update UI\n                const item = document.querySelector(`[data-id=\"${notificationId}\"]`);\n                if (item) {\n                    item.classList.remove('unread');\n                    item.classList.add('read');\n                    const markReadBtn = item.querySelector('.mark-read');\n                    if (markReadBtn) markReadBtn.remove();\n                }\n                \n                // Refresh count\n                await this.loadInitialNotifications();\n            }\n        } catch (error) {\n            console.error('Error marking notification as read:', error);\n        }\n    }\n\n    async markAllAsRead() {\n        try {\n            const response = await fetch('/notifications/api/notifications/mark-all-read', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': document.querySelector('meta[name=csrf-token]')?.getAttribute('content') || ''\n                }\n            });\n\n            const data = await response.json();\n            if (data.success) {\n                // Refresh notifications\n                await this.loadNotifications();\n            }\n        } catch (error) {\n            console.error('Error marking all notifications as read:', error);\n        }\n    }\n\n    getTimeAgo(date) {\n        const now = new Date();\n        const diffMs = now - date;\n        const diffMins = Math.floor(diffMs / 60000);\n        const diffHours = Math.floor(diffMs / 3600000);\n        const diffDays = Math.floor(diffMs / 86400000);\n\n        if (diffMins < 1) return 'Just now';\n        if (diffMins < 60) return `${diffMins}m ago`;\n        if (diffHours < 24) return `${diffHours}h ago`;\n        if (diffDays < 7) return `${diffDays}d ago`;\n        return date.toLocaleDateString();\n    }\n\n    // Public method to create notifications from other parts of the app\n    static showToast(title, message, type = 'info') {\n        const toast = document.createElement('div');\n        toast.className = `notification-toast notification-${type}`;\n        toast.innerHTML = `\n            <div class=\"toast-content\">\n                <h4>${title}</h4>\n                <p>${message}</p>\n            </div>\n            <button class=\"toast-close\">&times;</button>\n        `;\n\n        document.body.appendChild(toast);\n\n        // Auto remove after 5 seconds\n        setTimeout(() => {\n            if (toast.parentNode) {\n                toast.parentNode.removeChild(toast);\n            }\n        }, 5000);\n\n        // Close button\n        toast.querySelector('.toast-close').addEventListener('click', () => {\n            if (toast.parentNode) {\n                toast.parentNode.removeChild(toast);\n            }\n        });\n    }\n}\n\n// Initialize notification system when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.notificationSystem = new NotificationSystem();\n});\n\n// Expose toast method globally\nwindow.showNotificationToast = NotificationSystem.showToast;\n","size_bytes":10558},"static/js/table-responsive.js":{"content":"// ========== RESPONSIVE TABLE SYSTEM WITH SMART COLUMN MANAGEMENT ==========\n(function() {\n  'use strict';\n\n  function initializeResponsiveTables() {\n    const tables = document.querySelectorAll('table');\n\n    tables.forEach(table => {\n      createMobileCardLayout(table);\n      setupColumnPriorities(table);\n      setupStickyColumns(table);\n      addHeaderTooltips(table);\n      implementSmartColumnHiding(table);\n    });\n\n    // Handle window resize with debouncing\n    window.addEventListener('resize', debounce(handleTableResize, 100));\n\n    // Initial optimization\n    optimizeForCurrentScreenSize();\n  }\n\n  function implementSmartColumnHiding(table) {\n    const headers = table.querySelectorAll('th');\n    const rows = table.querySelectorAll('tbody tr');\n\n    // Add column visibility controls\n    const tableContainer = table.closest('.table-responsive');\n    if (tableContainer) {\n      const controlsContainer = document.createElement('div');\n      controlsContainer.className = 'table-column-controls';\n      controlsContainer.innerHTML = `\n        <div class=\"column-toggle-buttons\">\n          <button type=\"button\" class=\"btn-secondary btn-small\" onclick=\"toggleAllColumns(this)\">\n            <i class=\"fas fa-columns\"></i> Show All Columns\n          </button>\n          <button type=\"button\" class=\"btn-secondary btn-small\" onclick=\"toggleEssentialColumns(this)\">\n            <i class=\"fas fa-eye\"></i> Essential Only\n          </button>\n        </div>\n      `;\n      tableContainer.prepend(controlsContainer);\n    }\n  }\n\n  function optimizeForCurrentScreenSize() {\n    const screenWidth = window.innerWidth;\n\n    // Adjust layout based on screen size\n    if (screenWidth < 1200) {\n      // Reduce padding and margins for more space\n      document.documentElement.style.setProperty('--dynamic-padding', '8px');\n      document.documentElement.style.setProperty('--dynamic-margin', '4px');\n\n      // Hide non-essential UI elements\n      hideNonEssentialElements();\n    } else {\n      document.documentElement.style.setProperty('--dynamic-padding', '16px');\n      document.documentElement.style.setProperty('--dynamic-margin', '12px');\n\n      showAllElements();\n    }\n  }\n\n  function hideNonEssentialElements() {\n    // Hide step descriptions in progress sidebar\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'none';\n    });\n\n    // Collapse form section descriptions\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'none';\n    });\n\n    // Make progress header more compact\n    const progressHeader = document.querySelector('.progress-header p');\n    if (progressHeader) progressHeader.style.display = 'none';\n  }\n\n  function showAllElements() {\n    // Show step descriptions\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'block';\n    });\n\n    // Show form section descriptions\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'block';\n    });\n\n    // Show progress header description\n    const progressHeader = document.querySelector('.progress-header p');\n    if (progressHeader) progressHeader.style.display = 'block';\n  }\n\n  // Utility function for debouncing\n  function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // Initialize when DOM is ready\n  document.addEventListener('DOMContentLoaded', function() {\n    initializeResponsiveTables();\n  });\n\n})();","size_bytes":3667},"replit.md":{"content":"# Overview\n\nThis is a comprehensive Flask-based web application for generating System Acceptance Testing (SAT) reports, specifically designed for Cully Automation. The application provides a complete user management system with role-based access control, admin approval workflows, and multi-step report generation capabilities. Users can create detailed SAT reports through a guided interface, with built-in approval workflows for Technical Managers and Project Managers, and automated document generation in Word and PDF formats.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Template Engine**: Jinja2 templates with responsive HTML/CSS design\n- **UI Framework**: Custom CSS with Font Awesome icons and Google Fonts (Inter)\n- **JavaScript**: Vanilla JavaScript for form interactions, signature pad integration, and CSRF token management\n- **Responsive Design**: Mobile-first approach with adaptive layouts for different screen sizes\n\n## Backend Architecture\n- **Web Framework**: Flask 2.2.3 with modular blueprint structure\n- **Authentication**: Flask-Login with password hashing using Werkzeug\n- **Security**: CSRF protection via Flask-WTF, role-based access control decorators\n- **Database ORM**: SQLAlchemy for database operations and migrations\n- **Session Management**: Server-side sessions with configurable timeouts\n\n## Database Design\n- **User Management**: Users table with roles (Admin, Engineer, TM, PM), status tracking, and password hashing\n- **Report Storage**: Reports table with JSON data storage for form submissions\n- **System Settings**: Key-value configuration storage for application settings\n- **Notifications**: User notification system with read/unread status tracking\n\n## Document Generation\n- **Template Processing**: DocxTemplate for Word document generation from templates\n- **PDF Conversion**: Windows COM integration (pywin32) for automated Word-to-PDF conversion\n- **File Management**: Organized directory structure for uploads, signatures, and generated outputs\n\n## Email Integration\n- **SMTP Configuration**: Gmail integration with app password authentication\n- **Notification System**: Automated email notifications for approval workflows\n- **Retry Logic**: Built-in retry mechanisms for email delivery failures\n\n## Role-Based Workflow\n- **Engineer Role**: Create and edit reports until Technical Manager approval\n- **Technical Manager Role**: Review and approve engineer submissions\n- **Project Manager Role**: Final approval and client document preparation\n- **Admin Role**: Complete system oversight, user management, and configuration\n\n## Security Features\n- **Password Security**: Werkzeug password hashing with salt\n- **CSRF Protection**: Token-based protection for all form submissions\n- **Session Security**: HTTP-only cookies with configurable expiration\n- **Input Validation**: Server-side validation for all user inputs\n\n# Production Deployment Configuration\n\n## Server Configuration\n- **Target Server**: 172.16.18.21 (Windows Server)\n- **Internal Access**: http://172.16.18.21:5000 (company network only)\n- **Security Model**: No external ports exposed - internal access only\n- **Access Control**: Company network employees only (secure by design)\n\n## Deployment Files\n- **app.py**: Main Flask application with production configuration\n- **start_production.bat**: Windows batch file for server startup\n- **config.py**: Environment configuration and security settings\n\n## Security Features\n- **Network Isolation**: Internal company network access only\n- **No External Ports**: Maximum security through network-level isolation\n- **CSRF Protection**: Enhanced token-based protection for all forms\n- **Session Security**: Secure session management with timeout controls\n- **Authentication**: Role-based access control with password hashing\n\n## External Dependencies\n\n## Database\n- **PostgreSQL**: Primary production database (configurable via DATABASE_URL)\n- **SQLite**: Development fallback database with file-based storage\n- **psycopg2-binary**: PostgreSQL adapter for Python\n\n## Email Services\n- **Gmail SMTP**: Email delivery through Gmail's SMTP servers\n- **App Passwords**: Secure authentication using Gmail app-specific passwords\n\n## Document Processing\n- **Microsoft Word**: Required for PDF conversion functionality (Windows only)\n- **pywin32**: Windows COM interface for Word automation\n- **python-docx**: Word document manipulation and template processing\n- **docxtpl**: Advanced template processing with variable substitution\n\n## Web Dependencies\n- **Flask Extensions**: flask-login, flask-wtf, flask-sqlalchemy for core functionality\n- **Image Processing**: Pillow for image manipulation and signature processing\n- **Web Scraping**: requests and beautifulsoup4 for external data integration\n- **Security**: itsdangerous for secure token generation\n- **Production Server**: Gunicorn for production WSGI deployment\n\n## Frontend Libraries\n- **Font Awesome 6.0**: Icon library for UI elements\n- **Google Fonts**: Inter font family for consistent typography\n- **Signature Pad**: signature_pad library for digital signature capture\n\n## Development Tools\n- **python-dotenv**: Environment variable management\n- **logging**: Comprehensive application logging and error tracking","size_bytes":5310},"static/css/form.js":{"content":"// ========== RESPONSIVE TABLE SYSTEM WITH SMART COLUMN MANAGEMENT ==========\n  function initializeResponsiveTables() {\n    const tables = document.querySelectorAll('table');\n\n    tables.forEach(table => {\n      createMobileCardLayout(table);\n      setupColumnPriorities(table);\n      setupStickyColumns(table);\n      addHeaderTooltips(table);\n      implementSmartColumnHiding(table);\n    });\n\n    // Handle window resize with debouncing\n    window.addEventListener('resize', debounce(handleTableResize, 100));\n\n    // Initial optimization\n    optimizeForCurrentScreenSize();\n  }\n\n  function implementSmartColumnHiding(table) {\n    const headers = table.querySelectorAll('th');\n    const rows = table.querySelectorAll('tbody tr');\n\n    // Add column visibility controls\n    const tableContainer = table.closest('.table-responsive');\n    if (tableContainer) {\n      const controlsContainer = document.createElement('div');\n      controlsContainer.className = 'table-column-controls';\n      controlsContainer.innerHTML = `\n        <div class=\"column-toggle-buttons\">\n          <button type=\"button\" class=\"btn-secondary btn-small\" onclick=\"toggleAllColumns(this)\">\n            <i class=\"fas fa-columns\"></i> Show All Columns\n          </button>\n          <button type=\"button\" class=\"btn-secondary btn-small\" onclick=\"toggleEssentialColumns(this)\">\n            <i class=\"fas fa-eye\"></i> Essential Only\n          </button>\n        </div>\n      `;\n      tableContainer.prepend(controlsContainer);\n    }\n  }\n\n  function optimizeForCurrentScreenSize() {\n    const screenWidth = window.innerWidth;\n\n    // Adjust layout based on screen size\n    if (screenWidth < 1200) {\n      // Reduce padding and margins for more space\n      document.documentElement.style.setProperty('--dynamic-padding', '8px');\n      document.documentElement.style.setProperty('--dynamic-margin', '4px');\n\n      // Hide non-essential UI elements\n      hideNonEssentialElements();\n    } else {\n      document.documentElement.style.setProperty('--dynamic-padding', '16px');\n      document.documentElement.style.setProperty('--dynamic-margin', '12px');\n\n      showAllElements();\n    }\n  }\n\n  function hideNonEssentialElements() {\n    // Hide step descriptions in progress sidebar\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'none';\n    });\n\n    // Collapse form section descriptions\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'none';\n    });\n\n    // Make progress header more compact\n    const progressHeader = document.querySelector('.progress-header p');\n    if (progressHeader) progressHeader.style.display = 'none';\n  }\n\n  function showAllElements() {\n    // Show step descriptions\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'block';\n    });\n\n    // Show form section descriptions\n    document.querySelectorAll('.step-description').forEach(el => {\n      el.style.display = 'block';\n    });\n\n    // Show progress header description\n    const progressHeader = document.querySelector('.progress-header p');\n    if (progressHeader) progressHeader.style.display = 'block';\n  }","size_bytes":3184},"clear_memory.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nMemory clearing script for SAT Report Generator\nClears all cached configurations and reloads fresh credentials on startup\n\"\"\"\n\nimport os\nimport sys\nimport gc\nimport logging\n\ndef clear_application_memory():\n    \"\"\"Clear all cached configurations and force garbage collection\"\"\"\n    print(\"🧹 Clearing application memory...\")\n    \n    # Clear Python module cache for configuration modules\n    modules_to_clear = ['config', 'utils', 'auth', 'models']\n    \n    for module_name in modules_to_clear:\n        if module_name in sys.modules:\n            print(f\"   🗑️  Clearing {module_name} from module cache\")\n            del sys.modules[module_name]\n    \n    # Force garbage collection\n    collected = gc.collect()\n    print(f\"   ♻️  Garbage collected: {collected} objects\")\n    \n    # Clear environment cache (if using dotenv)\n    env_vars_to_refresh = ['SMTP_PASSWORD', 'SMTP_USERNAME', 'DEFAULT_SENDER']\n    for var in env_vars_to_refresh:\n        if var in os.environ:\n            value = os.environ[var]\n            # Re-set to force refresh\n            os.environ[var] = value\n            print(f\"   🔄 Refreshed environment variable: {var}\")\n    \n    print(\"✅ Memory clearing completed!\")\n\ndef test_fresh_credentials():\n    \"\"\"Test that credentials are loading fresh\"\"\"\n    print(\"🧪 Testing fresh credential loading...\")\n    \n    try:\n        from config import Config\n        creds = Config.get_smtp_credentials()\n        \n        print(f\"   📧 SMTP Server: {creds['server']}\")\n        print(f\"   👤 Username: {creds['username']}\")\n        print(f\"   🔐 Password: {creds['password'][:4]}...{creds['password'][-4:]}\")\n        print(f\"   📬 Sender: {creds['sender']}\")\n        print(\"✅ Fresh credentials loaded successfully!\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error loading fresh credentials: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    clear_application_memory()\n    test_fresh_credentials()","size_bytes":2014},"deploy.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nProduction deployment script for SAT Report Generator\nRun this on your server (172.16.18.21) for domain-only access on port 80\n\"\"\"\n\nimport os\nimport sys\nimport subprocess\nfrom config import config\nfrom app import create_app\n\ndef setup_environment():\n    \"\"\"Set up production environment variables\"\"\"\n    \n    # Check if PORT is already set, preserve it\n    existing_port = os.environ.get('PORT')\n    \n    # Set required environment variables for production\n    env_vars = {\n        'FLASK_ENV': 'production',\n        'DEBUG': 'False',\n        'ALLOWED_DOMAINS': 'automation-reports.mobilehmi.org',\n        'SERVER_IP': '172.16.18.21',\n        'BLOCK_IP_ACCESS': 'True',\n        'SECRET_KEY': 'your-production-secret-key-change-this-immediately',\n        \n        # Email configuration - update with your details\n        'SMTP_SERVER': 'smtp.gmail.com',\n        'SMTP_PORT': '587',\n        'SMTP_USERNAME': 'meda.revanth@gmail.com',\n        'SMTP_PASSWORD': 'rleg tbhv rwvb kdus',\n        'DEFAULT_SENDER': 'meda.revanth@gmail.com',\n        'ENABLE_EMAIL_NOTIFICATIONS': 'True',\n        \n        # Security settings\n        'SESSION_COOKIE_SECURE': 'True',\n        'WTF_CSRF_ENABLED': 'True',\n        'PERMANENT_SESSION_LIFETIME': '7200',\n        \n        # Database (will use SQLite by default, change to PostgreSQL if needed)\n        # 'DATABASE_URL': 'postgresql://username:password@localhost/sat_reports'\n    }\n    \n    # Set environment variables (but preserve existing PORT if set)\n    for key, value in env_vars.items():\n        os.environ[key] = value\n    \n    # Restore PORT if it was previously set\n    if existing_port:\n        os.environ['PORT'] = existing_port\n        print(f\"✅ Environment variables configured for production (using PORT={existing_port})\")\n    else:\n        os.environ['PORT'] = '80'\n        print(\"✅ Environment variables configured for production (using default PORT=80)\")\n\ndef check_dependencies():\n    \"\"\"Check if all required dependencies are installed\"\"\"\n    try:\n        import flask\n        import flask_login\n        import flask_wtf\n        import flask_sqlalchemy\n        import docxtpl\n        import PIL\n        print(\"✅ All required dependencies are available\")\n        return True\n    except ImportError as e:\n        print(f\"❌ Missing dependency: {e}\")\n        print(\"Run: pip install -r requirements.txt\")\n        return False\n\ndef create_directories():\n    \"\"\"Create required directories\"\"\"\n    directories = [\n        'static/uploads',\n        'static/signatures', \n        'outputs',\n        'instance',\n        'logs',\n        'data'\n    ]\n    \n    for directory in directories:\n        os.makedirs(directory, exist_ok=True)\n    \n    print(\"✅ Required directories created\")\n\ndef main():\n    \"\"\"Main deployment function\"\"\"\n    print(\"🚀 SAT Report Generator - Production Deployment\")\n    print(\"=\" * 50)\n    print(f\"Target Server: 172.16.18.21\")\n    print(f\"Domain: automation-reports.mobilehmi.org\")\n    print(f\"Port: {os.environ.get('PORT', '80')}\")\n    print(\"=\" * 50)\n    \n    # Setup environment\n    setup_environment()\n    \n    # Check dependencies\n    if not check_dependencies():\n        sys.exit(1)\n    \n    # Create directories\n    create_directories()\n    \n    # Create Flask app with production config\n    app = create_app('production')\n    \n    # Verify configuration\n    print(f\"🌐 Allowed Domains: {app.config.get('ALLOWED_DOMAINS')}\")\n    print(f\"🛡️  IP Blocking: {app.config.get('BLOCK_IP_ACCESS')}\")\n    print(f\"🔒 Debug Mode: {app.config.get('DEBUG')}\")\n    print(f\"🚪 Port: {app.config.get('PORT')}\")\n    print()\n    \n    # Initialize database\n    with app.app_context():\n        from models import db\n        try:\n            db.create_all()\n            print(\"✅ Database initialized successfully\")\n        except Exception as e:\n            print(f\"⚠️  Database warning: {e}\")\n    \n    # Security status\n    print(\"\\n🔐 SECURITY STATUS:\")\n    if app.config.get('BLOCK_IP_ACCESS'):\n        print(\"✅ Domain-only access: ENABLED\")\n        print(\"   - automation-reports.mobilehmi.org ✅ ALLOWED\")\n        print(\"   - 172.16.18.21 ❌ BLOCKED\")\n    else:\n        print(\"⚠️  Domain-only access: DISABLED\")\n    \n    if not app.config.get('DEBUG'):\n        print(\"✅ Production mode: ENABLED\")\n    else:\n        print(\"⚠️  Production mode: DISABLED\")\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(\"🚀 Starting production server...\")\n    print(\"🌐 Access your application at: http://automation-reports.mobilehmi.org\")\n    print(\"🚫 Direct IP access will be blocked\")\n    print(\"=\" * 50)\n    \n    # Start the server\n    port = int(os.environ.get('PORT', '80'))\n    try:\n        print(f\"🌐 Starting server on port {port}...\")\n        app.run(\n            host='0.0.0.0',\n            port=port,\n            debug=False,\n            threaded=True,\n            use_reloader=False\n        )\n    except PermissionError:\n        if port == 80:\n            print(\"❌ Permission denied! Port 80 requires administrator privileges.\")\n            print(\"Solution: Run as administrator or use a different port.\")\n            print(\"To run on port 8080 instead:\")\n            print(\"  Set PORT environment variable: set PORT=8080\")\n            print(\"  Then configure your web server to forward port 80 to 8080\")\n        else:\n            print(f\"❌ Permission denied for port {port}!\")\n            print(\"Try a different port number.\")\n    except Exception as e:\n        print(f\"❌ Server startup failed: {e}\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()","size_bytes":5596},"middleware.py":{"content":"\"\"\"\nProduction security middleware for domain-only access\n\"\"\"\n\nfrom flask import request, abort, current_app\nfrom functools import wraps\nimport ipaddress\nimport re\n\ndef domain_security_middleware():\n    \"\"\"\n    Middleware to block direct IP access and enforce domain-only access\n    \"\"\"\n    # Get configuration\n    allowed_domains = current_app.config.get('ALLOWED_DOMAINS', [])\n    server_ip = current_app.config.get('SERVER_IP', '')\n    block_ip_access = current_app.config.get('BLOCK_IP_ACCESS', False)\n    \n    # Skip security for development environment (Replit domains)\n    host = request.headers.get('Host', '').lower()\n    if 'replit.dev' in host or 'repl.co' in host:\n        return  # Allow Replit development domains\n    \n    if not block_ip_access:\n        return  # Skip if not in production or blocking disabled\n    \n    # Remove port from host if present\n    host_without_port = host.split(':')[0]\n    \n    # Check if accessing via IP address\n    try:\n        ipaddress.ip_address(host_without_port)\n        # This is an IP address access - allow internal server IP, block others\n        server_ip = current_app.config.get('SERVER_IP', '')\n        if host_without_port == server_ip or host_without_port in ['127.0.0.1', 'localhost']:\n            return  # Allow internal server IP and localhost\n        else:\n            current_app.logger.warning(f\"Blocked external IP access attempt: {host} from {request.remote_addr}\")\n            abort(403)  # Forbidden\n    except ValueError:\n        # This is a domain name, check if it's allowed\n        pass\n    \n    # Check if domain is in allowed list\n    if allowed_domains and host_without_port not in allowed_domains:\n        current_app.logger.warning(f\"Blocked unauthorized domain access: {host} from {request.remote_addr}\")\n        abort(403)  # Forbidden\n    \n    # Additional security: Check for common attack patterns\n    user_agent = request.headers.get('User-Agent', '').lower()\n    suspicious_patterns = [\n        'scanner', 'bot', 'crawler', 'spider', \n        'masscan', 'nmap', 'zmap', 'sqlmap'\n    ]\n    \n    for pattern in suspicious_patterns:\n        if pattern in user_agent:\n            current_app.logger.warning(f\"Blocked suspicious user agent: {user_agent} from {request.remote_addr}\")\n            abort(403)\n\ndef require_domain_access(f):\n    \"\"\"\n    Decorator to enforce domain-only access for specific routes\n    \"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        domain_security_middleware()\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef init_security_middleware(app):\n    \"\"\"\n    Initialize security middleware for the Flask app\n    \"\"\"\n    @app.before_request\n    def before_request():\n        # Skip security checks for health endpoint and static files\n        if request.endpoint in ['health_check', 'static']:\n            return\n            \n        # Skip security for development environment\n        host = request.headers.get('Host', '').lower()\n        if 'replit.dev' in host or 'repl.co' in host:\n            return  # Allow Replit development domains\n            \n        # Apply domain security based on configuration\n        if current_app.config.get('BLOCK_IP_ACCESS', False):\n            domain_security_middleware()\n        \n        # Additional production security headers\n        @app.after_request\n        def security_headers(response):\n            # Security headers for production\n            response.headers['X-Content-Type-Options'] = 'nosniff'\n            \n            # Conditional X-Frame-Options for iframe support\n            if current_app.config.get('BLOCK_IP_ACCESS', True):\n                response.headers['X-Frame-Options'] = 'DENY'  # Block iframes for secure mode\n            else:\n                response.headers['X-Frame-Options'] = 'SAMEORIGIN'  # Allow same-origin iframes\n            \n            response.headers['X-XSS-Protection'] = '1; mode=block'\n            \n            # Only set HSTS if using HTTPS\n            if request.is_secure:\n                response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'\n            \n            # Flexible CSP for iframe embedding\n            if current_app.config.get('BLOCK_IP_ACCESS', True):\n                # Strict CSP for secure mode\n                response.headers['Content-Security-Policy'] = \"default-src 'self'; script-src 'self' 'unsafe-inline' cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' fonts.googleapis.com cdnjs.cloudflare.com; font-src 'self' fonts.gstatic.com; img-src 'self' data:;\"\n            else:\n                # Permissive CSP for iframe embedding\n                response.headers['Content-Security-Policy'] = \"default-src 'self'; script-src 'self' 'unsafe-inline' cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' fonts.googleapis.com cdnjs.cloudflare.com; font-src 'self' fonts.gstatic.com; img-src 'self' data:; frame-ancestors *;\"\n            \n            response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'\n            \n            return response","size_bytes":5061},"production_start.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nProduction startup script for SAT Report Generator\nEnsures proper environment and configuration for domain-only access\n\"\"\"\n\nimport os\nimport sys\nfrom config import config\nfrom app import create_app\n\ndef main():\n    \"\"\"Main entry point for production deployment\"\"\"\n    \n    # Set production environment\n    os.environ['FLASK_ENV'] = 'production'\n    \n    # Verify production configuration\n    print(\"🔧 SAT Report Generator - Production Deployment\")\n    print(\"=\" * 50)\n    \n    # Check required environment variables\n    required_vars = [\n        'ALLOWED_DOMAINS',\n        'SERVER_IP', \n        'SMTP_PASSWORD'\n    ]\n    \n    missing_vars = []\n    for var in required_vars:\n        if not os.environ.get(var):\n            missing_vars.append(var)\n    \n    if missing_vars:\n        print(f\"❌ Missing required environment variables: {', '.join(missing_vars)}\")\n        print(\"\\nPlease set the following environment variables:\")\n        print(\"- ALLOWED_DOMAINS=automation-reports.mobilehmi.org\")\n        print(\"- SERVER_IP=172.16.18.21\")\n        print(\"- SMTP_PASSWORD=<your-gmail-app-password>\")\n        print(\"- BLOCK_IP_ACCESS=True\")\n        sys.exit(1)\n    \n    # Create Flask app with production config\n    app = create_app('production')\n    \n    # Verify configuration\n    print(f\"🌐 Allowed Domains: {app.config.get('ALLOWED_DOMAINS')}\")\n    print(f\"🛡️  IP Blocking: {app.config.get('BLOCK_IP_ACCESS')}\")\n    print(f\"🔒 Debug Mode: {app.config.get('DEBUG')}\")\n    print(f\"🚪 Port: {app.config.get('PORT')}\")\n    print()\n    \n    # Security status\n    if app.config.get('BLOCK_IP_ACCESS'):\n        print(\"✅ Domain-only access security: ENABLED\")\n    else:\n        print(\"⚠️  Domain-only access security: DISABLED\")\n    \n    if not app.config.get('DEBUG'):\n        print(\"✅ Production mode: ENABLED\")\n    else:\n        print(\"⚠️  Production mode: DISABLED (Debug is on)\")\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(\"🚀 Ready for deployment!\")\n    print(\"Use: gunicorn --bind 0.0.0.0:80 --workers 4 production_start:app\")\n    \n    return app\n\n# Create app instance for Gunicorn\napp = main()\n\nif __name__ == '__main__':\n    # Direct execution for testing\n    app.run(host='0.0.0.0', port=80, debug=False)","size_bytes":2261},"run_https_443.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nProduction HTTPS Flask application on port 443\nDirect access with SSL/TLS encryption\n\"\"\"\n\nimport os\nimport sys\nfrom config import config\nfrom app import create_app\n\ndef setup_https_environment():\n    \"\"\"Set up environment for direct HTTPS on port 443\"\"\"\n    \n    env_vars = {\n        'FLASK_ENV': 'production',\n        'DEBUG': 'False',\n        'PORT': '443',\n        'ALLOWED_DOMAINS': 'automation-reports.mobilehmi.org',\n        'SERVER_IP': '172.16.18.21',\n        'BLOCK_IP_ACCESS': 'True',  # Enable domain-only security\n        'SECRET_KEY': 'production-secure-key-change-immediately',\n        \n        # Email configuration\n        'SMTP_SERVER': 'smtp.gmail.com',\n        'SMTP_PORT': '587',\n        'SMTP_USERNAME': 'meda.revanth@gmail.com',\n        'SMTP_PASSWORD': 'rleg tbhv rwvb kdus',\n        'DEFAULT_SENDER': 'meda.revanth@gmail.com',\n        'ENABLE_EMAIL_NOTIFICATIONS': 'True',\n        \n        # HTTPS Security settings\n        'SESSION_COOKIE_SECURE': 'True',  # Require HTTPS for cookies\n        'WTF_CSRF_ENABLED': 'True',\n        'PERMANENT_SESSION_LIFETIME': '7200',\n    }\n    \n    for key, value in env_vars.items():\n        os.environ[key] = value\n    \n    print(\"✅ HTTPS environment configured for port 443\")\n\ndef main():\n    \"\"\"Production HTTPS Flask application\"\"\"\n    print(\"🔒 SAT Report Generator - Production HTTPS Server\")\n    print(\"=\" * 60)\n    print(\"HTTPS Configuration:\")\n    print(\"- Server: https://automation-reports.mobilehmi.org:443\")\n    print(\"- SSL/TLS: Required (port 443)\")\n    print(\"- Domain security: ENABLED\")\n    print(\"- IP blocking: ENABLED\")\n    print(\"- Certificate: SSL certificate required\")\n    print(\"=\" * 60)\n    \n    setup_https_environment()\n    \n    # Create Flask app\n    app = create_app('production')\n    \n    print(f\"🌐 Port: {app.config.get('PORT')}\")\n    print(f\"🛡️  Domain Security: {app.config.get('BLOCK_IP_ACCESS')}\")\n    print(f\"🔒 HTTPS Mode: Required\")\n    print()\n    print(\"🔐 Security Status:\")\n    print(\"✅ Domain-only access: automation-reports.mobilehmi.org\")\n    print(\"❌ Direct IP access: 172.16.18.21 (blocked)\")\n    print(\"✅ SSL/TLS encryption: Required\")\n    print()\n    print(\"📋 SSL Certificate Requirements:\")\n    print(\"1. Valid SSL certificate for automation-reports.mobilehmi.org\")\n    print(\"2. Certificate files: server.crt and server.key\")\n    print(\"3. Place certificates in 'ssl' directory\")\n    print()\n    print(\"🚀 Starting HTTPS server...\")\n    print(\"=\" * 60)\n    \n    # Initialize database\n    with app.app_context():\n        from models import db\n        try:\n            db.create_all()\n            print(\"✅ Database initialized\")\n        except Exception as e:\n            print(f\"⚠️  Database warning: {e}\")\n    \n    # Check for SSL certificates\n    ssl_cert_path = 'ssl/server.crt'\n    ssl_key_path = 'ssl/server.key'\n    \n    # Create SSL directory if it doesn't exist\n    os.makedirs('ssl', exist_ok=True)\n    \n    # Start HTTPS server\n    try:\n        if os.path.exists(ssl_cert_path) and os.path.exists(ssl_key_path):\n            print(\"✅ SSL certificates found - using production certificates\")\n            ssl_context = (ssl_cert_path, ssl_key_path)\n        else:\n            print(\"⚠️  SSL certificates not found - using self-signed certificate\")\n            print(\"   For production, place your SSL certificate files in:\")\n            print(\"   - ssl/server.crt (certificate)\")\n            print(\"   - ssl/server.key (private key)\")\n            ssl_context = 'adhoc'  # Self-signed for development\n        \n        print(f\"🌐 Starting HTTPS server on port 443...\")\n        app.run(\n            host='0.0.0.0',\n            port=443,\n            debug=False,\n            threaded=True,\n            use_reloader=False,\n            ssl_context=ssl_context\n        )\n    except PermissionError:\n        print(\"❌ Permission denied for port 443!\")\n        print(\"   Port 443 requires administrator privileges.\")\n        print(\"   Solution: Run Command Prompt as Administrator\")\n    except Exception as e:\n        print(f\"❌ HTTPS server error: {e}\")\n        print(\"   Check SSL certificate configuration\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()","size_bytes":4247},"run_local_https.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nLocal HTTPS Flask application for IIS integration\nRuns on localhost:8080 for iframe embedding\n\"\"\"\n\nimport os\nimport sys\nfrom config import config\nfrom app import create_app\n\ndef setup_local_environment():\n    \"\"\"Set up environment for local IIS integration\"\"\"\n    \n    env_vars = {\n        'FLASK_ENV': 'production',\n        'DEBUG': 'False',\n        'PORT': '443',\n        'ALLOWED_DOMAINS': 'automation-reports.mobilehmi.org',\n        'SERVER_IP': '172.16.18.21',\n        'BLOCK_IP_ACCESS': 'True',  # Enable security for direct HTTPS access\n        'SECRET_KEY': 'production-secure-key-change-immediately',\n        \n        # Email configuration\n        'SMTP_SERVER': 'smtp.gmail.com',\n        'SMTP_PORT': '587',\n        'SMTP_USERNAME': 'meda.revanth@gmail.com',\n        'SMTP_PASSWORD': 'rleg tbhv rwvb kdus',\n        'DEFAULT_SENDER': 'meda.revanth@gmail.com',\n        'ENABLE_EMAIL_NOTIFICATIONS': 'True',\n        \n        # Security settings for iframe embedding\n        'SESSION_COOKIE_SECURE': 'False',  # Allow HTTP for local development\n        'WTF_CSRF_ENABLED': 'True',\n        'PERMANENT_SESSION_LIFETIME': '7200',\n    }\n    \n    for key, value in env_vars.items():\n        os.environ[key] = value\n    \n    print(\"✅ Local environment configured for IIS integration\")\n\ndef main():\n    \"\"\"Direct HTTPS Flask application on port 443\"\"\"\n    print(\"🔒 SAT Report Generator - Direct HTTPS Server\")\n    print(\"=\" * 50)\n    print(\"Configuration:\")\n    print(\"- HTTPS server: https://automation-reports.mobilehmi.org:443\")\n    print(\"- Direct access (no IIS redirection needed)\")\n    print(\"- Domain-only access: ENABLED\")\n    print(\"- SSL/TLS: Required\")\n    print(\"=\" * 50)\n    \n    setup_local_environment()\n    \n    # Create Flask app\n    app = create_app('production')\n    \n    # Add iframe support headers\n    @app.after_request\n    def add_iframe_headers(response):\n        # Allow iframe embedding\n        response.headers.pop('X-Frame-Options', None)\n        \n        # Set permissive iframe policy\n        response.headers['Content-Security-Policy'] = (\n            \"default-src 'self'; \"\n            \"script-src 'self' 'unsafe-inline' cdnjs.cloudflare.com; \"\n            \"style-src 'self' 'unsafe-inline' fonts.googleapis.com cdnjs.cloudflare.com; \"\n            \"font-src 'self' fonts.gstatic.com; \"\n            \"img-src 'self' data:; \"\n            \"frame-ancestors *;\"  # Allow embedding in any frame\n        )\n        \n        # CORS headers for cross-origin requests\n        response.headers['Access-Control-Allow-Origin'] = '*'\n        response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'\n        response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-CSRFToken'\n        \n        return response\n    \n    print(f\"🌐 Server: {app.config.get('PORT')}\")\n    print(f\"🔓 Security: Local mode (iframe friendly)\")\n    print(f\"📡 Access via IIS: https://automation-reports.mobilehmi.org\")\n    print()\n    print(\"🔗 Setup Instructions:\")\n    print(\"1. Copy index.html to your IIS root directory\")\n    print(\"2. Ensure IIS has SSL certificate for automation-reports.mobilehmi.org\")\n    print(\"3. Start this Flask app (runs in background)\")\n    print(\"4. Access via https://automation-reports.mobilehmi.org\")\n    print()\n    print(\"Press Ctrl+C to stop the server\")\n    print(\"=\" * 50)\n    \n    # Initialize database\n    with app.app_context():\n        from models import db\n        try:\n            db.create_all()\n            print(\"✅ Database initialized\")\n        except Exception as e:\n            print(f\"⚠️  Database warning: {e}\")\n    \n    # Start HTTPS server on port 443\n    try:\n        # For production, you'll need proper SSL certificates\n        # This is a development setup - replace with proper certificates\n        app.run(\n            host='0.0.0.0',  # Bind to all interfaces\n            port=443,\n            debug=False,\n            threaded=True,\n            use_reloader=False,\n            ssl_context='adhoc'  # For development - replace with proper SSL cert\n        )\n    except Exception as e:\n        print(f\"❌ Server error: {e}\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()","size_bytes":4237},"test_no_blocking.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nTest deployment script - NO domain blocking\nUse this to test if the application works on port 8080\n\"\"\"\n\nimport os\nimport sys\nfrom config import config\nfrom app import create_app\n\ndef setup_test_environment():\n    \"\"\"Set up test environment - domain blocking DISABLED\"\"\"\n    \n    env_vars = {\n        'FLASK_ENV': 'production',\n        'DEBUG': 'False',\n        'PORT': '8080',\n        'ALLOWED_DOMAINS': 'automation-reports.mobilehmi.org',\n        'SERVER_IP': '172.16.18.21',\n        'BLOCK_IP_ACCESS': 'False',  # DISABLED for testing\n        'SECRET_KEY': 'test-secret-key',\n        \n        # Email configuration\n        'SMTP_SERVER': 'smtp.gmail.com',\n        'SMTP_PORT': '587',\n        'SMTP_USERNAME': 'meda.revanth@gmail.com',\n        'SMTP_PASSWORD': 'rleg tbhv rwvb kdus',\n        'DEFAULT_SENDER': 'meda.revanth@gmail.com',\n        'ENABLE_EMAIL_NOTIFICATIONS': 'True',\n    }\n    \n    for key, value in env_vars.items():\n        os.environ[key] = value\n    \n    print(\"✅ Test environment configured (domain blocking DISABLED)\")\n\ndef main():\n    \"\"\"Test deployment - no security blocking\"\"\"\n    print(\"🧪 SAT Report Generator - TEST MODE\")\n    print(\"=\" * 50)\n    print(\"Port: 8080\")\n    print(\"Domain blocking: DISABLED (for testing)\")\n    print(\"=\" * 50)\n    \n    setup_test_environment()\n    \n    # Create Flask app\n    app = create_app('production')\n    \n    print(f\"🌐 Server starting on port: {app.config.get('PORT')}\")\n    print(f\"🔓 Domain blocking: {app.config.get('BLOCK_IP_ACCESS')}\")\n    print()\n    print(\"TEST URLS:\")\n    print(\"✅ http://172.16.18.21:8080 (should work)\")\n    print(\"✅ http://automation-reports.mobilehmi.org:8080 (should work)\")\n    print()\n    print(\"Press Ctrl+C to stop the server\")\n    print(\"=\" * 50)\n    \n    # Start server\n    try:\n        app.run(\n            host='0.0.0.0',\n            port=8080,\n            debug=False,\n            threaded=True,\n            use_reloader=False\n        )\n    except Exception as e:\n        print(f\"❌ Server error: {e}\")\n\nif __name__ == '__main__':\n    main()","size_bytes":2087},"static/js/csrf_manager.js":{"content":"/**\n * CSRF Token Manager - Automatically handles CSRF token refresh\n * Prevents \"CSRF token expired\" errors\n */\nclass CSRFManager {\n    constructor() {\n        this.refreshInterval = 300000; // 5 minutes\n        this.maxRetries = 3;\n        this.retryCount = 0;\n        \n        this.init();\n    }\n    \n    init() {\n        console.log('🔐 CSRF Manager initialized');\n        \n        // Start periodic refresh\n        this.startPeriodicRefresh();\n        \n        // Handle form submissions\n        this.interceptFormSubmissions();\n        \n        // Handle AJAX calls\n        this.setupAjaxInterceptor();\n        \n        // Refresh token when page becomes visible (handle tab switching)\n        document.addEventListener('visibilitychange', () => {\n            if (!document.hidden) {\n                this.refreshToken();\n            }\n        });\n    }\n    \n    async refreshToken() {\n        try {\n            console.log('🔄 Refreshing CSRF token...');\n            \n            const response = await fetch('/health', {\n                method: 'GET',\n                headers: {\n                    'X-Requested-With': 'XMLHttpRequest'\n                }\n            });\n            \n            if (response.ok) {\n                const data = await response.json();\n                \n                // Look for CSRF token in response\n                if (data.csrf_token) {\n                    this.updateAllTokens(data.csrf_token);\n                    console.log('✅ CSRF token refreshed successfully');\n                    this.retryCount = 0;\n                } else {\n                    // Generate new token via meta tag method\n                    this.generateNewToken();\n                }\n            } else {\n                throw new Error('Failed to refresh token');\n            }\n            \n        } catch (error) {\n            console.error('❌ Failed to refresh CSRF token:', error);\n            this.retryCount++;\n            \n            if (this.retryCount < this.maxRetries) {\n                setTimeout(() => this.refreshToken(), 5000); // Retry in 5 seconds\n            } else {\n                console.warn('⚠️ Max retries reached. User may see CSRF errors.');\n            }\n        }\n    }\n    \n    generateNewToken() {\n        // Force a new token by making a simple request\n        fetch(window.location.href, {\n            method: 'GET',\n            headers: { 'X-Requested-With': 'XMLHttpRequest' }\n        }).then(response => response.text())\n        .then(html => {\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(html, 'text/html');\n            const metaToken = doc.querySelector('meta[name=\"csrf-token\"]');\n            \n            if (metaToken) {\n                const newToken = metaToken.getAttribute('content');\n                this.updateAllTokens(newToken);\n                console.log('✅ New CSRF token generated');\n            }\n        });\n    }\n    \n    updateAllTokens(newToken) {\n        // Update all CSRF token inputs\n        const tokenInputs = document.querySelectorAll('input[name=\"csrf_token\"]');\n        tokenInputs.forEach(input => {\n            input.value = newToken;\n        });\n        \n        // Update meta tag\n        const metaToken = document.querySelector('meta[name=\"csrf-token\"]');\n        if (metaToken) {\n            metaToken.setAttribute('content', newToken);\n        }\n        \n        // Store in global variable for AJAX calls\n        window.csrfToken = newToken;\n        \n        console.log(`🔄 Updated ${tokenInputs.length} CSRF tokens`);\n    }\n    \n    startPeriodicRefresh() {\n        setInterval(() => {\n            this.refreshToken();\n        }, this.refreshInterval);\n        \n        console.log(`⏰ CSRF token will refresh every ${this.refreshInterval/1000} seconds`);\n    }\n    \n    interceptFormSubmissions() {\n        document.addEventListener('submit', (e) => {\n            const form = e.target;\n            const csrfInput = form.querySelector('input[name=\"csrf_token\"]');\n            \n            if (csrfInput && !csrfInput.value) {\n                e.preventDefault();\n                console.warn('⚠️ Form submission blocked: Missing CSRF token');\n                this.refreshToken().then(() => {\n                    form.submit();\n                });\n            }\n        });\n    }\n    \n    setupAjaxInterceptor() {\n        // Override fetch to automatically include CSRF tokens\n        const originalFetch = window.fetch;\n        window.fetch = function(url, options = {}) {\n            if (options.method && options.method.toUpperCase() !== 'GET') {\n                options.headers = options.headers || {};\n                \n                if (!options.headers['X-CSRFToken']) {\n                    const token = window.csrfToken || \n                                document.querySelector('meta[name=\"csrf-token\"]')?.getAttribute('content') ||\n                                document.querySelector('input[name=\"csrf_token\"]')?.value;\n                    \n                    if (token) {\n                        options.headers['X-CSRFToken'] = token;\n                    }\n                }\n            }\n            \n            return originalFetch.call(this, url, options);\n        };\n    }\n}\n\n// Initialize CSRF Manager when page loads\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.csrfManager = new CSRFManager();\n});\n\n// Also handle cases where DOMContentLoaded already fired\nif (document.readyState === 'loading') {\n    // Document still loading, wait for DOMContentLoaded\n} else {\n    // Document already loaded\n    window.csrfManager = new CSRFManager();\n}","size_bytes":5653}},"version":1}